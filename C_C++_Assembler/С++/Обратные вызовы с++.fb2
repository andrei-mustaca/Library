<?xml version="1.0" encoding="UTF-8"?>
<FictionBook xmlns:l="http://www.w3.org/1999/xlink" xmlns="http://www.gribuser.ru/xml/fictionbook/2.0">
<description>
  <title-info>
    <genre>comp_db</genre>
    <author>
      <first-name>Виталий</first-name>
      <middle-name>Евгеньевич</middle-name>
      <last-name>Ткаченко</last-name>
    </author>
    <book-title>Обратные вызовы в C++</book-title>
    <annotation>
      <p>В практике разработки ПО зачастую встает задача динамической модификации программного кода в зависимости от текущих или настраиваемых значений параметров. Для решения этой задачи широко используются обратные вызовы. В языке C++ обратные вызовы реализуются различными способами, и далеко не всегда очевидно, какой из них лучший для конкретной ситуации. В книге рассмотрены теоретические и практические аспекты организации обратных вызовов, проанализированы достоинства и недостатки различных реализаций, выработаны рекомендации по выбору в зависимости от требований к проектируемому ПО. В первую очередь книга предназначена для программистов среднего (middle) уровня, т.е. тех, кто уже достаточно хорошо знает язык C++, но хотел бы расширить и углубить свои знания в области проектирования и дизайна. В определенной степени она также будет интересна опытным разработчикам, с одной стороны, как систематизация знаний, с другой стороны, как источник идей и методов для решения практических задач.</p>
    </annotation>
    <keywords>Самиздат,языки программирования,разработка программного обеспечения</keywords>
    <date value="2020-09-01">2020</date>
    <coverpage>
      <image l:href="#cover.jpg"/>
    </coverpage>
    <lang>ru</lang>
    <src-lang>ru</src-lang>
  </title-info>
  <document-info>
    <author>
      <first-name>Виталий</first-name>
      <middle-name>Евгеньевич</middle-name>
      <last-name>Ткаченко</last-name>
    </author>
    <program-used> Presto, FictionBook Editor Release 2.6.6</program-used>
    <date>2020</date>
    <src-url>http://www.litres.ru/pages/biblio_book/?art=63642081&amp;lfrom=23664292</src-url>
    <id>fff67b95-fe14-4e66-b771-b3b7f6a64882</id>
    <version>1.0</version>
    <publisher>
      <first-name/>
      <last-name>SelfPub.ru</last-name>
      <id>bf71f3d3-8f55-11e4-82c4-002590591ed2</id>
    </publisher>
  </document-info>
  <publish-info>
    <publisher>SelfPub</publisher>
    <year>2021</year>
  </publish-info>
  <custom-info info-type="employee-list">Ткаченко В. Е.</custom-info>
  <custom-info info-type="fb3d:fb3-description/fb3d:fb3-classification/fb3d:bbk">32.972.11</custom-info>
  <custom-info info-type="fb3d:fb3-description/fb3d:fb3-classification/fb3d:udc">004.4</custom-info>
  <custom-info info-type="fb3d:fb3-description/fb3d:fb3-classification/fb3d:author-sign">Т48</custom-info>
</description>
<body><title><p>Виталий Ткаченко</p>
<p>Обратные вызовы в C++</p>
</title><section><title><p>Введение</p>
</title><p>Однажды со мной консультировался начинающий разработчик. Не помню точно, о чем шла речь (да это и не важно), но вопрос был в стиле «есть проблема – как ее решить?». Первой моей мыслью, которую я и озвучил, было – «сделай обратный вызов». Следующий, вполне ожидаемый, вопрос был «а как его реализовать?». Почти не думая, я ответил первое, что пришло в голову – «используй указатель на функцию». «Хорошо», сказал разработчик, «я почитаю про эти указатели». Через какое-то время он снова пришел с вопросом – «ну, что такое указатель на функцию, я понял, но как внутри функции узнать, какому классу предназначается вызов?» Так, слово за слово, вопрос за вопросом, и я вдруг начинаю осознавать, что вопросы совсем не такие уж простые, как вначале могло показаться, и что одно понятие тянет за собой другое, что есть множество альтернатив при выборе способа реализации, и что так сразу и не скажешь, какой из них лучше подходит именно для вот этого случая… Так и родилась идея книги, которую вы сейчас держите перед глазами.</p>
<p>Формат представления информации в виде книги имеет одно неоспоримое преимущество: здесь отсутствуют ограничения по объему. Появляется возможность изложить весь материал обстоятельно, подробно, в деталях, охватывая множество аспектов и нюансов. Это выгодно отличает книгу от других форматов, таких, как статьи, лекции, презентации и т. п. В них всегда приходится идти на компромиссы, выделяя главное и отбрасывая детали, которые, на первый взгляд, кажутся несущественными, но их наличие существенно облегчает освоение материала и избавляет читателя от необходимости самостоятельно искать ответы на вопросы, которые неизбежно возникают при изучении незнакомых предметов.</p>
<p>Сами по себе обратные вызовы является узкоспециализированной темой, однако при этом они охватывают ряд смежных концепций как в сфере использования языка программирования, так и в сфере архитектурно-проектных решений. В связи с этим, изучение обратных вызовов значительно повышает компетенции специалиста и обогащает его арсенал приемов и способов решения нетривиальных задач.</p>
<p>В первую очередь книга предназначена для разработчиков среднего (middle) уровня, т. е. тех, кто уже достаточно хорошо знает язык C++, но хотел бы расширить и углубить свои знания в области проектирования и дизайна. Безусловно, не лишней она будет и для начинающих, но нужно быть готовым к тому, что для изучения материала придется приложить значительные усилия: рассматриваемые концепции являются достаточно сложными и предполагают хорошее знание синтаксиса C++, а также некоторый опыт в программировании. Надеюсь, опытные разработчики также найдут книгу полезной как в плане систематизации знаний, так и в плане новых идей и методов, которые можно использовать в практике разработки.</p>
<p>Структурно книга состоит из разделов, глав и параграфов. В первом разделе излагаются теоретические основы, даются определения и термины. Во втором разделе рассматриваются способы реализации обратных вызовов в языке C++. В третьем разделе проводится сравнительный анализ реализаций, вырабатываются рекомендации для выбора в конкретных случаях. В четвертом разделе рассматривается использование шаблонов – пожалуй, наиболее интересной концепции C++, активно развивающейся в новых стандартах. И в заключение, чтобы изложенный материал не показался совсем уж абстрактным и оторванным от жизни, в пятом разделе демонстрируется практическое использование обратных вызовов на примере проектирования программного компонента.</p>
<p>В книге иллюстрируется, как используются те или иные конструкции C++, но не раскрывается их сущность – предполагается, что читатель об этом осведомлен. Поэтому для успешного понимания материала необходимо ориентироваться в следующих темах:</p>
<p>• базовый синтаксис C++;</p>
<p>• классы и наследование, перегрузка операторов;</p>
<p>• лямбда-выражения и захват переменных;</p>
<p>• контейнеры стандартной библиотеки;</p>
<p>• семантика шаблонов C++;</p>
<p>• шаблоны с переменным числом параметров, частичная специализация шаблонов.</p>
<p>Теоретические положения проиллюстрированы многочисленными примерами, оформленными в виде листингов. После каждого листинга (за исключением совсем уж тривиальных случаев) идет пояснение, которое облегчает понимание кода. Примеры создавались, ориентируясь на стандарт C++ 17; некоторые из них используют специфические особенности указанного стандарта и не будут компилироваться в более ранних версиях. Исходные тексты всех примеров можно найти в <a l:href="https://github.com/tkachenko-vitaliy/Callbacks"><strong>https://github.com/tkachenko-vitaliy/Callbacks</strong></a>, там же указан адрес электронной почты для связи с автором.</p>
<p>Во втором издании исправлены некоторые опечатки, а также переработана глава 5.5, в которой представлены улучшенные технические решения, основываясь на новых возможностях стандарта C++ 17.</p>
<p>На этом вступительную часть можно считать оконченной, приступим теперь непосредственно к изучению обратных вызовов.</p>
</section><section><title><p>1. Теоретические основы обратных вызовов</p>
</title><section><title><p>1.1. Концепция обратных вызовов</p>
</title><section><title><p>1.1.1. Интуитивное определение</p>
</title><p>Представьте следующую ситуацию. Вам нужно совершить платеж в банке. Вы идете в банк, берете талон, дожидаетесь, пока вас пригласят, и совершаете платеж. Но ведь столько времени придется потратить, в банке всегда такие очереди… Есть вариант получше: попросить свою маму (или бабушку) зайти в банк и занять очередь. Когда очередь подойдет, мама (или бабушка) позвонит, и вам остается только прийти и сделать платеж. Если же вы в этот день сильно заняты, тогда можно оставить телефон друга, и он сделает платеж вместо вас.</p>
<p>Итак, результат один и тот же, но последовательность действий различная. В первом случае вы сами идете в банк, отстаиваете очередь и совершаете платеж, т. е. выполняете все необходимые операции. Во втором случае вы сидите и ожидаете, когда вам позвонят, т. е. сделают вызов, и делаете только одно действие, а именно – совершаете платеж. Либо это делает ваш друг, если маме (или бабушке) дали его, а не ваши контакты. Можно утверждать, что ваша мама (или бабушка) инициировала, а вы выполнили обратный вызов.</p>
</section><section><title><p>1.1.2. Обратный вызов как паттерн</p>
</title><p>Перейдем теперь на язык программирования и дадим формальное определение.</p>
<cite><p><strong>Обратный вызов</strong> – это паттерн, в котором какой-либо исполняемый код как аргумент передается в другой код, при этом ожидается, что через сохраненный аргумент исполняемый код будет запущен в требуемый момент времени.</p>
</cite><p>Возвращаясь к неформальному примеру: здесь выполнение платежа можно считать исполняемым кодом, номер телефона – аргументом, телефонный звонок – запуском кода на выполнение.</p>
<p>Графически описанную концепцию можно проиллюстрировать следующим образом (Рис. 1). В программе существует код, выполняющий какие-либо операции, или исполняемый код. Когда программа запускается, исполняемый код как аргумент передается в другой код, или вызывающий код. Вызывающий код сохраняет переданный аргумент и начинает работу. В нужный момент времени, используя сохраненный аргумент, вызывающий код запускает исполняемый код, т. е. осуществляет обратный вызов.</p>
<empty-line/><image l:href="#i_001.png"/><p>Рис. 1. Концепция обратных вызовов</p>
<empty-line/></section><section><title><p>1.1.3. Прямые и обратные вызовы</p>
</title><p>Различие между прямым и обратным вызовом проиллюстрировано на Рис. 2. В первом случае поток управления запускает вызывающий код, из которого вызывается исполняемый код, и далее управление возвращается в точку вызова. Во втором случае поток управления идет мимо исполняемого кода и настраивает аргумент в вызывающем коде, а вызов исполняемого кода осуществляет уже вызывающий код, т. е. поток управления идет в обратном направлении. Таким образом, мы имеем обратный вызов.</p>
<empty-line/><image l:href="#i_002.png"/><p>Рис. 2. Прямой и обратный вызов</p>
<empty-line/></section></section><section><title><p>1.2. Задачи, решаемые с помощью обратных вызовов</p>
</title><section><p>Все многообразие задач, решаемых с помощью обратных вызовов, можно разделить на следующие группы.</p>
</section><section><title><p>1.2.1. Запрос данных</p>
</title><p>Представим, что мы разрабатываем программное обеспечение для микроконтроллера управления технологическими процессами. Контроллеру требуется периодически получать показания датчиков, таких как температура, влажность, давление и т. д. Как это реализовать?</p>
<p> Самое простое решение – код для опроса датчиков непосредственно реализовать в ПО контроллера. Но здесь возникает множество вопросов. А если в системе понадобится использовать другую модель датчика, код опроса которого должен быть другим? А если нам нужно использовать различные датчики для различных режимов? А как быть, когда мы вообще не знаем, какие датчики будут использоваться?</p>
<p>Эффективный способ решения указанных проблем – разработка драйвера, т. е. модуля, поддерживающего единый интерфейс вызовов для различных реализаций. Однако одно дело подать идею, а вот реализовать – тут все гораздо сложнее: интерфейс должен быть универсальным и покрывать все возможные требования; необходимо разработать механизм для загрузки нужной реализации интерфейса; требуется каким-то образом связывать интерфейс и реализацию – в итоге нам понадобится сервис поддержки драйверов. Для операционной системы это вполне оправдано, однако для микроконтроллера с его очень ограниченными ресурсами внедрение такого сервиса чревато потерей производительности как из-за большого объема кода, так и из-за дополнительного расхода памяти.</p>
<p>Можно предложить не такое универсальное, зато более простое и менее ресурсоемкое решение с помощью обратных вызовов(Рис. 3). Код опроса упаковывается в отдельный компонент. Перед началом работы происходит настройка, т. е. указанный код как аргумент сохраняется в рабочем коде контроллера. В нужный момент рабочий код делает обратный вызов, выполняет соответствующую функцию и получает требуемое значение. Если необходимо, в процессе работы можно изменять хранимый аргумент, изменяя, таким образом, код опроса датчиков.</p>
<empty-line/><empty-line/><image l:href="#i_003.png"/><p>Рис. 3. Опрос датчиков с помощью обратного вызова</p>
<empty-line/></section><section><title><p>1.2.2. Вычисления по запросу</p>
</title><p>Представим, что мы разрабатываем супербыстрый алгоритм сортировки, оптимизированный для работы на нашем многопроцессорном суперкомпьютере. Было потрачено массу усилий, реализовано много кода, и, наконец, алгоритм почти готов. Но вот незадача: мы не знаем заранее, что именно нам нужно сортировать. Сортировка чисел – это самый простой случай, а что делать, если понадобится сортировать, допустим, структуры, содержащие записи из базы данных? Пусть в структуре содержатся сведения о сотрудниках – фамилия, имя, отчество. Как реализовать сортировки по отдельным полям, по совокупности полей? Неужели придется дублировать код для каждого случая?</p>
<p>Простое и эффективное решение указанной проблемы представлено на Рис. 4. Код для сравнения полей упаковывается в отдельный компонент. Когда запускается алгоритм, этот компонент передается как аргумент. В требуемый момент времени алгоритм через указанный аргумент вызовет код сравнения, передавая элементы данных как параметры. Таким образом, можно реализовать различные правила сравнения и передавать их алгоритму без изменения рабочего кода.</p>
<empty-line/><image l:href="#i_004.png"/><p>Рис. 4. Результат вычисления с помощью обратного вызова</p>
<empty-line/></section><section><title><p>1.2.3. Перебор элементов</p>
</title><p>Представим, что мы разрабатываем модуль сетевого обмена. Как пользователю узнать, какие протоколы поддерживаются?</p>
<p>Самое простое решение – получить количество поддерживаемых протоколов, а затем запрашивать их имена по порядковому номеру. Данный способ легко реализуем, если внутри модуля имена протоколов хранятся в массиве. А если имена нужно хранить в списке? Тогда задача усложняется: нужно сделать перебор элементов списка, чтобы получить нужное значение по порядковому номеру. А если имена должны храниться в виде двоичного дерева?</p>
<p>Возможное решение: разработать итератор – специальный класс, который будет осуществлять навигацию по контейнеру. Такой подход реализован, к примеру, в стандартной библиотеке STL, где для каждого контейнера имеется соответствующий итератор. Недостаток этого решения проявляется в том, что мы ограничиваем сферу применения модуля, построенного таким образом: его использовать могут только те компоненты, которые способны интерпретировать вызовы методов C++. Кроме того, итератор привязан к типу используемого контейнера, и при его изменении приходится перекомпилировать все связанные компоненты.</p>
<p>А что, если реализовать итератор с помощью набора функций, без использования классов? Интерфейс получается довольно сложным: необходимы отдельные функции для создания итератора, запроса значений, уничтожения итератора; необходимо объявить тип данных для хранения итератора; необходимо предусмотреть уничтожение итератора в случае возникновения исключений.</p>
<p>Простое и эффективное решение указанных проблем представлено на Рис. 5. Код, обрабатывающий имена поддерживаемых протоколов (например, отображение в пользовательском интерфейсе), упаковывается в отдельный компонент. Для получения протоколов вызывается функция, в которую указанный компонент передается как аргумент. Функция перебирает хранимые значения, для каждого значения через сохраненный аргумент вызывается код обработки, имя протокола передается как параметр.</p>
<empty-line/><image l:href="#i_005.png"/><p>Рис. 5. Просмотр элементов с помощью обратных вызовов</p>
<empty-line/></section><section><title><p>1.2.4. Уведомление о событиях</p>
</title><p>Представим, что мы в системе запустили таймер, и нам нужно получить уведомление о срабатывании таймера. Самое простое решение – в процессе выполнения опрашивать таймер и анализировать, не истекло ли время. Как часто нужно делать опрос? Слишком часто – теряется производительность, слишком редко – теряется точность. Кроме того, приходится постоянно в определенных участках кода вставлять вызов опроса. Учитывая, что в программе могут работать несколько потоков, опрашивать таймер они будут с разной частотой, и каждый поток обнаружит срабатывание таймера в разное время.</p>
<p>Простое и эффективное решение указанных проблем представлено на Рис. 6. Код, обрабатывающий срабатывание таймера, упаковывается в отдельный компонент. Когда запускается таймер, этот компонент как аргумент передается таймеру, и когда таймер сработает, через сохраненный аргумент будет вызван код обработки. По такому же принципу можно организовать асинхронный ввод-вывод, обработку прерываний и т. п.</p>
<empty-line/><image l:href="#i_006.png"/><p>Рис. 6. Уведомление о срабатывании таймера с помощью обратного вызова</p>
<empty-line/><p>Итак, мы рассмотрели типовые задачи, в которых используются обратные вызовы. Как видим, подставляя соответствующие аргументы, можно запускать на выполнение различные участки программного кода. Отсюда можно сделать вывод, что обратные вызовы целесообразно использовать в случаях, когда требуется <strong>динамическая модификация поведения программы во время выполнения.</strong></p>
</section></section><section><title><p>1.3. Модель обратных вызовов</p>
</title><section><title><p>1.3.1. Определения и термины</p>
</title><p>Модель обратных вызовов изображена на Рис. 7. Структурно она состоит из двух частей: исполнитель и инициатор.</p>
<p>Исполнитель – это компонент, в который упаковывается код обратного вызова (исполняемый код). Исполнитель также содержит контекст, который представляет собой совокупность данных, влияющих на поведение исполняемого кода.</p>
<p>Инициатор – это компонент, который осуществляет обратный вызов. Перед началом работы выполняется настройка, при которой исполнитель как аргумент вместе с контекстом сохраняются в инициаторе. Затем инициатор запускается, и в нужный момент, используя хранимый аргумент, он делает вызов исполняемого кода. В качестве входных параметров в этот код передается сохраненный контекст и информация вызова, которая представляет собой значения, формируемые инициатором.</p>
<empty-line/><image l:href="#i_007.png"/><p>Рис. 7. Модель обратных вызовов</p>
<empty-line/><p>Дадим формальные определения используемых терминов.</p>
<empty-line/><p><strong>Исполнитель</strong>: компонент, который реализует исполняемый код обратного вызова.</p>
<p><strong>Инициатор</strong>: компонент, который осуществляет обратный вызов.</p>
<p><strong>Аргумент</strong>: хранимая точка входа в код обратного вызова.</p>
<p><strong>Настройка</strong>: процедура сохранения аргумента.</p>
<p><strong>Информация вызова</strong>: значения, которые формируются инициатором и передаются в исполнитель.</p>
<p><strong>Контекст</strong>: множество переменных и состояний, которые влияют на поведение исполняемого кода.</p>
<empty-line/><p>В процессе реализации обратного вызова нам нужно ответить на следующие вопросы.</p>
<p>1. Как оформить исполняемый код, чтобы он мог быть вызван инициатором?</p>
<p>2. Как хранить аргумент?</p>
<p>3. Как передавать контекст?</p>
<empty-line/><p>Различные способы реализации дают свои ответы на поставленные вопросы.  Но прежде, чем приступить к их изучению, необходимо осветить еще несколько моментов.</p>
</section><section><title><p>1.3.2. Контекст</p>
</title><p>Вне зависимости от того, каким способом реализован исполнитель, исполняемый код всегда находится внутри тела некоторой функции. Если результат выполнения функции зависит только от входных параметров, то контекст оказывается ненужным. В качестве примера можно привести случай, когда обратный вызов возвращает результат сравнения переданных аргументов.</p>
<p>Однако такая ситуация встречается далеко не всегда, в большинстве случаев требуется знать значения переменных, внешних по отношению к функции исполнителя. Другими словами, необходимо получить контекст вызова.</p>
<p>Важность контекста можно проиллюстрировать на следующем примере. Пусть мы реализуем подсистему сетевого обмена, которая осуществляет передачу данных по каналам связи. Для управления каналом создается отдельный класс, задачей которого является формирование и отправка пакетов через вызовы соответствующих функций операционной системы. Операционная система, в свою очередь, подтверждает о доставке пакета через обратный вызов (Рис. 8). Как нам узнать в коде обработчика вызова, для какого класса предназначено подтверждение? Здесь-то и необходим контекст вызова, в качестве которого выступает указатель на класс, управляющий нужным каналом. Этот указатель не хранится внутри кода обработчика, он должен каким-то образом ему передаваться. Другими словами, обработчик вызова должен получить контекст. Различные реализации обратных вызовов предлагают свои собственные способы передачи и интерпретации контекста, которые будут подробно рассматриваться в соответствующих главах.</p>
<empty-line/><image l:href="#i_008.png"/><p>Рис. 8. Сетевой обмен и контекст вызова</p>
<empty-line/></section></section><section><title><p>1.4. Архитектурный дизайн вызовов</p>
</title><section><title><p>1.4.1. Синхронные и асинхронные вызовы</p>
</title><p>C точки зрения архитектурного дизайна обратные вызовы можно разделить на синхронные и асинхронные. Если при вызове какой-либо функции инициатора обратный вызов происходит внутри тела этой функции, которая затем возвращает управление, то вызов является синхронным (другое название – блокирующий). Если обратный вызов может произойти в любое время, то этот вызов является асинхронным (другое название – отложенный).</p>
<cite><p><strong>Синхронный вызов</strong> – архитектурный дизайн, в котором при вызове функции инициатора обратный вызов происходит до выхода из тела этой функции.</p>
<p><strong>Асинхронный вызов</strong> – архитектурный дизайн, в котором обратный вызов может быть выполнен в любое время.</p>
</cite><p>Различие между синхронными и асинхронными вызовами проиллюстрировано на Рис. 9. В первом случае поток управления входит в функцию <emphasis>Run</emphasis>, из которой вызывается функция обратного вызова, и затем управление возвращается в точку вызова. Во втором случае функция <emphasis>Run </emphasis>вначале производит сохранение аргумента, а затем выполняет некоторое действия (<emphasis>Action</emphasis>), внутри которого делает обратный вызов. В качестве действия может выступать циклический опрос, обработка очереди сообщений, создание отдельного потока и т. п.</p>
<empty-line/><image l:href="#i_009.png"/><p>Рис. 9. Синхронные и асинхронные вызовы: а) синхронный; б) асинхронный</p>
<empty-line/><p>Особенностью реализации синхронных вызовов является то, что здесь не нужно хранить аргумент: он передается как параметр в функцию инициатора и используется только внутри этой функции. В случае асинхронных вызовов необходима предварительная настройка аргумента, который должен быть сохранен в какой-либо нелокальной переменной.</p>
</section><section><title><p>1.4.2. Использование вызовов в API</p>
</title><p>API (Application Programming interface, интерфейс прикладных программ) – это программный код, реализующий некоторую функциональность, а также объявления, через которые некоторая программа может вызывать этот код. Указанные объявления реализуют интерфейс API.</p>
<cite><p><strong>Интерфейс API</strong> – набор объявлений для вызова кода API.</p>
</cite><p>При проектировании API должны соблюдаться следующие требования.</p>
<empty-line/><p>1. <emphasis>Интерфейс должен следовать определённым соглашениям</emphasis>. Следуя указанным соглашениям, стороннее приложение может осуществлять вызовы кода API.</p>
<p>2. <emphasis>Интерфейс должен быть изолирован от реализации. </emphasis>Должна существовать возможность изменения кода реализации без изменения интерфейса.</p>
<p>3. <emphasis>Код должен быть подготовлен к выполнению</emphasis>. Для C++ это означает, что код должен быть предварительно откомпилирован.</p>
<empty-line/><p>С точки зрения C++ интерфейсы API могут быть разделены на два больших класса.</p>
<p><strong>Системный API</strong>: интерфейс объявляется в виде набора функций, поддерживающих стандартный протокол вызова. Любая программа, независимо от того, на каком языке она написана, может обратиться к указанному API путем вызова функций интерфейса. Как правило, системные API реализуются в виде динамически разделяемых библиотек. В качестве примера можно назвать всем известный Windows API, реализация которого находится в системной библиотеке User32.dll. Любое приложение может загрузить эту библиотеку и вызывать требуемые функции для выполнения системных вызовов.</p>
<p><strong>C++ API</strong>: интерфейс объявляется в виде набора классов C++. Как и системные, С++ API чаще всего реализуются в виде динамических библиотек, но могут поставляться также в виде статических. Использовать такие API могут только те программные компоненты, которые могут интерпретировать вызовы C++. Так, например, среда выполнения для языка Python может вызывать методы классов C++, а вот у Visual Basic такая возможность отсутствует.</p>
<p>Интерфейсы системных API должны объявляться в стиле языка C, т. е. в них должны использоваться функции с фиксированным числом параметров и простые структуры данных, такие, как числа, символы, указатели и структуры. Это связано с тем, что такие объявления следуют стандартным соглашениям операционной системы, в силу чего любая программа, независимо от используемого языка программирования (даже написанная на ассемблере), может использовать указанный API. Однако из-за требования описания интерфейсов в стиле C на реализацию обратных вызовов накладываются ограничения, которые будут рассматриваться в соответствующих главах.</p>
</section></section><section><title><p>1.5. Итоги</p>
</title><p>Обратный вызов – это паттерн, в котором какой-либо исполняемый код как аргумент передается в другой код, при этом ожидается, что через сохраненный аргумент исполняемый код будет запущен в нужный момент времени. Основные классы задач, решаемые с помощью обратных вызовов, следующие: запрос данных; вычисления по запросу; перебор элементов; уведомления о событиях.</p>
<p>Модель обратных вызовов включает в себя следующие понятия: исполнитель, инициатор, аргумент, настройка, контекст.</p>
<p>В синхронных вызовах при вызове функции инициатора обратный вызов осуществляется до выхода из тела функции. В асинхронных вызовах вызов может быть выполнен в любое время.</p>
<p>Обратные вызовы часто используются в системных и C++ API. При использовании в системных API на реализацию обратных вызовов накладываются ограничения.</p>
<p>Рассмотрев общую концепцию, приступим к обзору способов реализации обратных вызовов.</p>
</section></section><section><title><p>2. Реализация обратных вызовов</p>
</title><section><title><p>2.1. Указатель на функцию</p>
</title><section><title><p>2.1.1. Концепция</p>
</title><p>Графическое изображение реализации обратного вызова с помощью указателя на функцию представлено на Рис. 10. Исполнитель реализован в виде глобальной функции, в качестве контекста могут выступать любые данные. При настройке указатель на функцию как аргумент и указатель на данные как контекст сохраняются в инициаторе. Инициатор осуществляет обратный вызов посредством вызова функции через сохраненный указатель, передавая ей требуемые значения и контекст – указатель на данные. Поскольку инициатор не интерпретирует контекст и не выполняет с ним никаких операций, для хранения контекста используется нетипизированный указатель.</p>
<empty-line/><image l:href="#i_010.png"/><p><emphasis>Рис. 10. Обратный вызов с указателем на функцию</emphasis></p>
<empty-line/></section><section><title><p>2.1.2. Инициатор</p>
</title><p>Реализация инициатора представлена в Листинг 1<a l:href="#n1" type="note">2</a>.</p>
<subtitle><emphasis>Листинг 1.Иинициатор с указателем на функцию</emphasis></subtitle><p><code>typedef void(*ptr_callback) (int eventID, void* pContextData);  // (1)</code></p>
<empty-line/><p><code>ptr_callback ptrCallback = NULL;  // (2)</code></p>
<p><code>void* contextData = NULL;         // (3)</code></p>
<empty-line/><p><code>void setup(ptr_callback pPtrCallback, void* pContextData)  // (4)</code></p>
<p><code>{</code></p>
<p><code>   ptrCallback = pPtrCallback;</code></p>
<p><code>   contextData = pContextData;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void run()                            // (5)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  //Some actions</code></p>
<p><code>  ptrCallback(eventID, contextData);  // (6)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен тип – указатель на функцию, в строке 2 объявлена переменная этого типа, в строке 3 объявлен указатель на данные контекста. В строке 4 объявлена функция для настройки указателей, в которой инициализируются соответствующие переменные. В строке 5 объявлена функция запуска, внутри этой функции инициатор в строке 6 производит вызов функции по сохраненному указателю. Сигнатура функции, объявленная в строке 1, в качестве первого параметра принимает значение, которое передается инициатором, т. е. информацию вызова, а второй параметр – это контекст. Указанная сигнатура здесь только для примера; конечно же, в зависимости от поставленных задач количество параметров и их порядок может быть произвольным. Мы также опустили моменты, связанные с созданием потока, ожиданием окончания работы сервера и т. п. – для понимания принципов организации вызова это несущественно.</p>
<empty-line/><p>Итак, мы реализовали инициатор в процедурно-ориентированном дизайне. Приведенная реализация имеет серьезный недостаток: указатель на функцию и указатель на контекст хранятся в глобальных переменных. Это создает множество проблем: изменения настроек указателей в разных частях программы не изолированы, т. е. влияют друг на друга; инициатор может работать только с одним-единственным исполнителем; невозможна одновременная работа нескольких потоков. Выходом из сложившейся ситуации будет реализация инициатора в объектно-ориентированном дизайне<a l:href="#n2" type="note">3</a> (Листинг 2).</p>
<subtitle><emphasis>Листинг 2. Инициатор с указателем на функцию в объектно-ориентированном дизайне</emphasis></subtitle><p><code>class Initiator  //(1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  using ptr_callback  =  void(*) (int, void*);                  //(2)</code></p>
<empty-line/><p><code>  void setup(ptr_callback pPtrCallback, void* pContextData)    // (3)</code></p>
<p><code>  {</code></p>
<p><code>      ptrCallback = pPtrCallback; contextData = pContextData;  // (4)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()                               // (5)</code></p>
<p><code>  {</code></p>
<p><code>      int eventID = 0;</code></p>
<p><code>      //Some actions</code></p>
<p><code>      ptrCallback (eventID, contextData);  // (6)</code></p>
<p><code>}</code></p>
<p><code>private:</code></p>
<p><code>  ptr_callback ptrCallback = nullptr;      // (7)</code></p>
<p><code>  void* contextData = nullptr;             // (8)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 мы объявляем класс – инициатор, в строке 2 мы объявляем тип указателя на функцию. В строке 3 объявляем функцию настройки указателей, соответствующие переменные – (указатель на функцию и указатель на контекст) объявлены соответственно в строках 7 и 8. В строке 5 объявлена функция запуска, внутри этой функции в строке 6 производится вызов функции по соответствующему указателю. Как видим, объектная реализация практически полностью повторяет процедурную, только все объявления сделаны внутри класса. Другими словами, мы провели инкапсуляцию данных и процедур внутри некоторой сущности, в качестве которой выступает класс.</p>
<empty-line/><p>Конечно, поскольку мы программируем на C++, мы должны следовать объектно-ориентированному дизайну, и любые реализации делать в его рамках. Для чего тогда мы привели реализацию инициатора в процедурном дизайне, в стиле языка C? Дело в том, что процедурный дизайн является единственно возможным для проектирования системных API, поскольку в объявлениях интерфейсов таких API допускается использование только глобальных функций и простых структур данных (см. п. 1.4.2).</p>
</section><section><title><p>2.1.3. Исполнитель</p>
</title><p>Реализация исполнителя для случая, когда инициатор разработан в процедурном дизайне, представлена в Листинг 3.</p>
<subtitle><emphasis>Листинг 3. Исполнитель для инициатора в процедурном дизайне</emphasis></subtitle><p><code>struct СontextData  // (1)</code></p>
<p><code>{</code></p>
<p><code>    //some context data</code></p>
<p><code>};</code></p>
<empty-line/><p><code>void callbackHandler(int eventID, void* somePointer)      // (2)</code></p>
<p><code>{</code></p>
<p><code>  //It will be called by initiator</code></p>
<p><code>  СontextData* pContextData = (СontextData*)somePointer;  // (3)</code></p>
<p><code>  //Do something here</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()                                 // (4)</code></p>
<p><code>{</code></p>
<p><code>  СontextData clientContext;               // (5)</code></p>
<p><code>  setup(callbackHandler, &amp;clientContext);  // (6)</code></p>
<p><code>  run();                                   // (7)</code></p>
<p><code>  //Wait finish</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявляется тип данных для контекста. Структура здесь показана для примера, в качестве контекста могут выступать любые типы: числа, указатели, смеси и т. п. В строке 2 объявляется функция – обработчик обратного вызова, ее сигнатура должна совпадать с сигнатурой, с которой работает инициатор. Указанная функция будет вызвана инициатором, в нее будут переданы два параметра: первый передается инициатором (информация вызова, в нашем случае это <strong>eventID</strong>), а второй – это контекст. Клиент должен интерпретировать контекст; нет другого способа это сделать, кроме как приведением типов (строка 3).</p>
<p>Далее, в строке 4 объявлена основная функция, в которой осуществляются все необходимые операции. В строке 5 объявляются данные контекста; в строке 6 производится настройка обратного вызова, в функцию настройки передаются указатель на функцию-обработчик и указатель на контекст; в строке 7 инициатор запускается.</p>
<p>Реализация исполнителя для случая, когда инициатор реализован в объектно-ориентированном дизайне, представлена в Листинг 4. Как видим, она очень похожа на предыдущую реализацию с той разницей, что мы объявляем экземпляр класса-инициатора (строка 5), и все вызовы осуществляем через вызов соответствующих методов класса.</p>
<subtitle><emphasis>Листинг 4. Исполнитель для инициатора в объектно-ориентированном дизайне</emphasis></subtitle><p><code>struct СontextData // (1)</code></p>
<p><code>{</code></p>
<p><code>  //some context data</code></p>
<p><code>};</code></p>
<empty-line/><p><code>void callbackHandler(int eventID, void* somePointer) // (2)</code></p>
<p><code>{</code></p>
<p><code>  //It will be called by initiator</code></p>
<p><code>  СontextData* pContextData = static_cast&lt;СontextData*&gt;(somePointer); // (3) cast to context</code></p>
<p><code>  //Do something here</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main() // (4)</code></p>
<p><code>{</code></p>
<p><code>  Initiator  initiator;                             // (5)</code></p>
<p><code>  СontextData clientContext;                        // (6)</code></p>
<p><code>  initiator.setup(callbackHandler, &amp;clientContext); // (7) callback setup</code></p>
<p><code>  initiator.run();                                  // (8) initiator has been run</code></p>
<p><code>  //Wait finish</code></p>
<p><code>}</code></p>
</section><section><title><p>2.1.4. Синхронный вызов</p>
</title><p>Реализация инициатора для синхронного вызова приведена в Листинг 5. Как видим, для синхронных вызовов код значительно упрощается: нет необходимости хранить переменные, информация вызова и контекст передаются непосредственно в функцию.</p>
<subtitle><emphasis>Листинг 5. Инициатор для синхронного обратного вызова с указателем на функцию</emphasis></subtitle><p><code>using ptr_callback  =  void(*) (int, void*);</code></p>
<empty-line/><p><code>void run(ptr_callback ptrCallback, void* contextData = nullptr)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  //Some actions</code></p>
<p><code>  ptrCallback (eventID, contextData);</code></p>
<p><code>}</code></p>
</section><section><title><p>2.1.5. Преимущества и недостатки</p>
</title><p>Достоинства и недостатки реализации обратных вызовов с помощью указателя на функцию представлены в Табл. 1.</p>
<empty-line/><p>Табл. 1. Преимущества и недостатки обратных вызовов с указателем на функцию</p>
<image l:href="#i_011.png"/><empty-line/><p><emphasis>Простая реализация.</emphasis> Как мы видели, инициатор реализуется достаточно просто: две переменных, синтаксис вызова функции через указатель очень похож на вызов обычной функции.</p>
<p><emphasis>Независимость инициатора и исполнителя</emphasis>. Любое изменение кода исполнителя никак не влияет на код инициатора, который при этом остается неизменным</p>
<p><emphasis>Совместим с кодом на языке C</emphasis>. В некоторых случаях приходится разрабатывать смешанный код, т. е. часть кода пишется C, а часть – на С++. Если код исполнителя написан на C++, и этот код должен быть вызван инициатором, написанным на C, то использование указателей на функцию является единственно доступным механизмом. <a l:href="#n3" type="note">4</a></p>
<p><emphasis>Подходит для реализации любых API</emphasis>. Можно реализовать как С++, так и системные API. Для C++ API инициатор разрабатывается в виде набора классов, для системных API – в виде набора функций.</p>
<p><emphasis>Инициатор хранит контекст исполнителя</emphasis>. Как мы видели, инициатор вынужден сохранять контекст исполнителя. Это усложняет реализацию и способствует увеличению расхода памяти.</p>
<p><emphasis>Небезопасный способ трансляции контекста</emphasis>. Контекст передается клиенту в виде нетипизированного указателя, интерпретация указателя возлагается на клиента. В большой программной системе это чревато ошибками, поскольку нет никакой возможности проверить корректность полученного указателя.</p>
</section></section><section><title><p>2.2. Указатель на статический метод класса</p>
</title><section><title><p>2.2.1. Концепция</p>
</title><p>Графическое изображение обратного вызова с помощью указателя на статический метод класса представлено на Рис. 11. Исполнитель реализуется в виде класса, код упаковывается в статический метод класса, в качестве контекста выступает указатель на экземпляр класса. При настройке указатель на статический метод как аргумент и указатель на класс как контекст сохраняются в инициаторе. Инициатор осуществляет обратный вызов посредством вызова метода, передавая ему требуемую информацию и контекст – указатель на класс.</p>
<empty-line/><image l:href="#i_012.png"/><p>Рис. 11. Обратный вызов с указателем на статический метод класса</p>
<empty-line/></section><section><title><p>2.2.2. Инициатор</p>
</title><p>По своей сути статический метод класса – это обычная функция, ограниченная областью видимости класса. Поэтому реализация инициатора, представленная в Листинг 6, практически полностью повторяет реализацию для указателей на функцию, только в качестве контекста выступает указатель на экземпляр класса.</p>
<subtitle><emphasis>Листинг 6. Инициатор с указателем на статический метод класса</emphasis></subtitle><p><code>class Executor;  //(1)</code></p>
<empty-line/><p><code>class Initiator  // (2)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  using ptr_callback_static = void(*) (int, Executor*);                 // (3)</code></p>
<empty-line/><p><code>  void setup(ptr_callback_static pPtrCallback, Executor* pContextData)  // (4)</code></p>
<p><code>  {</code></p>
<p><code>    ptrCallback = pPtrCallback; contextData = pContextData;             // (5)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()                           //  (6)</code></p>
<p><code>  {</code></p>
<p><code>    int eventID = 0;</code></p>
<p><code>    //Some actions</code></p>
<p><code>    ptrCallback(eventID, contextData);  // (7)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  ptr_callback_static ptrCallback = nullptr;  // (8)</code></p>
<p><code>  Executor* contextData = nullptr;            // (9)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 делается предварительное объявление типа класса исполнителя. В строке 2 объявляется класс – инициатор, в строке 3 объявляется тип указателя на функцию с контекстом – экземпляром класса. В строке 4 объявлена функция для настройки указателей, соответствующие переменные (указатель на статический метод и указатель на контекст – экземпляр класса) объявлены в строках 8 и 9. В строке 6 объявлена функция запуска, внутри этой функции в строке 7 производится вызов функции по соответствующему указателю c передачей информации вызова и контекста.</p>
</section><section><title><p>2.2.3. Исполнитель</p>
</title><p>Реализация исполнителя приведена в Листинг 7.</p>
<subtitle><emphasis>Листинг 7. Исполнитель с указателем на статический метод класса</emphasis></subtitle><p><code>class Executor                    // (1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  Executor(Initiator* initiator)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>    initiator-&gt;setup(callbackHandler, this);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  static void callbackHandler(int eventID, Executor* executor)  // (3)</code></p>
<p><code>  {</code></p>
<p><code>    //It will be called by initiator</code></p>
<p><code>    executor-&gt;onCallbackHandler(eventID);                       // (4)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  void onCallbackHandler(int eventID)  // (5)</code></p>
<p><code>  {</code></p>
<p><code>    //Do what is necessary</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main() // (6)</code></p>
<p><code>{</code></p>
<p><code>  Initiator initiator;            // (7)</code></p>
<p><code>  Executor executor(&amp;initiator);  // (8)</code></p>
<p><code>  initiator.run();                // (9)</code></p>
<p><code>  //Wait finish</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявляется класс – исполнитель. В строке 2 объявляется конструктор с входным параметром – указателем на инициатор, здесь происходит настройка обратного вызова.<a l:href="#n4" type="note">5</a></p>
<p>В строке 3 объявлен статический метод как обработчик обратного вызова. Входными параметрами здесь являются информация вызова (в нашем случае это <strong>eventID</strong>) и указатель на контекст, в качестве которого выступает указатель на экземпляр класса. Внутри метода можно обращаться к содержимому класса, используя полученный указатель как квалификатор. Таким образом, прямо здесь можно реализовать код обработчика, а можно вызвать обычный (нестатический) метод класса (строка 4).</p>
<p>Далее, в строке 6 объявлена основная функция, в которой осуществляются все необходимые операции. В строке 7 объявлен класс-инициатор; в строке 8 объявлен класс- исполнитель, в конструктор передается указатель на инициатор; в строке 9 происходит запуск инициатора.</p>
<p>Особенностью реализации исполнителя с помощью указателя на статический метод является возможность работы с инициатором, предназначенным для указателей на функцию. В этом случае метод класса в качестве контекста должен принимать нетипизированный указатель с последующим приведением типов. Пример использования показан в Листинг 8, инициатор здесь используется из Листинг 1 п. 2.1.2.</p>
<subtitle><emphasis>Листинг 8. Исполнитель с указателем на статический метод класса для инициатора с нетипизированным контекстом</emphasis></subtitle><p><code>class Executor  // (1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  Executor()    // (2)</code></p>
<p><code>  {</code></p>
<p><code>    setup(callbackHandler, this);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  static void callbackHandler(int eventID, void* somePointer)  // (3)</code></p>
<p><code>  {</code></p>
<p><code>    //It will be called by initiator</code></p>
<p><code>    Executor* executor = static_cast&lt;Executor*&gt;(somePointer);  // (4)</code></p>
<p><code>    executor-&gt;onCallbackHandler(eventID);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  void onCallbackHandler(int eventID)  // (5)</code></p>
<p><code>  {</code></p>
<p><code>    //Do what is necessary</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()            // (6)</code></p>
<p><code>{</code></p>
<p><code>  Executor executor;  // (7)</code></p>
<p><code>  run();              // (8)</code></p>
<p><code>  //Wait finish</code></p>
<p><code>}</code></p>
<empty-line/><p>Настройка обратного вызова осуществляется в конструкторе (строка 2). В обработчике обратного вызова (строка 3) мы делаем приведение типов (строка 4), чтобы получить указатель на экземпляр класса. В главной функции (строка 6) происходит запуск инициатора.</p>
</section><section><title><p>2.2.4. Синхронный вызов</p>
</title><p>Реализация инициатора для синхронного вызова приведена в Листинг 9. Как видим, она практически полностью повторяет реализацию, рассмотренную в предыдущей главе, только в качестве указателя на контекст используется указатель на экземпляр класса.</p>
<subtitle><emphasis>Листинг 9. Инициатор для синхронного обратного вызова с указателем на статический метод класса</emphasis></subtitle><p><code>class Executor;</code></p>
<p><code>using ptr_callback_static = void(*) (int, Executor*);</code></p>
<empty-line/><p><code>void run(ptr_callback_static ptrCallback, Executor * contextData = nullptr)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  //Some actions</code></p>
<p><code>  ptrCallback (eventID, contextData);</code></p>
<p><code>}</code></p>
</section><section><title><p>2.2.5. Преимущества и недостатки</p>
</title><p>Преимущества и недостатки реализации обратных вызовов с помощью указателя на статический метод класса приведены в Табл. 2.</p>
<empty-line/><p>Табл. 2. Преимущества и недостатки обратных вызовов с указателем на статический метод класса</p>
<image l:href="#i_013.png"/><empty-line/><p><emphasis>Простая реализация.</emphasis> Не сложнее, чем для указателей на функцию.</p>
<p><emphasis>Совместим с инициатором в процедурном дизайне.</emphasis> Можно использовать для работы с системными API.</p>
<p><emphasis>Инициатор хранит контекст исполнителя.</emphasis> Так же, как и в случае указателей на функцию, усложняет реализацию и способствует увеличению расхода памяти.</p>
</section></section><section><title><p>2.3. Указатель на метод-член класса</p>
</title><section><title><p>2.3.1. Концепция</p>
</title><p>В предыдущей главе мы рассматривали использование указателя на статический метод класса, в который в качестве контекста передавали указатель на экземпляр класса. А почему бы нам напрямую не вызвать метод-член класса, минуя прослойку в виде статического метода, из которого вызывается метод-член класса? Для этого нам понадобятся указатель на класс и указатель на метод.</p>
<p>Графическое изображение обратного вызова с помощью указателя на метод-член класса (далее – метод класса) представлено на Рис. 12. Исполнитель реализуется в виде класса, код упаковывается в метод класса, в качестве контекста выступает экземпляр класса. При настройке указатель на метод и указатель на класс как как аргументы сохраняются в инициаторе. Инициатор осуществляет обратный вызов посредством вызова метода, передавая ему требуемую информацию. Контекст здесь передавать не нужно, поскольку внутри метода доступно все содержимое класса.</p>
<empty-line/><image l:href="#i_014.png"/><p>Рис. 12. Реализация обратного вызова с помощью указателя на метод-член класса</p>
<empty-line/></section><section><title><p>2.3.2. Инициатор</p>
</title><p>Реализация инициатора приведена в Листинг 10.</p>
<subtitle><emphasis>Листинг 10. Инициатор с указателем на метод-член класса</emphasis></subtitle><p><code>class Executor;  // (1)</code></p>
<empty-line/><p><code>class Initiator  // (2)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  using ptr_callback_method = void(Executor::*)(int);  // (3)</code></p>
<empty-line/><p><code>  void setup(Executor* argCallbackClass, ptr_callback_method argCallbackMethod)  // (4)</code></p>
<p><code>  {</code></p>
<p><code>    ptrCallbackClass = argCallbackClass; ptrCallbackMethod = argCallbackMethod;  // (5)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()  // (6)</code></p>
<p><code>  {</code></p>
<p><code>    int eventID = 0;</code></p>
<p><code>    //Some actions</code></p>
<p><code>    (ptrCallbackClass-&gt;*ptrCallbackMethod)(eventID);  // (7)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  Executor* ptrCallbackClass = nullptr;             // (8)</code></p>
<p><code>  ptr_callback_method ptrCallbackMethod = nullptr;  // (9)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 делается предварительное объявление типа класса исполнителя. В строке 2 объявляется класс-инициатор, в строке 3 объявляется тип указателя для класса-исполнителя. В строке 4 объявляется функция для настройки указателей, соответствующие переменные (указатель на метод класса и указатель на экземпляр класса) объявлены в строках 8 и 9. В строке 6 объявлена функция запуска, внутри этой функции в строке 7 через соответствующий указатель производится вызов метода класса.</p>
</section><section><title><p>2.3.3. Исполнитель</p>
</title><p>Реализация исполнителя приведена в Листинг 11.</p>
<subtitle><emphasis>Листинг 11. Исполнитель с указателем на метод-член класса</emphasis></subtitle><p><code>class Executor                       // (1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void callbackHandler(int eventID)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>    //It will be called by initiator</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()                                                 // (3)</code></p>
<p><code>{</code></p>
<p><code>  Initiator initiator;                                     // (4)</code></p>
<p><code>  Executor executor;                                       // (5)</code></p>
<p><code>  initiator.setup(&amp;executor, &amp;Executor::callbackHandler);  // (6)</code></p>
<p><code>  initiator.run();                                         // (7)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявляется класс-исполнитель. В строке 2 объявлен метод класса, который будет выполнять функцию обработчика обратного вызова. В указанный метод передается информация вызова (в нашем случае это <strong>eventID</strong>). В строке 3 объявлена основная функция, в которой осуществляются все необходимые операции. В строке 4 объявлен класс-инициатор, в строке 5 объявлен класс-исполнитель. В строке 6 осуществляется настройка обратного вызова, в строке 7 производится запуск инициатора.</p>
</section><section><title><p>2.3.4. Управление контекстом</p>
</title><p>Рассматриваемая реализация позволяет осуществлять управление контекстом тремя способами: настройка экземпляра класса-исполнителя, настройка указателя на метод, переопределение виртуальных функций. Это приводит к интересным эффектам.</p>
<p>Пусть у нас будут объявления классов-исполнителей с наследованием, как показано в Листинг 12. Графически иерархия наследования изображена на Рис. 13.</p>
<subtitle><emphasis>Листинг 12. Классы-исполнители с наследованием</emphasis></subtitle><p><code>class Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  virtual void callbackHandler1(int eventID);</code></p>
<p><code>  virtual void callbackHandler2(int eventID);</code></p>
<p><code>};</code></p>
<empty-line/><p><code>class Executor1: public Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void callbackHandler1(int eventID) override;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>class Executor2: public Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void callbackHandler2(int eventID) override;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>class Executor3: public Executor1, public Executor2</code></p>
<p><code>{</code></p>
<p><code>};</code></p>
<empty-line/><image l:href="#i_015.png"/><p><emphasis>Рис. 13. Иерархия наследования классов-исполнителей</emphasis></p>
<empty-line/><p>Итак, будем назначать различные указатели на экземпляры классов и методы-члены, как показано в Листинг 13.</p>
<subtitle><emphasis>Листинг 13. Настройка указателей на классы и методы</emphasis></subtitle><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  Initiator initiator;</code></p>
<p><code>  Executor  executor;</code></p>
<p><code>  Executor1 executor1;</code></p>
<p><code>  Executor2 executor2;</code></p>
<p><code>  Executor3 executor3;</code></p>
<empty-line/><p><code>  initiator.setup(&amp;executor, &amp;Executor::callbackHandler1);   // (1)</code></p>
<p><code>  initiator.setup(&amp;executor, &amp;Executor::callbackHandler2);   // (2)</code></p>
<p><code>  initiator.setup(&amp;executor1, &amp;Executor::callbackHandler1);  // (3)</code></p>
<p><code>  initiator.setup(&amp;executor1, &amp;Executor::callbackHandler2);  // (4)</code></p>
<p><code>  initiator.setup(&amp;executor2, &amp;Executor::callbackHandler1);  // (5)</code></p>
<p><code>  initiator.setup(&amp;executor2, &amp;Executor::callbackHandler2);  // (6)</code></p>
<empty-line/><p><code>  //initiator.setup(&amp;executor3, &amp;Executor::callbackHandler1); //Incorrect, base class is ambiguous  // (7)</code></p>
<p><code>  //initiator.setup(&amp;executor3, &amp;Executor::callbackHandler2); //Incorrect, base class is ambiguous  // (8)</code></p>
<empty-line/><p><code>  initiator.setup((Executor1*)&amp;executor3, &amp;Executor::callbackHandler1);  // (9)</code></p>
<p><code>  initiator.setup((Executor1*)&amp;executor3, &amp;Executor::callbackHandler2);  // (10)</code></p>
<p><code>  initiator.setup((Executor2*)&amp;executor3, &amp;Executor::callbackHandler1);  // (11)</code></p>
<p><code>  initiator.setup((Executor2*)&amp;executor3, &amp;Executor::callbackHandler2);  // (12)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строках 1 и 2 все прозрачно: какой метод назначен, такой и будет вызван.</p>
<p>В строке 3 мы назначаем указатель на метод <strong>Executor::callbackHandler1</strong>, но поскольку в классе <strong>Executor1</strong> он переопределен, будет вызван метод <strong>Executor1::callbackHandler1</strong>.</p>
<p>В строке 4 мы назначаем указатель на <strong>Executor::callbackHandler2</strong>; в классе <strong>Executor1 </strong>такого метода нет (т.е. он не переопределен), поэтому будет вызван метод базового класса <strong>Executor::callbackHandler2</strong>.</p>
<p>В строке 5 мы назначаем указатель на <strong>Executor::callbackHandler1</strong>; в классе <strong>Executor2</strong> метод не переопределен, поэтому будет вызван метод базового класса <strong>Executor::callbackHandler2</strong>.</p>
<p>В строке 6 мы назначаем указатель на <strong>Executor::callbackHandler2</strong>; в классе <strong>Executor2</strong> он переопределен, поэтому будет вызван метод <strong>Executor2:: callbackHandler2</strong>.</p>
<p>С классом <strong>Executor3</strong> ситуация еще интереснее, поскольку он использует множественное наследование<a l:href="#n5" type="note">6</a>. Мы не можем напрямую назначать указатели на методы базового класса, как это приведено в строках 7 и 8, потому что если взглянуть на иерархию наследования, то можно увидеть, что к базовому классу можно добраться двумя путями – через <strong>Executor1</strong> либо через <strong>Executor2</strong>. Таким образом, компилятор не знает, по какому пути выполнять поиск методов, и выдает ошибку. По указанной причине мы должны явно указать в цепочке наследования класс-предшественник. Если в пути наследования какая-нибудь функция окажется переопределена, то она будет вызвана, в противном случае будет вызвана функция базового класса.</p>
<p>В строке 9 мы в качестве предшественника указываем класс <strong>Executor1</strong> и назначаем указатель на метод <strong>callbackHandler1</strong>. В <strong>Executor1</strong> этот метод переопределен, и он будет вызван. В строке 10 мы назначаем указатель на метод <strong>callbackHandler2</strong>; в <strong>Executor1 </strong>этот метод не переопределен, поэтому будет вызван метод базового класса <strong>Executor::callbackHandler2</strong>. Если мы в качестве предшественника будем указывать <strong>Executor2</strong>, как это показано в строках 11 и 12, то получится все наоборот: в строке 11 будет вызван метод базового класса <strong>Executor:: callbackHandler1</strong>, а в строке 12 будет вызван соответствующий переопределенный метод <strong>Executor2::callbackHandler2</strong>.</p>
<empty-line/><p>Для наглядности сведем результаты в Табл. 3.</p>
<empty-line/><p>Табл. 3. Вызовы методов по цепочке наследования</p>
<image l:href="#i_016.png"/><empty-line/><p>Используя рассмотренные способы управления контекстом, можно реализовать довольно изощренную логику обработки и динамически ее изменять в процессе выполнения программы.</p>
</section><section><title><p>2.3.5. Синхронный вызов</p>
</title><p>Реализация инициатора для синхронного вызова представлена в Листинг 14. В отличие от асинхронного вызова, здесь аргументы не хранятся, а передаются как входные параметры функции.</p>
<subtitle><emphasis>Листинг 14. Инициатор для синхронного обратного вызова с указателем на метод-член класса</emphasis></subtitle><p><code>class Executor;</code></p>
<p><code>using ptr_method_callback_t = void(Executor::*)(int);</code></p>
<empty-line/><p><code>void run(Executor* ptrClientCallbackClass, ptr_method_callback_t ptrClientCallbackMethod)</code></p>
<p><code>{</code></p>
<p><code>int eventID = 0;</code></p>
<p><code>//Some actions</code></p>
<p><code>(ptrClientCallbackClass-&gt;*ptrClientCallbackMethod)(eventID);</code></p>
<p><code>}</code></p>
</section><section><title><p>2.3.6. Преимущества и недостатки</p>
</title><p>Преимущества и недостатки реализации обратных вызовов с помощью указателя на метод – член класса приведены в Табл. 4.</p>
<empty-line/><p>Табл. 4. Преимущества и недостатки реализации обратных вызовов с помощью указателя на метод-член класса</p>
<image l:href="#i_017.png"/><empty-line/><p><emphasis>Гибкость</emphasis>. Управлять контекстом можно тремя способами, подобные возможности отсутствуют в других реализациях.</p>
<p><emphasis>Отсутствие трансляции контекста</emphasis>. Контекст транслировать не нужно, метод-член имеет полный доступ к содержимому класса.</p>
<p><emphasis>Сложность</emphasis>. Код получается довольно громоздким и запутанным.</p>
<p><emphasis>Тип класса должен объявляться в инициаторе</emphasis>. Здесь достаточно только предварительного объявления класса. Полное объявление класса в инициаторе делать необязательно и даже нежелательно, потому что логически это обработчик обратного вызова, то есть он относится к исполнителю и должен быть в нем реализован. Тем не менее, требование предварительного объявления класса ограничивает независимость исполнителя: он может использовать только те типы классов, которые были предварительно объявлены в инициаторе.</p>
<p><emphasis>Инициатор должен хранить указатель на метод и указатель на класс</emphasis>. Увеличивается расход памяти.</p>
</section></section><section><title><p>2.4. Функциональный объект</p>
</title><section><title><p>2.4.1. Концепция</p>
</title><p>С точки зрения C++ функциональный объект – это класс, который имеет перегруженный оператор вызова функции<a l:href="#n6" type="note">7</a>.</p>
<p>Графическое изображение обратного вызова с помощью функционального объекта представлено на Рис. 14. Исполнитель реализуется в виде класса, код упаковывается в перегруженный оператор вызовы функции, в качестве контекста выступает экземпляр класса. При настройке экземпляр класса как аргумент сохраняется в инициаторе<a l:href="#n7" type="note">8</a>. Инициатор осуществляет обратный вызов посредством вызова перегруженного оператора, передавая ему требуемую информацию. Контекст здесь передавать не нужно, поскольку внутри оператора доступно все содержимое класса.</p>
<empty-line/><image l:href="#i_018.png"/><p>Рис. 14. Реализация обратного вызова с помощью функционального объекта.</p>
<empty-line/></section><section><title><p>2.4.2. Инициатор</p>
</title><p>Предварительно необходимо объявить функциональный объект (см. Листинг 15), потому что его объявление должен видеть как инициатор, так и исполнитель.</p>
<subtitle><emphasis>Листинг 15.Объявление функционального объекта</emphasis></subtitle><p><code>class CallbackHandler</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void operator() (int eventID) //This is an overloaded operator</code></p>
<p><code>  {</code></p>
<p><code>    //It will be called by server</code></p>
<p><code>  };</code></p>
<p><code>};</code></p>
<empty-line/><p>Реализация инициатора приведена в Листинг 16.</p>
<subtitle><emphasis>Листинг 16. Инициатор с функциональным объектом</emphasis></subtitle><p><code>class Initiator  // (1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void setup(const CallbackHandler&amp; callback)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>    callbackObject = callback;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()  // (3)</code></p>
<p><code>  {</code></p>
<p><code>    int eventID = 0;</code></p>
<p><code>    //Some actions</code></p>
<p><code>    callbackObject(eventID);  // (4)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  CallbackHandler callbackObject;  // (5)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 мы объявляется класс-инициатор. В строке 2 объявляется функция для настройки вызова, в которую передается ссылка на функциональный объект. Данный объект присваивается переменной-аргументу, объявленному в строке 5. В строке 3 объявлена функция запуска, внутри этой функции в строке 4 производится вызов перегруженного оператора. Как видим, синтаксис вызова перегруженного оператора совпадает с синтаксисом вызова обычной функции.</p>
</section><section><title><p>2.4.3. Исполнитель</p>
</title><p>Реализация исполнителя приведена в Листинг 17.</p>
<subtitle><emphasis>Листинг 17. Исполнитель с функциональным объектом</emphasis></subtitle><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  Initiator initiator;        // (1)</code></p>
<p><code>  CallbackHandler executor;   // (2)</code></p>
<p><code>  initiator.setup(executor);  // (3)</code></p>
<p><code>  initiator.run();            // (4)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявляется переменная класса-инициатора, в строке 2 объявляется функциональный объект, в строке 3 производится настройка, в строке 4 – запуск.</p>
</section><section><title><p>2.4.4. Синхронный вызов</p>
</title><p>Реализация инициатора для синхронного вызова представлена в Листинг 18. В отличие от асинхронного вызова, здесь функциональный объект не сохраняется как аргумент, он передается через входные параметры функции.</p>
<subtitle><emphasis>Листинг 18. Инициатор для синхронного вызова с функциональным объектом</emphasis></subtitle><p><code>void run(CallbackHandler&amp; callbackObject)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  //Some actions</code></p>
<p><code>  callbackObject(eventID);</code></p>
<p><code>}</code></p>
</section><section><title><p>2.4.5. Преимущества и недостатки</p>
</title><p>Преимущества и недостатки реализации обратных вызовов с помощью функционального объекта приведены в Табл. 5.</p>
<empty-line/><p>Табл. 5. Преимущества и недостатки обратных вызовов с помощью функционального объекта</p>
<image l:href="#i_019.png"/><empty-line/><p><emphasis>Простая реализация</emphasis>. Самая простая из всех рассмотренных. Необходима только одна переменная – экземпляр класса, весь контекст хранится внутри этого класса. Прозрачный и понятный синтаксис.</p>
<p><emphasis>Безопасность</emphasis>. При настройке в инициаторе создается копия переданного функционального объекта. Исходный экземпляр становится ненужным, его можно безопасно удалить.</p>
<p><emphasis>Отсутствие трансляции контекста</emphasis>. Код вызова хранится внутри перегруженного оператора, контекст инкапсулирован внутри класса вместе с кодом.</p>
<p><emphasis>Общий функциональный объект</emphasis>. Инициатор и исполнитель связаны через единый функциональный объект, они оба должны видеть его объявление. Вся логика обработки реализуется внутри объекта. Это приводит к монолитной архитектуре, что сильно затрудняет модификацию поведения обработчика. По сути дела, исполнитель встраивается в инициатор и становится его составной частью<a l:href="#n8" type="note">9</a>.</p>
<p><emphasis>Невозможность реализации API</emphasis>. Следствие монолитной архитектуры: использование API предполагает возможность модификации поведения исполнителя без изменения кода инициатора. Поскольку они оба связаны через единый объект, выполнение указанного требования является нереализуемым.</p>
<p><emphasis>Высокое быстродействие</emphasis>. А вот здесь недостатки монолитной архитектуры превращаются в достоинства. Дело в том, что поскольку инициатор сохраняет у себя объект, он имеет доступ к коду перегруженного оператора, т. е. к коду обработчика вызова. Как следствие, оптимизирующий компилятор получает возможность встроить код обработчика непосредственно в точку вызова, опуская вызов функции (перегруженный оператор тоже является функцией), что значительно ускоряет выполнение вызова. Рассмотрим этот момент подробнее.</p>
</section><section><title><p>2.4.6. Производительность</p>
</title><p>С точки зрения машинных команд, вызов функции – не слишком быстрая операция. Необходимо несколько команд для сохранения стека<a l:href="#n9" type="note">10</a>; команда перехода к коду функции; команда возврата управления; несколько команд для восстановления стека. А если код тела функции небольшой, к примеру, всего лишь сравнение двух величин, то время, затраченное на вызов функции, может значительно превысить время выполнения кода функции.</p>
<p>Поясним сказанное на примере. Напишем маленькую простую программу, которая считывает из консоли два числа, складывает их и результат выводит на экран (Листинг 19).</p>
<subtitle><emphasis>Листинг 19. Маленькая простая программа</emphasis></subtitle><p><code>#include &lt;iostream&gt;</code></p>
<empty-line/><p><code>int Calculate(int a, int b)</code></p>
<p><code>{</code></p>
<p><code>  return a + b;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int a, b;</code></p>
<p><code>  std::cin &gt;&gt; a &gt;&gt; b;</code></p>
<p><code>  int result = Calculate(a, b);</code></p>
<p><code>  std::cout &lt;&lt; result;</code></p>
<p><code>}</code></p>
<empty-line/><p>Откомпилируем код с выключенной оптимизацией и запустим на выполнение. Посмотрим дизассемблерный участок кода <a l:href="#n10" type="note">11</a>, в котором производится вызов функции (Листинг 20):</p>
<subtitle><emphasis>Листинг 20. Дизассемблерный код с выключенной оптимизацией:</emphasis></subtitle><p><code>int Calculate(int a, int b)</code></p>
<p><code>{</code></p>
<p><code>00007FF6DA741005  and         al,8               // 1</code></p>
<p><code>return a + b;</code></p>
<p><code>00007FF6DA741008  mov         eax,dword ptr [b]  // 2</code></p>
<p><code>00007FF6DA74100C  mov         ecx,dword ptr [a]  // 3</code></p>
<p><code>00007FF6DA741010  add          ecx,eax           // 4</code></p>
<p><code>00007FF6DA741012  mov         eax,ecx            // 5</code></p>
<p><code>}</code></p>
<p><code>00007FF6DA741014  ret                            // 6</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>…….</code></p>
<p><code>int result = Calculate(a, b);</code></p>
<p><code>00007FF6DA741053  mov         edx,dword ptr [b]              // 7</code></p>
<p><code>00007FF6DA741057  mov         ecx,dword ptr [a]              // 8</code></p>
<p><code>00007FF6DA74105B  call        Calculate (07FF6DA741000h)     // 9</code></p>
<p><code>00007FF6DA741060  mov         dword ptr [result],eax         // 10</code></p>
<p><code>…….</code></p>
<empty-line/><p>В строках 7 и 8 введенные значения a и b сохраняются в регистрах. В строке 9 выполняется вызов функции. В строке 1 выполняется обнуление результата, в строках 2 и 3 переданные значения копируются в регистры, в строке 4 выполняется сложение, в строке 5 результат копируется обратно в регистр, в строке 6 выполняется выход из функции, в строке 10 результат вычисления функции копируется в переменную результата.</p>
<p>Теперь включим оптимизацию, откомпилируем и посмотрим на код (Листинг 21):</p>
<subtitle><emphasis>Листинг 21. Дизассемблерный код с включенной оптимизацией</emphasis></subtitle><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>…….</code></p>
<p><code>int result = Calculate(a, b);</code></p>
<p><code>00007FF7D5B11033  mov         edx,dword ptr [b]</code></p>
<p><code>00007FF7D5B11037  add          edx,dword ptr [a]  </code></p>
<empty-line/><p>Как видим, для вычислений у нас всего две операции: запись в регистр значения b и добавление к нему значения a. Код встроен в поток выполнения, вызов функции не производится. Ощутимая разница, не правда ли?</p>
</section></section><section><title><p>2.5. Лямбда-выражение</p>
</title><section><title><p>2.5.1. Концепция</p>
</title><p>Лямбда-выражение<a l:href="#n11" type="note">12</a> – это локальная неименованная функция, которая, подобно обычной функции, может принимать входные параметры и возвращать результат. Особенностью лямбда-выражений, отличающих их от обычных функций, является возможность захвата переменных.</p>
<p>Графическое изображение обратного вызова с помощью лямбда-выражения представлено на Рис. 15. Исполнитель реализуется в виде какой-либо исполняемой функции, в качестве которой могут выступать глобальная функция, статический метод класса, метод-член класса, перегруженный оператор. Код обратного вызова упаковывается в лямбда-выражение, в качестве контекста выступают захваченные переменные. При настройке лямбда-выражение как аргумент сохраняется в инициаторе. Инициатор осуществляет обратный вызов посредством вызова хранимого выражения, передавая ему требуемую информацию. Контекст здесь передавать не нужно, поскольку внутри тела лямбда-выражения доступны все захваченные переменные.</p>
<empty-line/><image l:href="#i_020.png"/><p>Рис. 15. Реализация обратного вызова с помощью лямбда-выражения</p>
<empty-line/></section><section><title><p>2.5.2. Инициатор</p>
</title><p>Как хранить и передавать лямбда-выражение как аргумент? Если оно не захватывает переменные, то стандарт допускает неявное преобразование лямбда-выражения к указателю на функцию. В этом случае реализация инициатора полностью совпадает с рассмотренной в 2.1. Однако использование лямбда-выражений без захвата переменных не дает никакого преимущества по сравнению с обычной функцией, использовать их в таком виде не имеет смысла.</p>
<p>Другое дело, когда лямбда-выражение осуществляет захват переменных, в этом случае мы получаем мощный и гибкий инструмент управления контекстом. Однако использование таких выражений в качестве аргумента вызывает определенные сложности. Связано это с тем, что тип лямбда-выражения является анонимным. Как следствие, имя типа нам неизвестно, и мы не можем просто объявить переменную нужного типа и присвоить ей лямбда-выражение, как это происходит, например, с указателями или классами. Решается указанная проблема с помощью шаблонов, что будет рассмотрено позже в соответствующих главах. Забегая вперед, отметим, что для хранения лямбда-выражений можно объявлять шаблон с параметром – типом лямбда-выражения (п. 4.4.2) либо использовать специальные классы библиотеки STL (п. 4.6.1).</p>
</section><section><title><p>2.5.3. Исполнитель</p>
</title><p>Исполнитель реализовывается в виде лямбда-выражения, а передача его как аргумента инициатору зависит от способа реализации последнего. Если исполнитель реализован в виде шаблона класса (п. 4.4.2), лямбда-выражение должно присваиваться в конструкторе класса. В случае использования классов STL (п. 4.5.1) лямбда-выражение передается подобно любому другому аргументу. Подробно эти вопросы рассматриваются в разделе 4, посвященном использованию шаблонов.</p>
</section><section><title><p>2.5.4. Синхронный вызов</p>
</title><p>Инициатор для синхронного вызова с лямбда-выражением реализуется в виде шаблонной функции, параметром шаблона выступает тип аргумента. Подробно этот вопрос рассмотрен в п. 4.2.1.</p>
</section><section><title><p>2.5.5. Преимущества и недостатки</p>
</title><p>Преимущества и недостатки реализации обратных вызовов с помощью лямбда-выражения приведены в Табл. 6.</p>
<empty-line/><p>Табл. 6. Преимущества и недостатки обратных вызовов с помощью лямбда-выражения</p>
<image l:href="#i_021.png"/><empty-line/><p><emphasis>Гибкое управление контекстом</emphasis>. Возможность захвата переменных предоставляет простые и удобные средства изменения контекста. Изменяя состав захваченных переменных, мы легко можем добавлять значения, необходимые для контекста, при этом нет необходимости изменять код инициатора. Захватив указатель this, мы получаем доступ к содержимому класса, т. е. фактически лямбда-выражение превращается в «метод внутри метода» (см. пример в Листинг 22). Элегантно, не правда ли?</p>
<p><emphasis>Требует использования шаблонов</emphasis>. Использование шаблонов накладывает архитектурные ограничения на реализацию программных модулей. Это связанно с тем, что шаблоны не предполагают присутствие предварительно откомпилированного кода. Подробнее об этом мы будем говорить в соответствующей главе (4.7), посвященной ограничениям при использовании шаблонов.</p>
<subtitle><emphasis>Листинг 22. Лямбда-выражение с захватом указателя this</emphasis></subtitle><p><code>class EventCounter</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void AddEvent(unsigned int event)</code></p>
<p><code>  {</code></p>
<p><code>    callCounter_++;</code></p>
<p><code>    lastEvent_ = event;</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  unsigned int callCounter_ = 0;</code></p>
<p><code>  int lastEvent_ = 0;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>class Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  Executor(EventCounter* counter): counter_(counter)</code></p>
<p><code>  {</code></p>
<p><code>    auto lambda = [this](int eventID)</code></p>
<p><code>    {</code></p>
<p><code>      //It will be called by initiator</code></p>
<p><code>      counter_-&gt;AddEvent(eventID);</code></p>
<p><code>      processEvent(eventID);</code></p>
<p><code>    };</code></p>
<p><code>    //Setup lambda in initiator</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  EventCounter* counter_;</code></p>
<p><code>  void processEvent(int eventID) {/*Do something*/}</code></p>
<p><code>};</code></p>
</section></section><section><title><p>2.6. Итоги</p>
</title><p>В C++ обратные вызовы могут быть реализованы с помощью следующих конструкций:</p>
<p>• указатель на функцию;</p>
<p>• указатель на статический метод класса;</p>
<p>• указатель на метод-член класса;</p>
<p>• функциональный объект;</p>
<p>• лямбда-выражение.</p>
<p>Каждая реализация имеет свои достоинства и недостатки. Так какую все-таки выбрать? Чтобы ответить на этот вопрос, необходимо выполнить сравнительный анализ.</p>
</section></section><section><title><p>3. Сравнительный анализ реализаций</p>
</title><section><title><p>3.1. Методологические подходы</p>
</title><section><title><p>3.1.1. Обобщенный алгоритм</p>
</title><p>Итак, мы рассмотрели различные способы реализации обратных вызовов. Какая из них наилучшим образом подходит для использования в конкретной ситуации? Чтобы ответить на этот вопрос, необходимо сравнить реализации, т. е. требуется сравнительный анализ.</p>
<p>Обобщенный алгоритм сравнительного анализа включает следующие шаги.</p>
<empty-line/><p>1. Выбрать объекты анализа.</p>
<p>2. Определить критерии сравнения.</p>
<p>3. Построить матрицу соответствия, в которой отобразить, насколько объекты анализа соответствуют выбранным критериям.</p>
<p>4. Проанализировать полученные результаты и выбрать объект, наилучшим образом удовлетворяющий совокупности критериев.</p>
<empty-line/><p>Рассмотрим указанные шаги подробнее.</p>
<p>1. <strong>Объект анализа</strong> – это некая сущность, которая будет подвергаться анализу. В нашем случае такими сущностями выступают реализации обратных вызовов.</p>
<p>2. <strong>Выбор критериев</strong> – пожалуй, самый сложный и в то же время наиболее важный этап сравнительного анализа. Критерии должны отражать значимость показателя, который они определяют; неверный выбор критериев приводит к неправильным результатам. Так, например, в качестве критерия можно выбрать количество строк кода, но насколько этот показатель значим при разработке? В нашем случае совершенно не значим: не имеет значения, займет реализация 10 или 50 строк, важно то, насколько она обеспечивает качество выполняемых функций. Качество, в свою очередь, определяется степенью выполнения требований, предъявляемых к проектируемой системе. По этой причине именно требования наилучшим образом подходят для использования в качестве критериев.</p>
<p>3. <strong>Матрица соответствия</strong> строится в виде таблицы. В заголовки строк таблицы вписываются критерии, в заголовки столбцов – объекты анализа. В ячейках таблицы для каждой пары «объект-критерий» выставляется степень соответствия объекта заданному критерию. Степень выполнения может быть качественной (выполняется/не выполняется) или количественной (выставляется оценка по заданной шкале).</p>
<p>4. Полученные <strong>результаты</strong> суммируются. Объект, набравший наибольшее количество положительных утверждений (качественная оценка), или наибольшее количество баллов (количественная оценка), будет оптимальным.</p>
<p>Итак, мы описали обобщенный алгоритм сравнительного анализа. Далее рассмотрим, как выполняются шаги алгоритма применительно к поставленной задаче – выбору оптимальной реализации для конкретного случая. Первый шаг – выбор объектов анализа – здесь тривиальный, объектами анализа являются реализации обратных вызовов. Перейдем ко второму шагу –определим критерии, в качестве которых выступают требования.</p>
</section><section><title><p>3.1.2. Требования как критерии</p>
</title><p>Обозначим требования, предъявляемые при разработке программного кода обратных вызовов. Состав требований не претендует на полноту, читатель может добавить свои, если посчитает их значимыми или актуальными для конкретного случая.</p>
<p><emphasis>Простота</emphasis>. Показывает, насколько просто и быстро можно написать, отладить и сопровождать код.</p>
<p><emphasis>Независимость компонентов</emphasis>. Показывает, нужно ли изменять код одного компонента при изменении другого. Чем меньше зависимости между компонентами (в нашем случае это инициатор и исполнитель), тем проще разработка и отладка программной системы. Кроме того, упрощается ее сопровождение и повышается надежность.</p>
<p><emphasis>Отсутствие трансляции контекста</emphasis>. Отсутствие необходимости трансляции контекста упрощает разработку, улучшает прозрачность кода и повышает независимость компонентов. И наоборот, трансляция контекста усложняет код и заставляет инициатор выполнять дополнительные операции для хранения и передачи контекста</p>
<p><emphasis>Безопасность</emphasis>. Показывает устойчивость системы к потенциальным ошибкам.</p>
<p><emphasis>Гибкость</emphasis>. Показывает, насколько просто модифицировать код при появлении новых требований.</p>
<p><emphasis>Полиморфизм</emphasis>. Показывает, поддерживается ли полиморфизм в реализации исполнителя. Поддержка полиморфизма упрощает разработку и повышает гибкость в рамках объектно-ориентированной парадигмы.</p>
<p><emphasis>Быстродействие</emphasis>. Показывает, насколько быстро осуществляется вызов кода исполнителя.</p>
<p><emphasis>Системный API</emphasis>. Показывает возможность реализации системных API.</p>
<p><emphasis>C++ API</emphasis>. Показывает возможность реализации C++ API.</p>
<empty-line/><p>Итак, объекты анализа выбраны, критерии определены. Теперь нужно построить матрицу соответствия. Для начала мы будем использовать качественный анализ, поскольку он более простой в реализации.</p>
</section></section><section><title><p>3.2. Качественный анализ</p>
</title><section><title><p>3.2.1. Матрица соответствия</p>
</title><p>Матрица соответствия строится в виде таблицы. В строках выписываются требования, в столбцах – способы реализации, в ячейках – признаки, указывающие, насколько реализация поддерживает соответствующий критерий (Табл. 7.)</p>
<empty-line/><p>Табл. 7. Качественный анализ реализаций обратных вызовов</p>
<p>Легенда: ▪ полностью поддерживается; ▫ поддерживается частично; пустое поле – не поддерживается</p>
<image l:href="#i_022.png"/><empty-line/><p>По каким соображениям мы назначили оценки?</p>
<p><emphasis>Простота</emphasis>. Самой сложной реализацией будет, пожалуй, указатель на метод-член класса: запутанный и не слишком наглядный синтаксис. Довольно сложной выглядит реализация лямбда-выражений, поскольку приходится использовать шаблоны. Несколько проще выглядит реализация с помощью указателей на функцию, но там немного запутывает необходимость приведения типов. На этом фоне остальные реализации выглядят достаточно простыми.</p>
<p><emphasis>Независимость компонентов</emphasis>. Полностью независимыми будет реализация с помощью указателей на функцию: как бы мы не модифицировали код исполнителя, как бы не меняли используемый контекст, код инициатора остается неизменным, даже не требуется его перекомпиляция. Это одна из причин, почему указанная реализация подходит для построения системных API. Лямбда-выражения являются относительно независимыми: при любом изменении состава и типов захваченных переменных код инициатора остается неизменным, но он будет требовать перекомпиляции, поскольку реализован с использованием шаблонов. Указатели на методы классов являются частично независимыми, поскольку требуют предварительного объявления класса в инициаторе. Использование функциональных объектов порождает монолитную архитектуру, где инициатор и исполнитель зависят друг от друга.</p>
<p><emphasis>Отсутствие трансляции контекста</emphasis>. Указатели на функции и статические методы требуют трансляции контекста, остальные реализации этого не требуют.</p>
<p><emphasis>Безопасность</emphasis>. Самыми безопасными являются функциональные объекты и лямбда- выражения, потому что в инициаторе хранятся их копии, никак не зависящие от исполнителя. Указатели на методы класса поддерживают безопасность лишь частично: управление временем жизни экземпляра класса возлагается на исполнителя, и потенциально возможны ситуации, когда последний уничтожает экземпляр класса, указатель на который остается в инициаторе и может быть вызван. Указатель на функцию не является безопасным, поскольку исполнитель интерпретирует контекст приведением типов, и нет никакой возможности проверить полученный указатель.</p>
<p><emphasis>Гибкость</emphasis>. Самым гибким является указатель на метод класса, поскольку здесь имеются несколько способов модификации поведения обработчика. Другие реализации не предлагают таких возможностей, а функциональные объекты в силу монолитной структуры гибкими не являются.</p>
<p><emphasis>Полиморфизм</emphasis>. Указатель на метод-член класса поддерживает полиморфизм подтипов (наследование и виртуализация), лямбда-выражения поддерживают специализированный полиморфизм (различный код в зависимости от состава и типов захваченных переменных). Остальные реализации полиморфизм не поддерживают.</p>
<p><emphasis>Быстродействие</emphasis>. Самым быстродействующим является функциональный объект, практически не отстает от него и лямбда-выражение. Это связано с тем, что их код может встраиваться в точку вызова. Несколько медленнее работают указатели на функцию и на статический метод, поскольку их код выполняется через вызов функции<a l:href="#n12" type="note">13</a>. Медленнее всего работает указатель на метод-член класса, поскольку ему необходимо обращение к таблице виртуальных функций.</p>
<p><emphasis>Системный API</emphasis>. Указатель на функцию – единственный способ, с помощью которого можно использовать обратные вызовы при проектировании системных API.</p>
<p><emphasis>C++ API</emphasis>. Лямбда-выражения не подходят для использования в C++ API: хотя инициатор не требует изменений при модификации исполнителя, но ему требуется перекомпиляция. Не подходят для С++ API также функциональные объекты, поскольку изменение функционального объекта затрагивает как инициатор, так и исполнитель.</p>
</section><section><title><p>3.2.2. Выбор реализации</p>
</title><p>Итак, мы построили матрицу соответствия, проанализировали, насколько реализации соответствуют выбранным критериям. Что же выбрать для конкретного случая? Для решения этого вопроса необходимо определить, какой критерий сейчас является наиболее важным, и выбрать реализацию по этому критерию. Так, например, если самым важным является возможность проектирования системного API, то следует выбрать указатели на функцию. Если самым важным является быстродействие, то следует выбрать функциональные объекты. Если самым важным является гибкость, то следует выбрать указатели на член класса.</p>
<p>А как сделать выбор, если нам одновременно важны несколько критериев, причем некоторые из них противоречат друг другу (а чаще всего именно так и происходит)? У нас появляется проблема многокритериального выбора, решить которую позволяет метод интегральных оценок.</p>
</section></section><section><title><p>3.3. Метод интегральных оценок</p>
</title><section><title><p>3.3.1. Количественные оценки</p>
</title><p>По своей сути метод интегральных оценок повторяет качественный анализ, но с одним отличием – в матрице соответствия вместо качественных вводятся количественные оценки. В ячейках матрицы проставляются числовые значения, отражающие, насколько объект анализа поддерживает (другими словами, в какой степени реализует) соответствующее требование. Диапазон возможных значений задается шкалой оценок, которая зависит от точности, которую мы хотим получить. Примеры различных шкал оценок изображены на Рис. 16.</p>
<empty-line/><image l:href="#i_023.png"/><p>Рис. 16. Шкалы оценки реализуемости требований</p>
<empty-line/><p>Итак, строим матрицу соответствия, в ячейках выставляем числовые оценки, суммируем оценки по столбцам. Реализация, набравшая наибольшее количество баллов, является оптимальной.</p>
<p>Пример интегральных оценок по трем критериям с использованием трехбалльной шкалы приведен в Табл. 8. Здесь наибольшее количество балов набирает реализация с использованием функционального объекта, которая для конкретного случая является оптимальной.</p>
<empty-line/><p>Табл. 8. Интегральные оценки по трехбалльной шкале</p>
<image l:href="#i_024.png"/><empty-line/></section><section><title><p>3.3.2. Коэффициенты важности</p>
</title><p>Зачастую оказывается, что некоторые требования являются более важными, чем остальные. Например, быстродействие важно, но в то же время гибкость еще важнее; в свою очередь, безопасность является приоритетным фактором. Чтобы учесть такие ситуации, вводятся коэффициенты важности.</p>
<p>Каждому требованию присваивается коэффициент, который отражает, насколько данное требование является важным для обеспечения качества функционирования системы в конкретном случае. При расчете числовых оценок каждое значение в ячейке таблицы умножается на этот коэффициент; таким образом вносятся поправки в итоговые значения. Целесообразно предварительно ранжировать требования по важности: наименее важному присвоить коэффициент 1, и для каждого требования, более важного, чем предыдущее, увеличивать значение на единицу.</p>
<p>Введем коэффициенты важности для предыдущего примера. Ранжируем требования: считаем, что наименее важным для нас является простота, наиболее важным – безопасность. Результаты приведены в Табл. 9.</p>
<empty-line/><p>Табл. 9. Ранжирование требований</p>
<image l:href="#i_025.png"/><empty-line/><p>Пересчитаем показатели с учетом коэффициентов важности. Для коэффициентов важности вводим отдельный столбец, где проставляем соответствующие значения. В ячейках в скобках отображаются значения оценки без учета коэффициента, без скобок отображаются новые значения с учетом поправок (Табл. 10).</p>
<empty-line/><p>Табл. 10. Интегральные оценки с учетом коэффициентов важности.</p>
<image l:href="#i_026.png"/><empty-line/><p>Как видим, после введения коэффициентов важности результаты изменились: теперь максимальное количество балов набирают две реализации – указатель на функцию и лямбда-выражение.</p>
</section><section><title><p>3.3.3. Учет прогнозных показателей</p>
</title><p>Как мы видели в предыдущем примере, может оказаться, что по результатам расчетов несколько реализаций имеют одинаковое количество балов. В этом случае целесообразно заглянуть в будущее.</p>
<p>Из списка требований выбираем те, которые не актуальны сейчас, но которые, возможно, станут актуальны в последствии. Сводим эти требования в таблицу, аналогично предыдущему примеру, но для числовых значений используем инверсную шкалу: если реализация полностью поддерживает соответствующее требование, выставляем 0, если не поддерживает, то выставляем минимальное отрицательное значение<a l:href="#n13" type="note">14</a>. Так, например, если используется трехбалльная шкала, то 0 превращается в -2, 1 превращается в -1, а 2 превращается в 0. Инверсная шкала показывает, насколько сильно новые требования ухудшают текущую интегральную оценку: чем меньше значение<a l:href="#n14" type="note">15</a>, тем в большей степени уменьшается текущая оценка.</p>
<p>Далее, полученные оценки суммируются, получившаяся отрицательная интегральная оценка для каждого столбца суммируется с соответствующей текущей оценкой, внося, таким образом, поправки. Из получившихся итоговых значений выбирается реализация, у которой количество балов после коррекции получается наибольшим.</p>
<p>Вернемся к примеру из предыдущего параграфа. Представим, что мы поразмыслили и решили, что в будущем для нас может стать актуальным быстродействие и необходимость реализации C++ API. Сводим эти критерии в таблицу с инверсной шкалой, считаем, что важность этих критериев одинакова. Подсчитываем сумму (Табл. 11).</p>
<empty-line/><p>Табл. 11. Интегральные оценки с инверсной шкалой</p>
<image l:href="#i_027.png"/><empty-line/><p>Получившиеся результаты суммируем с результатами, полученными с использованием обычной шкалы (Табл. 12).</p>
<empty-line/><p>Табл. 12. Поправки с учетом инверсной шкалы</p>
<image l:href="#i_028.png"/><empty-line/><p>Итак, после внесенных поправок для прогнозных показателей максимальное количество балов набирает указатель на функцию, который рекомендуется к применению.</p>
<p>Может оказаться, что даже после учета прогнозных показателей остаются реализации с одинаковым количеством баллов. В этом случае выбор остается на усмотрение разработчика. Он может, к примеру, взять критерий, который лично для него является более предпочтительным (например, простота), и выбрать реализацию по этому критерию. Или просто выбрать, что называется, первую попавшуюся.</p>
</section></section><section><title><p>3.4. Итоги</p>
</title><p>Сравнительный анализ реализаций обратных вызовов необходим для выбора наилучшей в конкретной ситуации. Методика анализа включает в себя выбор объектов, определение критериев сравнения, построение матрицы соответствия, выбор оптимального решения.</p>
<p>Качественный анализ используется, если необходимо выбрать реализацию, оптимальную по какому-нибудь единственному критерию. Если у нас имеется несколько критериев, то необходим количественный анализ, в качестве которого применяется метод интегральных оценок.</p>
<p>Рассмотренные методики подходят не только для исследования обратных вызовов, их можно применять в любых других случаях, когда необходим выбор оптимального архитектурного решения из множества возможных.</p>
</section></section><section><title><p>4. Обратные вызовы и шаблоны</p>
</title><section><title><p>4.1. Общие понятия шаблонов</p>
</title><p>Шаблоны в C++ являются инструментом, реализующим параметрический полиморфизм, что означает возможность построения единого (обобщенного) кода для различных типов данных<a l:href="#n15" type="note">16</a>. В таком коде не задаются конкретные типы, а вводятся параметры, в которые затем подставляется нужный тип данных. Чтобы код работал корректно, типы должны удовлетворять некоторым соглашениям, или, другими словами, поддерживать определенный интерфейс.</p>
<cite><p><strong>Обобщенный код</strong> – это код, реализующий заданную функциональность без привязки к типам данных.</p>
</cite><p>Шаблоны объявляются ключевым словом <strong>template</strong>, после которого в угловых скобках перечисляются параметры. Параметрами шаблона могут быть как типы данных, так и значения.</p>
<p>Пример объявления шаблона:</p>
<empty-line/><p><code>template SomeTemplate&lt;typename type, int value&gt;</code></p>
<empty-line/><p>Здесь объявлен шаблон с одним параметром-типом <strong>type</strong> и параметром-значением <strong>value</strong>.</p>
<p>Параметрам шаблона, как типам, так и значениям, могут быть назначены значения по умолчанию:</p>
<empty-line/><p><code>template SomeTemplate&lt;typename type = SomeStruct(), int value = 0&gt;</code></p>
<empty-line/><p>После объявления шаблона следует код шаблона, в качестве которого выступает функция либо класс. В этом коде вместо имен типов и числовых значений можно подставлять имена параметров. Конкретные типы и значения, подставляемые в эти параметры, станут известны после инстанциирования шаблона, под которым понимается объявление экземпляра шаблона с заданными типами.</p>
<cite><p><strong>Инстанциирование шаблона</strong> – это объявление экземпляра шаблона с заданными типами.</p>
</cite><p>Инстанциирование шаблона может быть явным и неявным. При явном инстанциировании типы параметров шаблона объявляются, а при неявном – выводятся, исходя из типов входных аргументов. Пример объявления шаблонов и их инстанциирование представлены в Листинг 23.</p>
<subtitle><emphasis>Листинг 23. Объявление шаблона и его инстанциирование</emphasis></subtitle><p><code>template&lt;typename type, int size = 1&gt;  // (1)</code></p>
<p><code>class StaticArray</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  type array[size];</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template &lt;typename TYPE&gt;          // (2)</code></p>
<p><code>TYPE Sum(TYPE s2, TYPE s3)</code></p>
<p><code>{</code></p>
<p><code>  return s2 + s3;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  StaticArray&lt;int, 1&gt; someArray;  // (3)</code></p>
<empty-line/><p><code>  int a = 0; double x = 8;</code></p>
<p><code>  Sum(a, a);                      // (4)</code></p>
<p><code>  Sum&lt;double&gt; (a, x);             // (5)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен шаблон класса, в строке 2 объявлен шаблон функции. В строке 3 производится явное инстанциирование шаблона класса, типами параметров выступают int и числовое значение. В строке 4 производится неявное инстанциирование шаблона функции, тип параметра шаблона здесь будет int, который выводится из типа входного аргумента. В строке 5 производится явное инстанциирование; оно здесь необходимо, потому что из типов входных аргументов нельзя однозначно определить, какой тип параметра должен использоваться в шаблоне.</p>
<empty-line/><p>Вообще, шаблоны в C++ – это обширная тема, заслуживающая отдельной книги, поэтому изложить ее полностью не представляется возможным. Для лучшего понимания дальнейшего материала, кроме уже изложенных базовых понятий, рекомендуется ознакомиться со следующими темами: шаблоны с переменным числом параметров; частичная специализация шаблонов; автоматический вывод типов<a l:href="#n16" type="note">17</a>.</p>
<p>Программирование с использованием шаблонов, или, как его еще называют, метапрограммирование, достаточно сложное, поскольку предполагает высокий уровень абстракции в сочетании с неявным генерированием кода на этапе компиляции. Здесь используется другая парадигма, которая очень отличается от привычного объектно-ориентированного подхода; по своей природе шаблоны ближе к функциональному программированию. Однако именно благодаря указанным особенностям они позволяют легко и естественно решать многие задачи, в которых использование классических средств C++ порождает немало проблем.</p>
<p>Применительно к нашей теме, т. е. проектированию обратных вызовов, с помощью шаблонов можно реализовать множество интересных вещей, как это будет показано в следующих главах. Начнем с синхронных вызовов, как наиболее простых.</p>
</section><section><title><p>4.2. Синхронные вызовы</p>
</title><section><title><p>4.2.1. Инициатор</p>
</title><p>Проанализируем различные реализации инициатора синхронных вызовов (Листинг 24):</p>
<subtitle><emphasis>Листинг 24. Реализации инициатора для синхронных вызовов</emphasis></subtitle><p><code>class Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void callbackHandler(int eventID);</code></p>
<p><code>  void operator() (int eventID);</code></p>
<p><code>};</code></p>
<empty-line/><p><code>using ptr_callback = void(*) (int, void*);</code></p>
<p><code>using ptr_callback_static = void(*) (int, Executor*);</code></p>
<p><code>using ptr_callback_method = void(Executor::*)(int);</code></p>
<empty-line/><p><code>void run(ptr_callback ptrCallback, void* contextData = nullptr)  // (1)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  ptrCallback(eventID, contextData);</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void run(ptr_callback_static ptrCallback, Executor* contextData = nullptr)  // (2)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  ptrCallback(eventID, contextData);</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void run(Executor* ptrClientCallbackClass, ptr_callback_method ptrClientCallbackMethod)  // (3)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  (ptrClientCallbackClass-&gt;*ptrClientCallbackMethod)(eventID);</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void run(Executor callbackHandler)  // (4)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  callbackHandler(eventID);</code></p>
<p><code>}</code></p>
<empty-line/><p>Можно заметить, что все реализации, по сути, одинаковы, отличаются только типы и количество входных аргументов. Поэтому, можно попытаться сделать шаблон. Возьмем наиболее простой случай, когда функция на вход принимает только один параметр (Листинг 25):</p>
<subtitle><emphasis>Листинг 25. Шаблон для инициатора синхронного вызова</emphasis></subtitle><p><code>template &lt;typename CallbackArgument&gt;</code></p>
<p><code>void run(CallbackArgument callbackHandler)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  //Some actions</code></p>
<p><code>  callbackHandler(eventID);</code></p>
<p><code>}</code></p>
<empty-line/><p>Получившийся шаблон подходит для реализации вызовов с помощью функциональных объектов (в Листинг 25 это строка номер 4), а также для лямбда-выражений. В последнем случае в качестве типа аргумента будет подставлен тип лямбда-выражения, определяемый компилятором.</p>
<p>Что же нам делать для остальных реализаций? Для указателей на функцию и указателей на статический метод (строки 1 и 2) можно сделать отдельный шаблон с двумя параметрами (Листинг 26):</p>
<subtitle><emphasis>Листинг 26. Шаблон для инициатора с двумя параметрами</emphasis></subtitle><p><code>template &lt;typename CallbackArgument, typename Context&gt;</code></p>
<p><code>void run(CallbackArgument callbackHandler, Context* context)</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  //Some actions</code></p>
<p><code>  callbackHandler(eventID, context);</code></p>
<p><code>}</code></p>
<empty-line/><p>Однако такое решение противоречит идее обобщенного кода: для нового типа данных мы реализуем новый код, который дублирует предыдущий, за исключением самого вызова. Как следствие, если в коде инициатора нужно сделать изменения, их придется переносить на все объявленные функции. Но это еще не все: указанное решение не покрывает случая использования указателей на метод-член класса, синтаксис вызова которого отличается от синтаксиса вызова внешней функции. Таким образом, придется реализовать еще один шаблон функции для вызова метода класса. При этом он должен будет иметь другое имя, иначе возникнет конфликт с предыдущим определением: количество входных параметров одинаково, и компилятор не знает, какую реализацию шаблона подставлять при инстанциировании.</p>
<p>Вот если бы мы могли для всех аргументов использовать единый общий параметр, тогда все реализации могли быть описаны с помощью одного единственного шаблона. Решить эту задачу можно путем преобразования вызовов.</p>
</section><section><title><p>4.2.2. Преобразование вызовов</p>
</title><p>Для преобразования вызовов используется функциональный объект, в котором хранятся данные, необходимые для осуществления обратного вызова. Объявляется перегруженный оператор, который принимает информацию вызова. Реализация оператора выполняет требуемый вызов, передавая ему на вход полученную информацию вызова и, дополнительно, хранимые данные<a l:href="#n17" type="note">18</a>.</p>
<p>Вначале рассмотрим вызовы через указатели на функцию. Создадим шаблон для функционального объекта, в котором будем хранить указатель на функцию и контекст. Перегрузим оператор вызова функции, в реализации которого по хранимому указателю вызовем функцию-обработчик и передадим ей хранимый контекст (Листинг 27).</p>
<subtitle><emphasis>Листинг 27. Функциональный объект для вызова функции с передачей контекста</emphasis></subtitle><p><code>template&lt;typename Function, typename Context&gt;  // (1)</code></p>
<p><code>class CallbackConverter  // (2)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  CallbackConverter (Function argFunction = nullptr, Context argContext = nullptr)  // (3)</code></p>
<p><code>  {</code></p>
<p><code>    ptrFunction = argFunction; context = argContext;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void operator() (int eventID)      // (4)</code></p>
<p><code>  {</code></p>
<p><code>     ptrFunction(eventID, context);  // (5)</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  Function ptrFunction;  // (6)</code></p>
<p><code>  Context context;       // (7)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен шаблон с двумя параметрами – тип указателя на функцию и тип для контекста. В строке 2 объявлено имя класса. В строке 3 объявлен конструктор, который будет сохранять требуемые значения – указатель на функцию и указатель на контекст, переменные для хранения объявлены в строках 6 и 7. В строке 4 осуществляется перегрузка оператора вызова функции, который делает обратный вызов, передавая информацию и сохраненный контекст.</p>
<p>Рассмотренный шаблон также будет работать для указателей на статический метод класса, только необходимо объявить соответствующие типы указателей.</p>
<p>Для указателей на метод-член класса сделаем специализацию шаблона, как это показано в Листинг 28.</p>
<subtitle><emphasis>Листинг 28. Функциональный объект для вызова метода класса</emphasis></subtitle><p><code>template&lt;typename ClassName&gt;  // (1)</code></p>
<p><code>class CallbackConverter &lt;void(ClassName::*)(int), ClassName&gt;  // (2)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  using ClassMethod = void(ClassName::*)(int);  // (3)</code></p>
<empty-line/><p><code>  CallbackConverter(ClassMethod methodPointer = nullptr, ClassName* classPointer = nullptr)  // (4)</code></p>
<p><code>  {</code></p>
<p><code>    ptrClass = classPointer; ptrMethod = methodPointer;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void operator()(int eventID)       // (5)</code></p>
<p><code>  {</code></p>
<p><code>    ptrClass-&gt;*ptrMethod)(eventID);  // (6)</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  ClassName* ptrClass;    // (7)</code></p>
<p><code>  ClassMethod ptrMethod;  // (8)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен шаблон с параметром – именем класса. В строке 2 объявлена специализация шаблона из Листинг 27. Именно эта специализация будет выбрана компилятором, если шаблон инстанциируется указателем на метод класса и указателем на класс. В строке 3 объявлен тип – указатель на метод класса. Этот тип выводится из имени класса, поэтому в шаблоне одного параметра – имени класса – будет достаточно. В строке 4 объявляется конструктор, который будет сохранять требуемые значения – указатель на экземпляр класса и указатель на метод, переменные для хранения объявлены в строках 7 и 8. В строке 5 перегружается оператор вызова функции, который вызывает метод класса.</p>
</section><section><title><p>4.2.3. Исполнитель</p>
</title><p>Итак, определив объекты для преобразования вызовов, мы теперь можем использовать в шаблоне-инициаторе, определенном в Листинг 25 п. 4.2.1, любые типы аргументов обратного вызова. Пример приведен в Листинг 29.</p>
<subtitle><emphasis>Листинг 29. Исполнитель для шаблона-инициатора синхронного вызова</emphasis></subtitle><p><code>class Executor  // (1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  static void staticCallbackHandler(int eventID, Executor* executor) {}</code></p>
<p><code>  void callbackHandler(int eventID) {}</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>void ExternalHandler(int eventID, void* somePointer)</code></p>
<p><code>{</code></p>
<p><code>  Executor* ptrClass = (Executor*)somePointer;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  Executor executor;</code></p>
<p><code>  int capturedValue = 0;</code></p>
<empty-line/><p><code>  // (2) External function</code></p>
<p><code>  using FunctionPointer = void(*)(int, void*);</code></p>
<p><code>  using FunctionConverter = CallbackConverter&lt;FunctionPointer, void*&gt;;</code></p>
<p><code>  run(FunctionConverter(ExternalHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // (3) Static method</code></p>
<p><code>  using StaticPointer = void(*)(int, Executor*);</code></p>
<p><code>  using StaticConverter = CallbackConverter&lt;StaticPointer, Executor*&gt;;</code></p>
<p><code>  run(StaticConverter(Executor::staticCallbackHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // (4) Member merthod</code></p>
<p><code>  using MethodPointer = void(Executor::*)(int);</code></p>
<p><code>  using MethodConverter = CallbackConverter&lt;MethodPointer, Executor&gt;;</code></p>
<p><code>  run(MethodConverter(&amp;Executor::callbackHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // (5) Functional object</code></p>
<p><code>  run(executor);</code></p>
<empty-line/><p><code>  // (6) lambda-expression</code></p>
<p><code>  auto lambda = [capturedValue](int eventID) {/*it will be called by initiator*/};</code></p>
<p><code>  run(lambda);</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен класс исполнителя, в котором определены все необходимые типы вызовов: статический метод, метод-член, перегруженный оператор.  Для вызовов 2, 3 и 4 в качестве аргумента передается функциональный объект для преобразования, который инстанциируется соответствующими типами. В остальных случаях нужный аргумент передается непосредственно, преобразования вызовов там не нужно. При использовании лямбда-выражения (строка 6) компилятор неявно определит его тип и подставит его в функцию шаблона-инициатора как аргумент.</p>
<empty-line/><p>При использовании преобразования вызовов можно использовать сокращенную запись без дополнительного объявления промежуточных типов, в этом случае код получается более компактным, но более запутанным (см. Листинг 30)</p>
<subtitle><emphasis>Листинг 30. Преобразование вызовов без объявления промежуточных </emphasis><strong><emphasis>типов</emphasis></strong></subtitle><p><code>// (2) External function</code></p>
<p><code>run(CallbackConverter&lt;void(*)(int, void*), void*&gt;(ExternalHandler, &amp;executor));</code></p>
<empty-line/><p><code>// (3) Static method</code></p>
<p><code>run(CallbackConverter&lt;void(*)(int, Executor*), Executor*&gt;(Executor::staticCallbackHandler, &amp;executor));</code></p>
<empty-line/><p><code>// (4) Member merthod</code></p>
<p><code>run(CallbackConverter&lt;void(Executor::*)(int), Executor&gt;(&amp;Executor::callbackHandler , &amp;executor));</code></p>
<empty-line/><p><code>// (6) lambda-expression</code></p>
<p><code>run([capturedValue](int eventID) {/*it will be called by initiator*/});</code></p>
</section></section><section><title><p>4.3. Вызовы в алгоритмах</p>
</title><section><title><p>4.3.1. Описание проблемы</p>
</title><p>Алгоритмы – краеугольный камень информатики, они встречаются практически во всех ее разделах. Таким образом, проектирование и разработка алгоритмов – одна из важнейших задач как в теоретической науке, так и в инженерной практике.</p>
<p>В реализации алгоритмов одной из трудностей, встающей перед разработчиком, является адаптация для конкретной структуры данных. Это связано с тем, что алгоритмы задают последовательность операций, но не определяют данные, с которыми работают. Предполагается, что алгоритм работает с любой структурой данных.</p>
<p>Например, предположим, что мы написали код для алгоритма сортировки. Естественно предположить, что он будет сортировать числа. Но вот появилась новая задача: отсортировать строки. По сравнению с исходной реализацией у нас теперь другая структура данных (строки) и новые правила сравнения (строки сравниваются совсем не так, как числа). А ведь в будущем, возможно, появятся более сложные случаи – например, сортировка структур по отдельным полям… Как написать универсальный код, работающий с любыми типами данных?</p>
</section><section><title><p>4.3.2. Параметризация типов</p>
</title><p>Обозначенная выше проблема в рамках параметрического полиморфизма решается просто: код оформляется в виде шаблона, параметрами шаблона выступают типы данных. При инстанциировании шаблона генерируется код, в который подставляются соответствующие типы.</p>
<p>Поясним сказанное на примере. Предположим, мы реализовали алгоритм сортировки пузырьком (Листинг 31).</p>
<subtitle><emphasis>Листинг 31. Сортировка массива методом пузырька</emphasis></subtitle><p><code>void sort_bubble(int* data, size_t size)</code></p>
<p><code>{</code></p>
<p><code>  for (size_t i = 0; i &lt; size – 1; i++)</code></p>
<p><code>  {</code></p>
<p><code>    for (size_t j = 0; j &lt; size – i – 1; j++)</code></p>
<p><code>    {</code></p>
<p><code>      if (data[j + 1] &lt; data[j])</code></p>
<p><code>      {</code></p>
<p><code>        int temp = data[j];</code></p>
<p><code>        data[j] = data[j + 1];</code></p>
<p><code>        data[j + 1] = temp;</code></p>
<p><code>      }</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
<empty-line/><p>Описанный код работает с числами. Параметризуем типы (Листинг 32):</p>
<subtitle><emphasis>Листинг 32. Параметризация типов для сортировки пузырьком</emphasis></subtitle><p><code>template &lt;typename Data&gt;                   // (1)</code></p>
<p><code>void sort_bubble(Data* data, size_t size)  // (2)</code></p>
<p><code>{</code></p>
<p><code>  for (size_t i = 0; i &lt; size – 1; i++)</code></p>
<p><code>  {</code></p>
<p><code>    for (size_t j = 0; j &lt; size – i – 1; j++)</code></p>
<p><code>    {</code></p>
<p><code>      if (data[j + 1] &lt; data[j])</code></p>
<p><code>      {</code></p>
<p><code>        Data temp = data[j]; // (3)</code></p>
<p><code>        data[j] = data[j + 1];</code></p>
<p><code>        data[j + 1] = temp;</code></p>
<p><code>      }</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
<empty-line/><p>По сравнению с предыдущим листингом изменений здесь совсем немного: в строке 1 объявлен параметр шаблона для типа данных, в реализации функции вместо типа данных подставляется параметр шаблона (строки 2 и 3). Теперь мы можем делать сортировку для любого типа данных: мы просто вызываем функцию и передаем ей требуемую переменную-массив, а компилятор сгенерирует код для соответствующего массива.</p>
</section><section><title><p>4.3.3. Объявление предикатов</p>
</title><p>После описанной модификации первоначального кода у нас остается одна проблема: как выполнять операции сравнения для нечисловых данных, например, структур? Ведь алгоритм не знает, да и не должен знать, по каким правилам нужно их сравнивать. Выход очевидный – делегировать эти операции создателю данных. Для этого будем использовать обратный вызов «вычисление по запросу» (п. 1.2.2). Параметрами вызова будут экземпляры данных, а возвращать он будет результат сравнения. Оформленный таким образом вызов называется предикатом.</p>
<cite><p><strong>Предикат </strong>– это выражение, принимающее одну или более величину и возвращающее результат булевого типа.</p>
</cite><p>Объявим предикат как дополнительный параметр шаблона (Листинг 33).</p>
<subtitle><emphasis>Листинг 33. Шаблон с объявлением предиката</emphasis></subtitle><p><code>template &lt;typename Data, typename Predicate&gt;              // (1)</code></p>
<p><code>void sort_bubble(Data* data, size_t size, Predicate less) // (2)</code></p>
<p><code>{</code></p>
<p><code>  for (size_t i = 0; i &lt; size – 1; i++)</code></p>
<p><code>  {</code></p>
<p><code>    for (size_t j = 0; j &lt; size – i – 1; j++)</code></p>
<p><code>    {</code></p>
<p><code>      if (less (data[j + 1], data[j])) // (3)</code></p>
<p><code>      {</code></p>
<p><code>        Data temp = data[j];</code></p>
<p><code>        data[j] = data[j + 1];</code></p>
<p><code>        data[j + 1] = temp;</code></p>
<p><code>      }</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
<empty-line/><p>По сравнению с предыдущим кодом из Листинг 32 изменения здесь следующие: в объявлении шаблона (строка 1) объявлен дополнительный параметр – предикат, в функции шаблона (строка 2) предикат объявляется как дополнительный входной параметр, в строке 3 вместо операции сравнения происходит вычисление предиката.</p>
<p>В качестве предикатов могут использоваться:</p>
<p>• глобальные функции;</p>
<p>• статические функции класса;</p>
<p>• перегруженные операторы;</p>
<p>• лямбда-выражения.</p>
<p>В Листинг 34 продемонстрировано использование предикатов различных типов.</p>
<subtitle><emphasis>Листинг 34. Сортировка данных с использованием предикатов различных типов</emphasis></subtitle><p><code>struct DBRecord  // (1)</code></p>
<p><code>{</code></p>
<p><code>  char firstName[50];</code></p>
<p><code>  char lastName[50];</code></p>
<p><code>};</code></p>
<empty-line/><p><code>bool CompareByFirstName(const DBRecord&amp; rec1, const DBRecord&amp; rec2)  // (2)</code></p>
<p><code>{</code></p>
<p><code>  return strcmp(rec1.firstName, rec2.firstName) &lt; 0;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>bool CompareByLastName(const DBRecord&amp; rec1, const DBRecord&amp; rec2)  // (3)</code></p>
<p><code>{</code></p>
<p><code>  return strcmp(rec1.lastName, rec2.lastName) &lt; 0;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>class SortRules  // (4)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  enum {SORT_ASC = 1, SORT_DESC = 2} sortDirect;             // (5)</code></p>
<p><code>  enum { SORT_FIRST_NAME = 1, SORT_LAST_NAME = 2 } sortWhat; // (6)</code></p>
<empty-line/><p><code>  bool operator () (const DBRecord&amp; rec1, const DBRecord&amp; rec2) const // (7)</code></p>
<p><code>  {</code></p>
<p><code>    if (sortDirect == SORT_ASC)</code></p>
<p><code>    {</code></p>
<p><code>      if (sortWhat == SORT_FIRST_NAME)</code></p>
<p><code>      {</code></p>
<p><code>        return strcmp(rec1.firstName, rec2.firstName) &lt; 0;</code></p>
<p><code>      }</code></p>
<p><code>    else</code></p>
<p><code>    {</code></p>
<p><code>      return strcmp(rec1.lastName, rec2.lastName) &lt; 0;</code></p>
<p><code>    }</code></p>
<p><code>    }</code></p>
<p><code>    else</code></p>
<p><code>    {</code></p>
<p><code>      if (sortWhat == SORT_FIRST_NAME)</code></p>
<p><code>      {</code></p>
<p><code>        return strcmp(rec1.firstName, rec2.firstName) &gt; 0;</code></p>
<p><code>      }</code></p>
<p><code>      else</code></p>
<p><code>      {</code></p>
<p><code>        return strcmp(rec1.lastName, rec2.lastName) &gt; 0;</code></p>
<p><code>      }</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>DBRecord dbRecArray[10];  // (8)</code></p>
<p><code>//Read from database</code></p>
<empty-line/><p><code>sort_bubble(dbRecArray, 10, CompareByFirstName); // (9)</code></p>
<p><code>sort_bubble(dbRecArray, 10, CompareByLastName);  // (10)</code></p>
<empty-line/><p><code>sort_bubble(dbRecArray, 10, [](const DBRecord&amp; rec1, const DBRecord&amp; rec2)  // (11)</code></p>
<p><code>{</code></p>
<p><code>return strcmp(rec1.firstName, rec2.firstName) &lt; 0;</code></p>
<p><code>});</code></p>
<p><code>sort_bubble(dbRecArray, 10, [](const DBRecord&amp; rec1, const DBRecord&amp; rec2)  // (12)</code></p>
<p><code>{</code></p>
<p><code>return strcmp(rec1.lastName, rec2.lastName) &lt; 0;</code></p>
<p><code>});</code></p>
<empty-line/><p><code>SortRules rules; // (13)</code></p>
<p><code>rules.sortWhat = SortRules::SORT_LAST_NAME;  // (14)</code></p>
<p><code>rules.sortDirect = SortRules::SORT_ASC;      // (15)</code></p>
<p><code>sort_bubble(dbRecArray, 10, rules);          // (16)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 8 объявлен массив структур, сами структуры объявлены в строке 1 (предположим, что это записи базы данных). В строке 9 и 10 происходит сортировка массива с использованием предикатов в виде внешней функции, в строках 11 и 12 – в виде лямбда-выражений.</p>
<p>В строке 13 объявлен предикат как экземпляр класса. Если посмотреть объявление класса (строка 4), то можно увидеть, что он позволяет осуществлять настройку правил: в строке 5 имеется переменная для настройки порядка сортировки (возрастание либо убывание), в строке 6 имеется переменная для настройки поля сортировки. В строке 7 реализован перегруженный оператор, который в соответствии с настроенными правилами вычисляет, является ли первый элемент меньше второго. В строках 14 и 15 производится настройка предиката, в строке 16 – сортировка в соответствии с заданными правилами.</p>
</section><section><title><p>4.3.4. Предикаты по умолчанию</p>
</title><p>Итак, мы рассмотрели, как с помощью предикатов реализуется операция вычисления меньшего из двух элементов. Но далеко не всегда требуется сортировать сложные структуры данных, зачастую это всего лишь обычные числовые значения. В этом случае придется объявлять предикат с тривиальной реализацией (сравнить два числа). Может также случиться, что у нас в объявлении элемента данных уже реализован перегруженный оператор сравнения, тогда в предикате придется дублировать его код. Всего этого можно избежать, если объявить предикат, который будет использоваться по умолчанию. Реализация приведена в Листинг 35.</p>
<subtitle><emphasis>Листинг 35. Шаблон с предикатом по умолчанию</emphasis></subtitle><p><code>template &lt;typename Data&gt;  // (1)</code></p>
<p><code>struct default_less</code></p>
<p><code>{</code></p>
<p><code>  bool operator()(const Data&amp; x, const Data&amp; y)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>    return x &lt; y;</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template &lt;typename Data, typename Predicate = default_less&lt;Data&gt;&gt;        // (3)</code></p>
<p><code>void sort_bubble(Data* data, size_t size, Predicate less = Predicate())  // (4)</code></p>
<p><code>{</code></p>
<p><code>  for (size_t i = 0; i &lt; size – 1; i++)</code></p>
<p><code>  {</code></p>
<p><code>    for (size_t j = 0; j &lt; size – i – 1; j++)</code></p>
<p><code>    {</code></p>
<p><code>      if (less (data[j + 1], data[j]))</code></p>
<p><code>      {</code></p>
<p><code>        Data temp = data[j];</code></p>
<p><code>        data[j] = data[j + 1];</code></p>
<p><code>        data[j + 1] = temp;</code></p>
<p><code>      }</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен шаблон для структуры, реализующей предикат сравнения. В этой структуре перегружен оператор (строка 2), который возвращает результат сравнения двух аргументов. Он будет корректно работать как для чисел, так и для объектов, в которых перегружен оператор «меньше».</p>
<p>В строке 3 объявлен шаблон для функции сортировки. Первый параметр шаблона – это тип данных, которые необходимо сортировать, а второй параметр – это тип предиката. По умолчанию типом предиката является структура, объявленная выше, которая инстанциируется соответствующим типом данных.</p>
<p>В строке 4 объявлена функция шаблона. Первый параметр здесь – это данные для сортировки, а второй параметр – предикат для вычисления меньшего элемента. Если при вызове функции предикат не задан, то в качестве значения по умолчанию будет подставлена переменная – экземпляр структуры, объявленной в строке 1. Инстанциироваться эта структура будет типом <strong>Data</strong>, переданным как первый параметр шаблона.</p>
<empty-line/><p>Итак, на примере алгоритма сортировки мы рассмотрели, как реализуются предикаты для выбора меньшего элемента из двух. Подобным образом можно реализовать множество других операций: сравнения, сложения, вычисления хэш-суммы и т. п. Таким образом, предикаты предлагают удобный способ реализации арифметико-логических операций с нечисловыми типами данных. Частично снимается проблема монолитной архитектуры при использовании функциональных объектов: мы можем реализовать любое количество нужных объектов и подставлять их в шаблон по мере необходимости<a l:href="#n18" type="note">19</a>. И в заключение отметим, что концепция предикатов широко используется в реализации алгоритмов стандартной библиотеки STL.</p>
</section></section><section><title><p>4.4. Асинхронные вызовы</p>
</title><section><title><p>4.4.1. Инициатор</p>
</title><p>Также, как мы делали при анализе синхронных вызовов, проанализируем различные реализации инициатора асинхронных вызовов (Листинг 36, некоторые фрагменты кода пропущены, чтобы не загромождать описание).</p>
<subtitle><emphasis>Листинг 36. Реализации инициатора асинхронных вызовов для различных типов аргументов</emphasis></subtitle><p><code>class Executor;</code></p>
<empty-line/><p><code>class CallbackHandler</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void operator() (int eventID);</code></p>
<p><code>};</code></p>
<empty-line/><p><code>//Pointer to function</code></p>
<p><code>class Initiator1</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  using ptr_callback = void(*) (int, void*);</code></p>
<p><code>  void setup(ptr_callback pPtrCallback, void* pContextData) ;</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  ptr_callback ptrCallback = nullptr;</code></p>
<p><code>  void* contextData = nullptr;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>//Pointer to the class static method</code></p>
<p><code>class Initiator2</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  using ptr_callback_static = void(*) (int, Executor*);</code></p>
<p><code>  void setup(ptr_callback_static pPtrCallback, Executor* pContextData) ;</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>      ptr_callback_static ptrCallback = nullptr;</code></p>
<p><code>      Executor* contextData = nullptr;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>//Pointer to the class member method</code></p>
<p><code>class Initiator3</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  using ptr_callback_method = void(Executor::*)(int);</code></p>
<empty-line/><p><code>  void setup(Executor* argCallbackClass, ptr_ callback_method argCallbackMethod);</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  Executor* ptrCallbackClass = nullptr;</code></p>
<p><code>  ptr_ callback_method ptrCallbackMethod = nullptr;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>//Functional object</code></p>
<p><code>class Initiator4</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void setup(const CallbackHandler&amp; callback);</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  CallbackHandler callbackObject;</code></p>
<p><code>};</code></p>
<empty-line/><p>Аналогично синхронным вызовам, можно заметить, что все реализации по своей сути практически одинаковы, отличается только тип и количество аргументов. Попробуем для класса сделать шаблон (Листинг 37).</p>
<subtitle><emphasis>Листинг 37. Шаблон для инициатора асинхронного вызова</emphasis></subtitle><p><code>template&lt;typename CallbackArgument&gt;</code></p>
<p><code>class Initiator</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void setup(const CallbackArgument&amp; argument)</code></p>
<p><code>  {</code></p>
<p><code>      callbackHandler = argument;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()</code></p>
<p><code>  {</code></p>
<p><code>    int eventID = 0;</code></p>
<p><code>    //Some actions</code></p>
<p><code>    callbackHandler(eventID);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  CallbackArgument callbackHandler;</code></p>
<p><code>};</code></p>
<empty-line/><p>Получившийся шаблон подходит для реализации с использованием функционального объекта. Для реализаций с использованием указателей на функцию, указателей на статический метод и на метод-член класса можно использовать шаблон для преобразования вызовов (см. п. 4.2.2). А вот реализация с помощью лямбда-выражений здесь работать не будет, потому что хранить лямбда-выражение как аргумент, подобно обычной переменной, нельзя. Рассмотрим этот вопрос подробнее.</p>
</section><section><title><p>4.4.2. Хранение лямбда-выражений</p>
</title><p>Почему хранение лямбда-выражений является проблемой?</p>
<p>При объявлении лямбда-выражения компилятор генерирует функциональный объект, который называется объект-замыкание (closure type). Этот объект хранит в себе захваченные переменные и имеет перегруженный оператор вызова функции. Сигнатура оператора повторяет сигнатуру лямбда-выражения, а в теле оператора размещается код выражения. Пример объекта-замыкания приведен в Листинг 38.</p>
<subtitle><emphasis>Листинг 38. Лямбда-выражение и объект-замыкание</emphasis></subtitle><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int capture = 0;</code></p>
<p><code>  [capture](int eventID) {/*this is a body of lambda*/};</code></p>
<empty-line/><p><code>  //The following object will be generated implicitly by the compiler from lambda declaration</code></p>
<p><code>  class Closure</code></p>
<p><code>  {</code></p>
<p><code>  public:</code></p>
<p><code>    Closure(int value) :capture(value) {}</code></p>
<empty-line/><p><code>    void operator() (int eventID)</code></p>
<p><code>    {</code></p>
<p><code>      /*this is a body of lambda*/</code></p>
<p><code>    }</code></p>
<empty-line/><p><code>    int capture; //captured value</code></p>
<p><code>  };</code></p>
<p><code>}</code></p>
<empty-line/><p>Как видно из примера, в зависимости от состава захваченных переменных объект-замыкание будет иметь различный тип. То есть, этот тип заранее неизвестен, он будет сгенерирован компилятором. По этой причине тип лямбда-выражения не имеет заранее определенного имени, и мы не можем просто объявить переменную соответствующего типа и присвоить ей значение, как мы делаем, например, в случае использования числовых переменных.</p>
<p>Если лямбда-выражение не захватывает переменные, то стандарт допускает преобразование лямбда-выражения к указателю на функцию. В этом случае объект-замыкание не содержит переменных, что позволяет код лямбда-выражения оформить в виде статической функции и объявить соответствующий оператор преобразования. Таким образом, появляется возможность сохранить лямбда-выражение в переменной типа "указатель на функцию", как показано в Листинг 39.</p>
<subtitle><emphasis>Листинг 39. Объект-замыкание с преобразованием в указатель на функцию</emphasis></subtitle><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  [](int eventID) {/*this is a body of lambda*/};  // (1)</code></p>
<empty-line/><p><code>  //The following object will be generated implicitly by the compiler from lambda declaration</code></p>
<p><code>  class Closure  // (2)</code></p>
<p><code>  {</code></p>
<p><code>  public:</code></p>
<p><code>    void operator() (int eventID)  // (3)</code></p>
<p><code>    {</code></p>
<p><code>      call_invoker(eventID);</code></p>
<p><code>    }</code></p>
<empty-line/><p><code>    static void  call_invoker(int eventID) { /*this is a body of lambda*/ }  // (4)</code></p>
<empty-line/><p><code>    using function_pointer = void(*)(int);  // (5)</code></p>
<empty-line/><p><code>    operator function_pointer() const       // (6)</code></p>
<p><code>    {</code></p>
<p><code>      return call_invoker;</code></p>
<p><code>    }</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>  //Conversion the closure object to the function pointer</code></p>
<p><code>  Closure cl;  // (7)</code></p>
<p><code>  using pointer_to_function = void(*)(int);  // (8)</code></p>
<p><code>  pointer_to_function fptr = cl;             // (9)</code></p>
<empty-line/><p><code>  //Conversion a lambda to the function pointer</code></p>
<p><code> fptr = [](int eventID) {/*this is a body of lambda*/};  // (10)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлено лямбда-выражение, в строке 2 объявлен объект-замыкание. Подчеркнем: этот объект здесь всего лишь для демонстрации, чтобы показать, как он будет сгенерирован компилятором. В реальном коде такой объект объявлять не нужно, компилятор его создаст при объявлении лямбда-выражения.</p>
<p>В строке 3 объявлен перегруженный оператор, который вызывает статическую функцию 4. В той функции размещается код лямбда-выражения.</p>
<p>В строке 5 объявлен тип указателя на функцию, в строке 6 объявлен оператор преобразования типа. Реализация оператора возвращает указатель на статическую функцию 4.</p>
<p>В строках 7–9 показано, как осуществляется преобразование функционального объекта к указателю на функцию. В строке 7 объявлен объект-замыкание, в строке 8 объявлен тип указателя на функцию. В строке 9 объявляется переменная этого типа и вызывается перегруженный оператор присваивания 6, который возвращает указатель на функцию. Теперь в переменной <strong>fptr</strong> будет храниться указатель на статическую функцию, которая была объявлена в соответствующем функциональном объекте.</p>
<p>В строке 10 продемонстрировано преобразование лямбда-выражения к указателю на функцию. Все действия, описанные выше с использованием функционального объекта, будут неявно сгенерированы компилятором.</p>
<p>Итак, если лямбда-выражение не захватывает переменные, то сохранить его как аргумент достаточно просто: объявляется указатель на функцию, которому присваивается соответствующее выражение. Однако в случае захвата переменных ситуация меняется. Теперь в объекте-замыкании будут храниться захваченные переменные, и компилятор не может код лямбда-выражения разместить в статической функции, ведь статическая функция не имеет доступа к членам класса. Поэтому указанный код вставляется в функцию-член класса. Казалось бы, почему не объявить указатель на функцию-член класса и присвоить ему значение? Проблема в том, что для этого необходимо знать тип класса, т. е. тип объекта-замыкания. А этот тип заранее неизвестен, он генерируется на этапе компиляции. Таким образом, здесь невозможно объявить указатель на метод и присвоить ему значение.</p>
<p>Если необходимо хранить лямбда-выражение в локальной переменной, можно использовать тип <strong>auto</strong>. Это означает, что компилятор подставит соответствующий тип, который будет сгенерирован из объявления лямбда-выражения (см. Листинг 40).</p>
<subtitle><emphasis>Листинг 40. Сохранение лямбда-выражения в локальной переменной</emphasis></subtitle><p><code>int capture = 10;</code></p>
<empty-line/><p><code>auto lambda = [capture](int eventID) {/*this is a body of lambda*/};</code></p>
<empty-line/><p><code>lambda(10); //lambda call</code></p>
<empty-line/><p>Однако указанный способ не будет работать, когда требуется сохранить лямбда-выражение в классе. Мы не можем объявить переменную – член класса с типом <strong>auto</strong>, потому что это означало бы объявление переменной заранее не определенного типа, что не допускается.</p>
<p>Организовать хранение лямбда-выражения внутри класса можно с помощью шаблона, в котором тип выражения будет параметризован. Однако при инстанциировании шаблона переменной, предназначенной для хранения, значение должно быть присвоено в конструкторе. Это нельзя сделать позже, потому что в объекте-замыкании, генерируемым компилятором, запрещен оператор присваивания. Это и понятно: поскольку тип каждого объявленного лямбда-выражения является уникальным, то мы не можем ему ничего присваивать, кроме самого себя.</p>
<p>Добавим в реализацию инициатора, описанного в Листинг 37 п. 4.4.1, два конструктора. Один конструктор будет с переменной – аргументом обратного вызова для инициализации члена класса. Другой конструктор будет без аргументов (конструктор по умолчанию), чтобы оставить возможность отложенной настройки (Листинг 41).</p>
<subtitle><emphasis>Листинг 41. Инициатор с дополнительными конструкторами</emphasis></subtitle><p><code>template&lt;typename CallbackArgument&gt;</code></p>
<p><code>class Initiator</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  Initiator() {}</code></p>
<p><code>  Initiator(const CallbackArgument&amp; argument) : callbackHandler(argument) {}</code></p>
<empty-line/><p><code>  void setup(const CallbackArgument&amp; argument)</code></p>
<p><code>  {</code></p>
<p><code>    callbackHandler = argument;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()</code></p>
<p><code>  {</code></p>
<p><code>    int eventID = 0;</code></p>
<p><code>    //Some actions</code></p>
<p><code>    callbackHandler(eventID);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  CallbackArgument callbackHandler;</code></p>
<p><code>};</code></p>
<empty-line/><p>Для любых типов аргументов обратного вызова, кроме лямбда-выражений, допускается использование обоих конструкторов. Для лямбда-выражений допускается использование только конструктора с аргументом, при попытке использования конструктора по умолчанию компилятор выдаст ошибку. Кроме того, в этом случае нельзя будет вызвать метод setup – также будет сгенерирована ошибка. Таким образом, использование инициатора с лямбда-выражением не предполагает динамической модификации: настройка происходит один раз в конструкторе при инстанциировании шаблона, и больше изменить ее нельзя<a l:href="#n19" type="note">20</a>.</p>
<p>А какой тип аргумента нам указывать при инстанциировании шаблона, ведь тип лямбда-выражения является анонимным? Для этой цели мы будем использовать ключевое слово <strong>decltype</strong>, которое возвращает тип объявленной переменной (см. Листинг 42).</p>
<subtitle><emphasis>Листинг 42.Инстанциирование шаблона асинхронного обратного вызова для лямбда-выражения</emphasis></subtitle><p><code>int capture = 10;</code></p>
<p><code>auto lambda = [capture](int eventID) {/*this is a body of lambda*/};</code></p>
<p><code>Initiator&lt;decltype(lambda)&gt; callbackLambda1 (lambda); // Ok, initialization in constructor</code></p>
<p><code>Initiator&lt;decltype(lambda)&gt; callbackLambda = lambda; // Ok, implicit constructor call</code></p>
<p><code>Initiator&lt;decltype(lambda)&gt; callbackLambda2;  //Error: attempting to reference a deleted function</code></p>
<p><code>callbackLambda.setup(lambda);  //Error:  ‘operator’ =  attempting to reference a deleted function</code></p>
<p><code>callbackLambda.run();</code></p>
</section><section><title><p>4.4.3. Исполнитель</p>
</title><p>В Листинг 43 приведены примеры реализации исполнителя для различных типов аргументов. Объявления класса <strong>CallbackConverter</strong> представлены в Листинг 27 и Листинг 28 п. 4.2.2, инициатор используется из Листинг 41 п. 4.4.2.</p>
<subtitle><emphasis>Листинг 43. Исполнитель для шаблона-инициатора с различными типами аргумента</emphasis></subtitle><p><code>class Executor  // (1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  static void staticCallbackHandler(int eventID, Executor* executor) {}</code></p>
<p><code>  void callbackHandler(int eventID) {}</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>void ExternalHandler(int eventID, void* somePointer) {}  // (2)</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  Executor executor;  // (3)</code></p>
<p><code>  int capturedValue = 0;</code></p>
<empty-line/><p><code>  // (4)  Pointer to the external function</code></p>
<p><code>  using PtrExtFunc = void(*) (int, void*);                                 // (5)</code></p>
<p><code>  using CallbackExtFunction = CallbackConverter&lt;PtrExtFunc, void*&gt;;        // (6)</code></p>
<p><code>  Initiator&lt;CallbackExtFunction&gt; initExtFunction;                          // (7)</code></p>
<p><code>  initExtFunction.setup(CallbackExtFunction(ExternalHandler, &amp;executor));  // (8)</code></p>
<empty-line/><p><code>  // (9) Pointer to the static method</code></p>
<p><code>  using PtrStaticMethod = void(*) (int, Executor*);  // (10)</code></p>
<p><code>  using CallbacStaticMethod = CallbackConverter&lt;PtrStaticMethod, Executor*&gt;;                // (11)</code></p>
<p><code>  Initiator&lt;CallbacStaticMethod&gt; initStaticMethod;                                          // (12)</code></p>
<p><code>  initStaticMethod.setup(CallbacStaticMethod(Executor::staticCallbackHandler, &amp;executor));  // (13)</code></p>
<empty-line/><p><code>  // (14) Pointer to the class member method</code></p>
<p><code>  using PtrMethod = void(Executor::*)(int);                                             // (15)</code></p>
<p><code>  using CallbackMemberMethod = CallbackConverter&lt;Executor, void(Executor::*)(int)&gt;;     // (16)</code></p>
<p><code>  Initiator&lt;CallbackMemberMethod&gt; initMemberMethod;  // (17)</code></p>
<p><code>  initMemberMethod.setup(CallbackMemberMethod(&amp;executor, &amp;Executor::callbackHandler));  // (18)</code></p>
<empty-line/><p><code>  // (19) Functional object</code></p>
<p><code>  Initiator&lt;Executor&gt; initFunctionObject;  // (20)</code></p>
<p><code>  initFunctionObject.setup(executor);      // (21)</code></p>
<empty-line/><p><code>  // (22) Lambda-expression</code></p>
<p><code>  auto lambda = [capturedValue](int eventID) {/*Body of lambda*/};  // (23)</code></p>
<p><code>  Initiator&lt;decltype(lambda)&gt; initLambda ( lambda);                 // (24)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен класс – исполнитель, в котором определены необходимые нам типы вызовов: статический метод, метод-член, перегруженный оператор. В строке 2 объявлена внешняя функция, в строке 3 – экземпляр исполнителя.</p>
<p>В строке 4 показан обратный вызов через указатель на функцию. Объявлен тип указателя на функцию 5, тип функционального объекта для преобразования вызова 6, инстанциирование шаблона инициатора соответствующим типом 7, настройка инициатора 8. Запуск инициатора (метод <strong>run</strong>) не показан, чтобы не загромождать описание.</p>
<p>В строке 9 показан обратный вызов через указатель на статический метод класса. Похоже на предыдущий случай, только в качестве контекста используется указатель на класс. Объявлен тип указателя на статический метод 10, тип функционального объекта для преобразования вызова 11, инстанциирование инициатора соответствующего типа 12, настройка инициатора 13.</p>
<p>В строке 14 показан обратный вызов через указатель на метод-член класса. Объявлен тип указателя на метод 15, тип функционального объекта для преобразования вызова 16, инстанциирование инициатора соответствующим типом 17, настройка инициатора 18.</p>
<p>В строке 19 показан обратный вызов с помощью функционального объекта. Инстанциирование инициатора объявлено в строке 20, настройка инициатора – в строке 21.</p>
<p>В строке 22 показан обратный вызов с помощью лямбда-выражения. В строке 23 объявлено лямбда-выражение, которое запоминается в соответствующей переменной. В строке 24 инстанциирован инициатор типом лямбда-выражения. Инициатору в конструкторе передается переменная – объект указанного выражения.</p>
<p>Для случаев, когда используется преобразование вызовов (объявления 4, 9 и 14), можно использовать сокращенные объявления без использования промежуточных деклараций. Код в этом случае получается более компактным, но менее понятным (см. Листинг 44).</p>
<subtitle><emphasis>Листинг 44. Компактный способ объявлений при использовании преобразования вызовов</emphasis></subtitle><p><code>int main</code></p>
<p><code>{</code></p>
<p><code>  Executor executor;</code></p>
<empty-line/><p><code>  // (4) Pointer to the external function</code></p>
<p><code>  Initiator&lt;CallbackConverter&lt;void(*)(int, void*), void*&gt;&gt; initExtFunction;</code></p>
<p><code>  initExtFunction.setup(CallbackConverter&lt;void(*)(int, void*), void*&gt;(ExternalHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // (9) Pointer to the static method</code></p>
<p><code>  Initiator&lt;CallbackConverter&lt;void(*)(int, Executor*), Executor*&gt;&gt; initStaticMethod;</code></p>
<p><code>  initStaticMethod.setup(CallbackConverter&lt;void(*)</code><code>(int, Executor*), Executor*&gt;</code><code>(Executor::staticCallbackHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // (14) Pointer to the class member method</code></p>
<p><code>  Initiator&lt;CallbackConverter&lt;Executor, void(Executor::*)(int)&gt;&gt; initMemberMethod;</code></p>
<p><code>  initMemberMethod.setup(CallbackConverter&lt;Executor, void(Executor::*)(int)&gt;</code><code>(&amp;executor, &amp;Executor::callbackHandler));</code></p>
<p><code>}</code></p>
<empty-line/><p>Итак, как мы видим, для каждого типа аргумента обратного вызова нам приходится объявлять соответствующий инициатор. Может быть, можно сделать так, чтобы инициатор умел работать с различными типами аргументов? Для этого нужно спроектировать универсальный аргумент, чем мы и займемся в следующей главе.</p>
</section></section><section><title><p>4.5. Универсальный аргумент</p>
</title><section><title><p>4.5.1. Динамический полиморфизм</p>
</title><p>Для реализации универсального аргумента прежде всего необходимо обеспечить динамический полиморфизм, т. е. аргумент должен изменять свой тип в зависимости от задаваемого значения<a l:href="#n20" type="note">21</a>.</p>
<p>Как решается указанная задача в объектно-ориентированном дизайне? Объявляется базовый абстрактный класс, в котором описывается интерфейс в виде набора чисто виртуальных методов. Новый тип создается путем создания наследуемого класса, в котором объявляются нужные переменные и переопределяются методы. При инициализации создается класс нужного типа, и он сохраняется в переменной – указателе на базовый класс. Мы будем использовать аналогичный подход, только наследуемые типы будут создаваться динамически, используя параметры шаблона. Указанная техника называется «стирание типов»: при назначении нового типа аргумента предыдущий сохраненный уничтожается, и его место занимает новый<a l:href="#n21" type="note">22</a>.</p>
<p>Графическое изображение стирания типов изображено на Рис. 17. Рассмотрим начальное состояние а), показанное в верхней части рисунка. Имеется некоторый класс, назовем его <strong>UniArgument</strong>. В этом классе объявлен перегруженный оператор вызова функции <emphasis>2</emphasis>. Также здесь имеется указатель <emphasis>3</emphasis> типа <strong>Callable*</strong>, который указывает на соответствующий экземпляр класса <strong>Callable</strong>. Класс <strong>Callable </strong><emphasis>4 </emphasis>объявлен внутри <strong>UniArgument </strong>и имеет виртуальный перегруженный оператор вызова функции с пустой реализацией.</p>
<p>Когда в <strong>UniArgument </strong>происходит вызов <emphasis>1</emphasis> перегруженного оператора <emphasis>2</emphasis>, последний через указатель <emphasis>3</emphasis> вызывает виртуальный перегруженный оператор класса <strong>Callable</strong>.</p>
<p>В нижней части рисунка б) показано, как назначается новый тип. Объявляется перегруженный оператор присваивания <emphasis>10</emphasis>, на входе он принимает аргумент обратного вызова 8. При вызове этого оператора старый экземпляр класса <emphasis>4</emphasis>, на который указывал указатель <emphasis>3</emphasis>, уничтожается в <emphasis>11</emphasis>, а вместо него создается новый класс <strong>CallableObject </strong><emphasis>5</emphasis>, который наследуется от <strong>Callable</strong>. Внутри класса имеется поле 7, в которое записывается переданный аргумент <emphasis>8</emphasis>, тип этого поля совпадает с типом аргумента. В <strong>CallableObject</strong> переопределяется оператор вызова функции <emphasis>6</emphasis>, который, в свою очередь, осуществляет вызов через сохраненный аргумент <emphasis>7</emphasis>. Теперь указатель <emphasis>3</emphasis> указывает на новый созданный <strong>CallableObject</strong>, и при вызове <emphasis>1</emphasis> перегруженного оператора <emphasis>2</emphasis> будет вызываться перегруженный оператор указанного класса, который и выполнит обратный вызов.</p>
<empty-line/><image l:href="#i_029.png"/><empty-line/><p><emphasis>Рис. 17. Стирание типов: а) исходное состояние; б) состояние после назначения нового типа аргумента</emphasis></p>
<empty-line/><p>Реализация рассмотренной схемы представлена в Листинг 45.</p>
<subtitle><emphasis>Листинг 45. Класс, реализующий стирание типов</emphasis></subtitle><p><code>class UniArgument  // (1)</code></p>
<p><code>{</code></p>
<p><code>private:</code></p>
<p><code>  class Callable   // (2)</code></p>
<p><code>  {</code></p>
<p><code>  public:</code></p>
<p><code>    virtual void operator()(int) = 0;         // (3)</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>  std::unique_ptr&lt;Callable&gt; callablePointer;  // (4)</code></p>
<empty-line/><p><code>  template &lt;typename ArgType&gt;</code></p>
<p><code>  class CallableObject : public Callable      // (5)</code></p>
<p><code>  {</code></p>
<p><code>  public:</code></p>
<p><code>    CallableObject(ArgType argument) : storedArgument(argument) { }  // (6)</code></p>
<empty-line/><p><code>    void operator() (int value) override  // (7)</code></p>
<p><code>    {</code></p>
<p><code>      storedArgument(value);  // (8)</code></p>
<p><code>    }</code></p>
<p><code>  private:</code></p>
<p><code>    ArgType storedArgument;   // (9)</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>public:</code></p>
<p><code>  void operator() (int value)  // (10)</code></p>
<p><code>  {</code></p>
<p><code>    callablePointer-&gt;operator()(value);  // (11)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  template &lt;typename ArgType&gt;</code></p>
<p><code>  void operator = (ArgType argument)  // (12)</code></p>
<p><code>  {</code></p>
<p><code>    callablePointer.reset(new CallableObject&lt;ArgType&gt;(argument));  // (13)</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен класс, реализующий универсальный аргумент. В строке 2 объявлен класс, который будет использоваться в качестве базового.</p>
<p>В базовом классе перегружен оператор вызова функции 3. Оператор объявлен чисто виртуальным, чтобы опустить его реализацию. Предполагается, что этот оператор будет выполнять обратный вызов, но аргумента вызова здесь нет, он будет храниться в наследуемом классе. Таким образом, реализация смысла не имеет. Более того, если, допустим, нам понадобится, чтобы оператор возвращал результат, то в нем должна присутствовать команда <strong>return</strong>, и какое тогда возвращать значение?</p>
<p>В строке 4 объявлен указатель на базовый класс, объявленный в 2.</p>
<p>В строке 5 объявлен шаблонный класс, который будет хранить переданный аргумент и вызывать его. Переменная для хранения аргумента объявлена в строке 9, тип переменной задается параметром шаблона. Аргумент назначается в конструкторе 6. Также в этом классе переопределяется оператор вызова функции 7, в котором происходит обратный вызов 8 через сохраненный аргумент.</p>
<p>В строке 10 объявлен перегруженный оператор основного класса, в котором вызывается соответствующий переопределенный оператор через указатель на базовый класс (строка 11).</p>
<p>В строке 12 объявлен шаблонный оператор присваивания, который настраивает аргумент. В реализации этого оператора 13 создается новый класс <strong>CallableObject </strong>нужного типа, в конструкторе этого класса переданный аргумент сохраняется, после чего переназначается указатель. Таким образом, при вызове оператора 10 будет вызван оператор соответствующего класса 11, и последний осуществит вызов через сохраненный аргумент.</p>
<p>Можно заметить, что универсальный аргумент не выполняет вызов сам по себе. По сути, он является своего рода оболочкой, которая перенаправляет вызов соответствующему объекту. Таким образом, у нас появляется новое понятие – объект вызова.</p>
<cite><p><strong>Объект вызова</strong> – это некоторая конструкция C++, поддерживающая интерфейс вызова в формате функции.</p>
</cite><p>В соответствии с стандартом C++ на сегодняшний день<a l:href="#n22" type="note">23</a>, в качестве объектов вызова могут использоваться следующие конструкции:</p>
<p>• функции;</p>
<p>• методы класса;</p>
<p>• классы с перегруженным оператором вызова функции;</p>
<p>• лямбда-выражения.</p>
<p>В реализациях инициатора с помощью шаблонов, рассмотренных в предыдущих главах (см. п. 4.2.1, 4.4.1), аргумент вызова совпадает с объектом вызова. При использовании универсального аргумента эти сущности будут различаться: универсальный аргумент хранит в себе объект вызова.</p>
<empty-line/><p>Итак, мы реализовали универсальный аргумент, продемонстрируем теперь, как он может использоваться для реализации обратных вызовов (Листинг 46).</p>
<subtitle><emphasis>Листинг 46. Использование универсального аргумента</emphasis></subtitle><p><code>class Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  static void staticCallbackHandler(int eventID, Executor* executor) {}</code></p>
<p><code>  void callbackHandler(int eventID) {}</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>void ExternalHandler(int eventID, void* somePointer) {}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>UniArgument argument;</code></p>
<empty-line/><p><code>Executor executor;</code></p>
<p><code>int capturedValue = 0;</code></p>
<empty-line/><p><code>using PtrExtFunc = void(*) (int, void*);</code></p>
<p><code>argument = CallbackConverter&lt;PtrExtFunc, void*&gt;(ExternalHandler, &amp;executor);                          // (1)</code></p>
<empty-line/><p><code>using PtrStaticMethod = void(*) (int, Executor*);</code></p>
<p><code>argument = CallbackConverter&lt;PtrStaticMethod, Executor*&gt;(Executor::staticCallbackHandler, &amp;executor);  //(2)</code></p>
<empty-line/><p><code>using PtrMemberMethod = void(Executor::*)(int);</code></p>
<p><code>argument = CallbackConverter&lt;PtrMemberMethod, Executor&gt;(&amp;Executor::callbackHandler, &amp;executor);       // (3)</code></p>
<empty-line/><p><code>argument = executor;  // (4)</code></p>
<empty-line/><p><code>argument = [capturedValue](int eventID) {/*Body of lambda*/};  // (5)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 аргументу присваивается указатель на функцию, для преобразования вызовов используется класс <strong>CallbackConverter</strong> из Листинг 27 п. 4.2.2. Этот класс инстанциируется соответствующими типами, в конструкторе ему передается функция <strong>ExternalHandler </strong>и контекст, в качестве которого выступает указатель на класс <strong>Executor</strong>.</p>
<p>В строке 2 аргументу присваивается указатель на статический метод класса, что, в общем-то, идентично рассмотренному предыдущему случаю.</p>
<p>В строке 3 аргументу присваивается указатель на метод-член класса, для преобразования вызовов используется класс <strong>CallbackConverter</strong> из Листинг 28 п. 4.2.2. Этот класс инстанциируется соответствующими типами, в конструкторе ему передается указатель на класс и указатель на метод класса.</p>
<p>В строке 4 аргументу присваивается функциональный объект, в строке 5 – лямбда-выражение.</p>
<p>Отметим, что в универсальном аргументе лямбда-выражение сохраняется также просто, как и любой другой тип. Это связано с тем, что как оператор присваивания (<strong>operator =</strong> класса <strong>UniArgument</strong>, Листинг 45 п. 4.5.1), так и класс для хранения аргументов вызова (<strong>CallableObject</strong>, там же) реализованы в виде шаблонов. Когда мы вызываем указанный оператор, передавая ему лямбда-выражение, компилятор неявно выведет тип параметра шаблона из переданного аргумента, подобно тому, как это происходит в шаблонной функции для синхронных вызовов. В свою очередь, внутри оператора с помощью <strong>new </strong>динамически создается экземпляр <strong>CallableObject</strong>, инстанциированный соответствующим выведенным типом. Таким образом, явно указывать тип передаваемого аргумента не требуется, компилятор выводит его сам.</p>
</section><section><title><p>4.5.2. Настройка сигнатуры</p>
</title><p>До сих пор мы предполагали, что функция, реализующая обратный вызов, имеет тип <strong>void</strong> и на вход принимает только одно значение <strong>eventID</strong>, и исходя из этого, делали обратный вызов. А если выясняется, что функция должна иметь дополнительные параметры, нам придется изменять реализацию универсального аргумента и объектов, с ним связанных? А если нам необходимы инициаторы, которые используют функции с различными сигнатурами? Теперь что, для каждой сигнатуры придется реализовать отдельный аргумент? Есть другой путь: настройка сигнатуры вызова через параметры шаблона. Для ее реализации используется частичная специализация шаблона в сочетании с переменным числом параметров (partial template specialization, variadic templates), пример представлен в Листинг 47.</p>
<subtitle><emphasis>Листинг 47. Настройка сигнатуры</emphasis></subtitle><p><code>//General specialization</code></p>
<p><code>template &lt;typename unused&gt;  // (1)</code></p>
<p><code>class function;</code></p>
<empty-line/><p><code>//Partial specialization</code></p>
<p><code>template&lt;typename Return, typename … ArgumentList &gt;  // (2)</code></p>
<p><code>class function&lt;Return(ArgumentList…)&gt;</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<empty-line/><p><code>  Return operator()(ArgumentList… arguments)  // (3)</code></p>
<p><code>  {</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлена общая специализация шаблона. Реализация класса здесь отсутствует, поскольку для каждой сигнатуры она будет различной. В строке 2 объявлен шаблон для частичной специализации, в котором два аргумента: тип возвращаемого значения и пакет параметров, передаваемых функции вызова.</p>
<p>В строке 3 объявлен перегруженный оператор, выступающий в качестве функции вызова. Сигнатура оператора содержит тип возвращаемого значения <strong>Return</strong> и пакет входных параметров <strong>arguments</strong>, которые разворачиваются в список аргументов. Таким образом, в зависимости от пакета и возвращаемого значения будет сгенерирована соответствующая специализация шаблона.</p>
<p>Описанная реализация всего лишь демонстрирует настройку сигнатуры. Практической пользы от нее немного, потому что тело перегруженного оператора пустое, и вызов осуществлен не будет. Используя описанную технику, добавим настройку сигнатуры к аргументу, реализующему стирание типов (Листинг 48).</p>
<subtitle><emphasis>Листинг 48. Стирание типов с настройкой сигнатуры</emphasis></subtitle><p><code>template &lt;typename unused&gt;</code></p>
<p><code>class UniArgument;</code></p>
<empty-line/><p><code>template&lt;typename Return, typename … ArgumentList&gt;</code></p>
<p><code>class UniArgument&lt;Return(ArgumentList…)&gt;  // (1)</code></p>
<p><code>{</code></p>
<p><code>private:</code></p>
<p><code>  struct Callable</code></p>
<p><code>  {</code></p>
<p><code>    virtual Return operator()(ArgumentList… arguments) = 0;  // (3)</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>  std::unique_ptr&lt;Callable&gt; callablePointer;</code></p>
<empty-line/><p><code>  template &lt;typename Argument&gt;</code></p>
<p><code>  struct CallableObject : Callable</code></p>
<p><code>  {</code></p>
<p><code>    Argument storedArgument;</code></p>
<empty-line/><p><code>    CallableObject(Argument argument) : storedArgument(argument) { }</code></p>
<empty-line/><p><code>    Return operator() (ArgumentList… arguments) override  // (8)</code></p>
<p><code>    {</code></p>
<p><code>      //return storedArgument(arguments…);</code></p>
<p><code>      return std::invoke(storedArgument, arguments…);     // (9)</code></p>
<p><code>    }</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>public:</code></p>
<p><code>  Return operator() (ArgumentList… arguments)        // (10)</code></p>
<p><code>  {</code></p>
<p><code>    return callablePointer-&gt;operator()(arguments…);  // (11)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  template &lt;typename Argument&gt;</code></p>
<p><code>  void operator = (Argument argument)</code></p>
<p><code>  {</code></p>
<p><code>    callablePointer.reset(new CallableObject&lt;Argument&gt;(argument));</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p>По сравнению с реализацией для фиксированной сигнатуры (Листинг 45 п. 4.5.1) изменения здесь следующие. Класс аргумента (строка 1) объявляется в виде шаблона. Параметрами шаблона выступают <strong>Return</strong> – тип значения, возвращаемого функцией, и <strong>ArgumentList</strong> – пакет параметров, определяющих типы передаваемых в функцию аргументов. При объявлении перегруженных операторов (строки 3, 8, 10), вместо конкретного типа возвращаемого значения подставляется параметр шаблона <strong>Return</strong>, вместо конкретных типов входных параметров подставляется <strong>ArgumentList</strong>. В местах, где происходит вызов оператора, пакет параметров раскрывается (строки 9 и 11), что означает, что вместо <strong>arguments</strong> будет подставлен список переменных с типами, заданными в пакете параметров.</p>
<empty-line/><p>Теперь в универсальном аргументе можно настраивать сигнатуру, как это продемонстрировано в Листинг 49.</p>
<subtitle><emphasis>Листинг 49. Использование аргумента с настройкой сигнатуры</emphasis></subtitle><p><code>void ExternalHandler1(int eventID) {/*Do something*/}            // (1)</code></p>
<p><code>int  ExternalHandler2(int eventID, int contextID) { return 0; }  // (2)</code></p>
<empty-line/><p><code>struct CallbackHandler  // (3)</code></p>
<p><code>{</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>  bool operator() (int eventID, int contextID) { return false; }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int capturedValue = 100;</code></p>
<p><code>  CallbackHandler callbackObject;           // (4)</code></p>
<empty-line/><p><code>  UniArgument&lt;void(int)&gt; argument1;         // (5)</code></p>
<p><code>  UniArgument&lt;bool(int, int)&gt; argument2;    // (6)</code></p>
<empty-line/><p><code>  argument1 = ExternalHandler1;  // (7)</code></p>
<p><code>  argument2 = ExternalHandler2;  // (8)</code></p>
<empty-line/><p><code>  argument1 = callbackObject;    // (9)</code></p>
<p><code>  argument2 = callbackObject;    // (10)</code></p>
<empty-line/><p><code>  argument1 = [capturedValue](int eventID) {/*Do something*/};                           // (11)</code></p>
<p><code>  argument2 = [capturedValue](int eventID, int contextID) { /*DoSomething*/return 0; };  // (12)</code></p>
<empty-line/><p><code>  argument1(3);               // (13)</code></p>
<p><code>  int res = argument2(4, 5);  // (14)</code></p>
<empty-line/><p><code>  return res;</code></p>
<p><code>}</code></p>
<empty-line/><p>В строках 1 и 2 объявлены две внешние функции с различными сигнатурами. В строке 3 объявлен функциональный объект, в котором перегружены операторы вызова функции с такими же сигнатурами. В строке 4 объявлен экземпляр указанного объекта.</p>
<p>В строках 5 и 6 объявлены универсальные аргументы, в которых с помощью параметров шаблона настраивается нужная сигнатура. Далее этим аргументам будут присваиваться различные объекты вызова в зависимости от заданной сигнатуры.</p>
<p>В строках 7 и 8 в аргумент передаются внешние функции. В строках 9 и 10 передается функциональный объект, у которого, в зависимости от настроенной сигнатуры будет вызван соответствующий перегруженный оператор. В строках 11 и 12 передаются лямбда-выражения. В строках 13 и 14 осуществляются вызовы в соответствии с заданной сигнатурой.</p>
</section><section><title><p>4.5.3. Вызов метода класса</p>
</title><p>В текущей реализации универсальный аргумент может работать с любыми объектами вызова, за исключением методов класса. Это связано с тем, что вызов метода класса имеет другой синтаксис, отличный от вызова функции. Как добавить поддержку вызова методов? Можно предложить следующее решение: при настройке объекта назначать указатель на метод, аналогично обычной функции, а при вызове передавать экземпляр класса как дополнительный аргумент.</p>
<p>До появления стандарта C++17 реализация указанного способа была достаточно сложной: пришлось бы объявлять еще один объект, который наследовался от <strong>Callable</strong> и осуществлял вызов метода; для создания соответствующего объекта пришлось бы объявить дополнительный перегруженный оператор присваивания, который в качестве входного аргумента принимал указатель на метод. Но в новом стандарте появилась функция <strong>std::invoke</strong>, которая определяет тип принимаемого объекта вызова и осуществляет вызов для соответствующего типа. Таким образом, для поддержки вызова метода класса необходимо в реализации <strong>CallableObject</strong> изменить одну-единственную строчку:</p>
<p><code>Return operator() (ArgumentList… arguments) override  // (8)</code></p>
<p><code>{</code></p>
<p><code>  //return storedArgument(arguments…);</code></p>
<p><code>  return std::invoke(storedArgument, arguments…);  // (9)</code></p>
<p><code>}</code></p>
<empty-line/><p>На удивление просто, не правда ли?</p>
<p>Использование универсального аргумента для вызова метода класса представлено в Листинг 50.</p>
<subtitle><emphasis>Листинг 50. Использование универсального аргумента для вызова метода класса</emphasis></subtitle><p><code>struct CallbackHandler</code></p>
<p><code>{</code></p>
<p><code>  void handler1(int eventID) {};</code></p>
<p><code>  bool handler2(int eventID, int contextID) { return false; };</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  CallbackHandler callbackObject;</code></p>
<empty-line/><p><code>  UniArgument&lt;void(CallbackHandler*, int)&gt; argument1;       // (1)</code></p>
<p><code>  UniArgument&lt;bool(CallbackHandler*, int, int)&gt; argument2;  // (2)</code></p>
<empty-line/><p><code>  argument1 = &amp;CallbackHandler::handler1;  // (3)</code></p>
<p><code>  argument2 = &amp;CallbackHandler::handler2;  // (4)</code></p>
<p><code>  argument1(&amp;callbackObject, 100);         // (5)</code></p>
<p><code>  argument2(&amp;callbackObject, 0, 1);        // (6)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строках 1 и 2 объявлены универсальные аргументы для вызова соответствующих методов класса. Как видим, в сигнатуре функции первый параметр является типом класса, для которого будут вызываться соответствующие методы. В строках 3 и 4 производится настройка методов, в строках 5 и 6 – вызовы методов для экземпляра соответствующего класса.</p>
<empty-line/><p>Итак, универсальный аргумент практически готов. Нам осталось реализовать оператор копирования, оператор присваивания и некоторые другие операции. Но мы этим заниматься не будем: разработчики стандартной библиотеки уже обо всем позаботились, поэтому темой следующей главы будет обзор инструментов STL для организации обратных вызовов<a l:href="#n23" type="note">24</a>.</p>
</section></section><section><title><p>4.6. Использование стандартной библиотеки</p>
</title><section><title><p>4.6.1. Организация вызовов</p>
</title><p>В стандартной библиотеке имеется полиморфный класс – оболочка <strong>std::function</strong>, предназначенная для организации вызовов различных типов. Этот класс идеально подходит на роль универсального аргумента. Кроме рассмотренных техник стирания типа и настройки сигнатуры, в нем реализовано множество других вещей: конструктор копирования, оператор присваивания, поддержка указателей на методы класса, проверка настройки аргумента, локальный буфер для хранения аргумента и многое другое. Мы не будем рассматривать реализацию <strong>std::function</strong>, потому что, во-первых, она достаточно сложная, а, во-вторых, может изменяться в зависимости от версии и платформы. При желании читатель сможет сделать это самостоятельно, проанализировав исходный код, мы же сосредоточимся на практическом использовании класса-оболочки.</p>
<p>Насколько сложна реализация <strong>std::function</strong>, настолько же просто ее использование. По аналогии с универсальным аргументом, рассмотренном в предыдущей главе, достаточно объявить экземпляр класса с нужной сигнатурой, после чего ему можно назначать различные объекты вызовов (Листинг 51).</p>
<subtitle><emphasis>Листинг 51. Использование std::function</emphasis></subtitle><p><code>void External(int eventID) {};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  struct Call</code></p>
<p><code>  {</code></p>
<p><code>    void operator() (int eventID) {};</code></p>
<p><code>  } objectCall;</code></p>
<empty-line/><p><code>  std::function&lt;void(int)&gt; fnt;</code></p>
<empty-line/><p><code>  fnt = External;</code></p>
<p><code>  fnt = objectCall;</code></p>
<p><code>  fnt = [](int evetID) {};</code></p>
<empty-line/><p><code>  fnt(0);</code></p>
<p><code>}</code></p>
<empty-line/><p>Полезной особенностью <strong>std::function </strong>является проверка настройки объекта вызова. Если объект не настроен, т. е. не было ни одного присваивания, то при попытке вызова будет выброшено исключение. Проверить, настроен ли объект, можно с помощью перегруженного оператора <strong>bool</strong>, пример приведен в Листинг 52.</p>
<subtitle><emphasis>Листинг 52. Проверка настройки аргумента</emphasis></subtitle><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  std::function&lt;void(int)&gt; fnt;</code></p>
<empty-line/><p><code>  fnt(0); //Error: argument is not set. Exception will be thrown</code></p>
<empty-line/><p><code>  fnt = [](int) {};</code></p>
<p><code>  fnt(0); //Ok, argument is set</code></p>
<empty-line/><p><code>  //Check if the argument is set</code></p>
<p><code>  if (fnt)</code></p>
<p><code>  {</code></p>
<p><code>    fnt(0);</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
</section><section><title><p>4.6.2. Инициатор с универсальным аргументом</p>
</title><p>Для реализации инициатора с универсальным аргументом необходимо для хранения аргумента объявить соответствующую класс-оболочку <strong>std::function</strong> (Листинг 53).</p>
<subtitle><emphasis>Листинг 53. Инициатор с оболочкой std::function</emphasis></subtitle><p><code>class Initiator  // (1)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  template&lt;typename CallbackArgument&gt;</code></p>
<p><code>  void setup(const CallbackArgument&amp; argument)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>    callbackHandler = argument;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()</code></p>
<p><code>  {</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  //Some actions</code></p>
<p><code>  callbackHandler(eventID);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  std::function&lt;void(int)&gt; callbackHandler;  // (3)</code></p>
<p><code>};</code></p>
<empty-line/><p>Если сравнить реализацию инициатора с фиксированным типом аргумента (Листинг 37 п. 4.4.1) с приведенной, то можно заметить следующие отличия. В первом случае инициатор является шаблоном, здесь он объявляется обычным способом. Далее, хранимый аргумент 3 не является переменной типа, задаваемого параметром шаблона, он объявлен как универсальный аргумент <strong>std::function</strong>. Метод настройки 2 объявлен как шаблон, параметром которого является тип назначаемого аргумента.</p>
<p>Описанный инициатор не работает с указателями на функцию и на метод класса: в первом случае необходимо передавать контекст, во втором случае необходимо передавать указатель на экземпляр класса и использовать другой синтаксис для вызова. Как уже рассматривалось в п. 4.2.2, в этих случаях необходимо преобразование вызовов. Однако, поскольку в универсальном аргументе сигнатура может настраиваться, в объекты преобразования также нужно ввести поддержку настройки сигнатуры.</p>
</section><section><title><p>4.6.3. Преобразование с настройкой сигнатуры</p>
</title><p>В п. 4.2.2 реализованы объекты преобразования, которые работали с фиксированной сигнатурой. Используя технику, описанную в Листинг 47 п. 4.5.2, модифицируем их таким образом, чтобы сигнатуру можно было настроить. Для этого в параметрах шаблона вместо задания типов указателей на функцию будем задавать параметры, определяющие сигнатуру, а типы указателей будем выводить из этих параметров.</p>
<p>Рассмотрим вначале указатели на функцию (Листинг 54).</p>
<subtitle><emphasis>Листинг 54. Преобразование вызовов с настройкой сигнатуры для указателей на функцию</emphasis></subtitle><p><code>template&lt;typename unused&gt;  // (1)</code></p>
<p><code>class CallbackConverter;</code></p>
<empty-line/><p><code>template&lt;typename Context, typename Return, typename … ArgumentList&gt;  // (2)</code></p>
<p><code>class CallbackConverter&lt;Return(Context, ArgumentList…)&gt;               // (3)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<empty-line/><p><code>  using Function = Return(*)(Context, ArgumentList…);  // (4)</code></p>
<empty-line/><p><code>  CallbackConverter(Function argFunction = nullptr, Context argContext = nullptr)  // (5)</code></p>
<p><code>  {</code></p>
<p><code>    ptrFunction = argFunction; context = argContext;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  Return operator() (ArgumentList… arguments)                 // (6)</code></p>
<p><code>  {</code></p>
<p><code>    ptrFunction(context, arguments…);                         // (7)</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  Function ptrFunction;  // (8)</code></p>
<p><code>  Context context;       // (9)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 вводится общая специализация шаблона. В строке 2 объявляется специализация для указателей на функцию, в которой задается тип передаваемого контекста и параметры сигнатуры. В строке 4 выводится тип указателя. В конструкторе 5 осуществляется настройка указателей. В перегруженном операторе 6 осуществляется вызов 7, в который передаются соответствующие аргументы.</p>
<empty-line/><p>Аналогично выполняется специализация для вызова методов класса (Листинг 55).</p>
<subtitle><emphasis>Листинг 55. Преобразование вызовов с настройкой сигнатуры для указателей на метод класса.</emphasis></subtitle><p><code>template&lt;typename ClassType, typename Return, typename…ArgumentList&gt;  // (1)</code></p>
<p><code>class CallbackConverter&lt;Return(ClassType::*)(ArgumentList…)&gt;          // (2)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<empty-line/><p><code>  using MemberPointer = Return(ClassType::*)(ArgumentList…);  // (3)</code></p>
<empty-line/><p><code>  CallbackConverter(MemberPointer methodPointer = nullptr, ClassType* classPointer = nullptr)  // (4)</code></p>
<p><code>  {</code></p>
<p><code>      ptrClass = classPointer; ptrMethod = methodPointer;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  Return operator()(ArgumentList… arguments)  // (5)</code></p>
<p><code>  {</code></p>
<p><code>    (ptrClass-&gt;*ptrMethod)(arguments…);       // (6)</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  ClassType* ptrClass;                          // (7)</code></p>
<p><code>  MemberPointer ptrMethod;                      // (8)</code></p>
<p><code>};</code></p>
<empty-line/><p>Реализация практически повторяет предыдущую, за исключением того, что в объявлениях типов сигнатуры добавляется класс (строки 2 и 3), а перегруженный оператор вызывает метод класса (строка 6).</p>
</section><section><title><p>4.6.4. Исполнитель</p>
</title><p>Реализация исполнителя для инициатора с универсальным аргументом (см. Листинг 53 п. 4.6.2) приведена в Листинг 56, здесь используется <strong>CallbackConverter</strong> из Листинг 54 п. 4.6.3.</p>
<subtitle><emphasis>Листинг 56. Исполнитель для инициатора с оболочкой std::function</emphasis></subtitle><p><code>class Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  static void staticCallbackHandler(Executor* executor, int eventID) {}</code></p>
<p><code>  void callbackHandler(int eventID) {}</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>void ExternalHandler(void* somePointer, int eventID) {}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int capturedValue = 0;</code></p>
<p><code>  Initiator initiator;</code></p>
<p><code>  Executor executor;</code></p>
<empty-line/><p><code>  // Pointer to the external function</code></p>
<p><code>  initiator.setup(CallbackConverter&lt;void(void*, int)&gt;(ExternalHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // Pointer to the static method</code></p>
<p><code>  initiator.setup(CallbackConverter&lt;void(Executor*, int)&gt;(Executor::staticCallbackHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // Pointer to the class member method</code></p>
<p><code>  initiator.setup(CallbackConverter&lt;void(Executor::*)(int)&gt;(&amp;Executor::callbackHandler, &amp;executor));</code></p>
<empty-line/><p><code>  // Functional object</code></p>
<p><code>  initiator.setup(executor);</code></p>
<empty-line/><p><code>  // Lambda-expression</code></p>
<p><code>  initiator.setup([capturedValue](int eventID) {});</code></p>
<p><code>}</code></p>
<empty-line/><p>Если сравнить приведенную реализацию исполнителя для шаблона-инициатора с фиксированным типом аргумента (Листинг 43 и Листинг 44 п. 4.4.3) с приведенной, то можно заметить следующее. В первом случае для каждого типа аргумента приходится объявлять отдельный инициатор, инстанциируя его соответствующим типом. Здесь инициатор объявляется один раз, после чего тип аргумента вызова настраивается в процессе выполнения программы. В результате упрощается разработка, улучшается гибкость и прозрачность кода.</p>
</section><section><title><p>4.6.5. Инициатор для методов класса</p>
</title><p>До сих пор для вызова методов класса мы использовали преобразование вызовов. Однако, поскольку <strong>std::function </strong>непосредственно поддерживает вызов методов, появляется возможность реализовать специализированный инициатор для указанного случая. За основу возьмем инициатор из п. 4.6.2 и модифицируем его.</p>
<p>Как мы видели в реализации универсального аргумента (п. 4.5.3), для вызова метода класса первым параметром должен передаваться указатель на экземпляр класса. Поэтому, в инициатор необходимо добавить переменную для хранения этого указателя. Но поскольку тип класса заранее неизвестен, его следует задавать как параметр, т. е. инициатор должен быть объявлен в виде шаблона. Далее необходимо добавить метод для настройки указателя и, соответственно, при задании сигнатуры и выполнении вызова передавать дополнительный аргумент – указатель на экземпляр класса. Реализация приведена в Листинг 57.</p>
<subtitle><emphasis>Листинг 57. Инициатор с оболочкой std::function для вызова методов класса</emphasis></subtitle><p><code>template&lt;typename ClassName&gt;  // (1)</code></p>
<p><code>class InitiatorForClass</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  template&lt;typename CallbackArgument&gt;</code></p>
<p><code>  void setup(const CallbackArgument argument)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>    callbackHandler = argument;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void setupInstance (ClassName* classObject)  // (3)</code></p>
<p><code>  {</code></p>
<p><code>    ptrClass = classObject;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void run()  // (4)</code></p>
<p><code>  {</code></p>
<p><code>      int eventID = 0;</code></p>
<p><code>      //Some actions</code></p>
<p><code>      callbackHandler(ptrClass, eventID);  // (5)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  std::function&lt;void(ClassName*, int)&gt; callbackHandler;  // (6)</code></p>
<p><code>  ClassName* ptrClass = nullptr;                         // (7)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен шаблон класса. В строке 2 объявлен метод для настройки аргумента, в качестве которого выступает указатель на метод-член. В строке 3 объявлен метод для настройки экземпляра класса. Метод запуска 4 такой же, как и в исходном, за исключением того, что при вызове в аргумент дополнительно передается указатель на класс (строка 5). В строке 6 инстанциируется аргумент для вызова метода класса, в сигнатуре первым параметром выступает указатель на класс, задаваемый параметром шаблона-инициатора. В строке 7 объявлена переменная для хранения указателя на экземпляр класса.</p>
<empty-line/><p>Итак, модифицировав инициатор из Листинг 53 п. 4.6.2, мы реализовали отдельный инициатор для вызова методов-членов. Используя частичную специализацию шаблона, можно сделать так, чтобы оба инициатора объявлялись одинаковым способом (Листинг 58).</p>
<subtitle><emphasis>Листинг 58. Использование специализации шаблона-инициатора для вызова методов класса</emphasis></subtitle><p><code>template&lt;typename… unused&gt;  // (1)</code></p>
<p><code>class Initiator</code></p>
<p><code>{</code></p>
<p><code>  //… Implementation for origin initiator</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template&lt;typename ClassName&gt;  // (2)</code></p>
<p><code>class Initiator&lt;ClassName&gt;</code></p>
<p><code>{</code></p>
<p><code>  //… Implementation for class method call initiator</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен исходный класс, но теперь он является шаблоном с пакетом параметров. Пакет параметров здесь не используется, он нужен только для дальнейшей специализации.</p>
<p>В строке 2 объявлен шаблон для вызова методов-членов. Поскольку его имя совпадает с именем предыдущего, компилятор будет считать, что здесь определяется не новый класс, а специализация объявленного ранее. В объявлении указан параметр, предполагается, что в этом качестве будет использоваться имя класса. Теперь, если при инстанциировании шаблона будет задаваться параметр, будет выбрана специализация для вызова методов-членов. При отсутствии параметров будет выбран исходный шаблон.</p>
<empty-line/><p>Использование двух типов инициатора (исходного и специализированного) для вызова методов класса приведено в Листинг 59, здесь используется преобразование вызовов из Листинг 54 п. 4.6.3.</p>
<subtitle><emphasis>Листинг 59. Использование инициатора с оболочкой std::function для вызова методов класса</emphasis></subtitle><p><code>class Executor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  static void staticCallbackHandler(Executor* executor, int eventID) {}</code></p>
<p><code>  void callbackHandler(int eventID) {}</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  Executor executor;</code></p>
<empty-line/><p><code>  Initiator initiator;  // (1)</code></p>
<p><code>  initiator.setup(CallbackConverter&lt;void(Executor::*)(int)&gt;(&amp;Executor::callbackHandler, &amp;executor));  // (2)</code></p>
<p><code>  initiator.run();</code></p>
<empty-line/><p><code>  Initiator&lt;Executor&gt; initiatorForClass;                // (3)</code></p>
<p><code>  initiatorForClass.setup(&amp;Executor::callbackHandler);  // (4)</code></p>
<p><code>  initiatorForClass.setupInstance(&amp;executor);           // (5)</code></p>
<p><code>  initiatorForClass.run();</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен исходный инициатор. В параметры шаблона мы не передаем никаких аргументов, т. е. шаблон инстанциируется подобно обычному классу. В строке 2 происходит настройка инициатора, в качестве аргумента передается объект для преобразования вызовов.</p>
<p>В строке 3 объявлен специализированный инициатор для вызова методов класса, он инстанциируется типом <strong>Executor</strong>. В строке 4 настраивается указатель на метод класса, в строке 5 настраивается указатель на экземпляр класса.</p>
<empty-line/><p>Какой инициатор лучше использовать для методов класса, исходный с преобразованием или модифицированный с непосредственным вызовом? Трудно однозначно ответить на этот вопрос. С одной стороны, использование специализированного класса противоречит идее обобщенного кода – в специализированном классе мы вынуждены повторять всю реализацию, даже в тех частях, где она совпадает с исходной. С другой стороны, упрощается работа с настройкой инициатора – нам не нужно использовать класс для преобразования, можно по отдельности изменять указатель на метод и указатель на экземпляр. В общем, выбор остается на усмотрение разработчика.</p>
</section><section><title><p>4.6.6. Перенаправление вызовов</p>
</title><p>Представьте следующую ситуацию: инициатор вызывает функцию с одной сигнатурой, а в клиенте реализован обработчик с другой сигнатурой. Например, в исполнителе реализована функция обработки нажатия кнопки, которая на вход принимает два параметра – идентификатор кнопки и текущее поле редактирования. В то же время инициатор вызывает функцию, передавая ей только один аргумент – идентификатор текущей нажатой кнопки, и он ничего не знает об остальных элементах управления. Можно ли сделать так, чтобы инициатор вызывал одну функцию, но при этом бы вызывалась другая функция, другими словами, происходило перенаправление вызова? В стандартной библиотеке для этого существуют специальные объекты связывания <strong>std::bind</strong>, которые при необходимости могут сохраняться в <strong>std::function</strong> подобно обычным функциональным объектам.</p>
<p>Графически использование связывания продемонстрировано на Рис. 18. Пусть инициатор вызывает функцию 1, которая на вход принимает аргумент 1. Исполнитель реализует обратный вызов с помощью функции 2, которая принимает на вход два аргумента. Вместо функции 1 инициатору назначается объект связывания, который имеет перегруженный оператор вызова функции с сигнатурой 1. Указанный объект хранит дополнительный параметр, значение которому присваивается во время инициализации. Перегруженный оператор, в свою очередь, вызывает функцию 2, первому аргументу передает сохраненный параметр, а второму аргументу передает значение аргумента из функции 1. Таким образом, осуществляется перенаправление вызова из функции 1 в функцию 2.</p>
<empty-line/><image l:href="#i_030.png"/><p>Рис. 18. Перенаправление вызовов</p>
<empty-line/><p>Использование перенаправления вызовов представлено в Листинг 60.</p>
<subtitle><emphasis>Листинг 60. Перенаправление вызовов</emphasis></subtitle><p><code>#include &lt;functional&gt;</code></p>
<empty-line/><p><code>void NativeHandler(int eventID)  // (1)</code></p>
<p><code>{</code></p>
<p><code>  //here eventID is 10</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void AnotherHandler(int contextID, int eventID)  // (2)</code></p>
<p><code>{</code></p>
<p><code>  //here eventID is 1, contextID is 10;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 1; int contextID = 10;</code></p>
<empty-line/><p><code>  std::function&lt;void(int)&gt; fnt;  // (3)</code></p>
<p><code>  fnt = NativeHandler;           // (4)</code></p>
<p><code>  fnt(eventID);                  // (5) NativeHandler will be called</code></p>
<empty-line/><p><code>  fnt = std::bind(AnotherHandler, contextID, std::placeholders::_1);  // (6)</code></p>
<p><code>  fnt(eventID);  // (7) AnotherHandler will be called</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен исходный обработчик, в строке 2 – обработчик, в который будет перенаправляться вызов. В строке 3 объявлен универсальный аргумент с исходной сигнатурой. В строке 4 аргументу назначена функция, которая будет вызвана при выполнении вызова 5.</p>
<p>В строке 6 вызывается функция <strong>bind</strong>, которая из переданных аргументов формирует объект связывания. На вход <strong>std::bind</strong> передается имя новой функции-обработчика и аргументы, которые будут передаваться в эту функцию. Первому аргументу здесь будет назначено значение <strong>contextID</strong>, а второму аргументу будет назначено значение 1-го по порядку аргумента из исходной функции. Здесь конструкция <strong>std::placeholders</strong> определяет номер аргумента в исходной функции, который будет подставлен в качестве аргумента в перенаправляемую функцию.</p>
<p>Сформированный объект связывания сохраняется в универсальном аргументе. Если мы теперь выполним вызов (строка 7), то будет вызвана функция, назначенная этому объекту, и этой функции будут переданы соответствующие аргументы.</p>
<empty-line/><p>Аналогичным образом может быть объявлено перенаправление вызовов для методов-членов класса, но здесь должно соблюдаться следующее правило: первому аргументу новой функции должен быть назначен первый аргумент исходной функции, потому что он определяет экземпляр класса, для которого вызывается метод. Пример приведен в Листинг 61.</p>
<subtitle><emphasis>Листинг 61. Перенаправление вызовов для методов-членов класса</emphasis></subtitle><p><code>#include &lt;functional&gt;</code></p>
<empty-line/><p><code>class CallbackHandler</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void NativeHandler(int eventID)</code></p>
<p><code>  {</code></p>
<p><code>    //eventID = 1;</code></p>
<p><code>  }</code></p>
<p><code>  void AnotherHandler(int contextID, int eventID)</code></p>
<p><code>  {</code></p>
<p><code>    //eventID = 1, contextID = 10;</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  using namespace std::placeholders; // (1)</code></p>
<empty-line/><p><code>  int eventID = 1; int contextID = 10;</code></p>
<p><code>  CallbackHandler handler;</code></p>
<empty-line/><p><code>  std::function&lt;void(CallbackHandler*, int)&gt; fnt;</code></p>
<p><code>  fnt = &amp;CallbackHandler::NativeHandler;</code></p>
<p><code>  fnt(&amp;handler, eventID); // NativeHandler will be called</code></p>
<empty-line/><p><code>  fnt = std::bind(&amp;CallbackHandler::AnotherHandler, _1, contextID, _2); // (2)</code></p>
<p><code>  fnt(&amp;handler, eventID); // AnotherHandler will be called</code></p>
<p><code>}</code></p>
<empty-line/><p>Здесь в строке 1 мы использовали using namespace, что сокращает объявление позиций аргументов: как видно из строки 2, мы сразу пишем позицию без использования std::placeholders, что значительно компактнее и проще для восприятия. Здесь в исходной функции присутствует неявный параметр с номером 1, который определяет экземпляр класса. Этот параметр назначается первому (неявному) параметру новой функции, а второй параметр исходной функции <strong>eventID</strong> назначается последнему параметру новой функции.</p>
<empty-line/><p>В общем случае могут быть 4 варианта перенаправления вызовов:</p>
<p>• из функции в функцию (пример в Листинг 60);</p>
<p>• из функции в метод класса;</p>
<p>• из метода класса в другой метод этого же класса (пример в Листинг 61);</p>
<p>• из метода класса в метод другого класса;</p>
<p>• из метода класса в функцию.</p>
<p>Реализация указанных вариантов, по сути, одинакова, отличаются только объявления связывания. Сведем эти объявления в таблицу (Табл. 13).</p>
<empty-line/><p>Табл. 13. Связывания для различных вариантов перенаправления вызовов.</p>
<image l:href="#i_031.png"/><empty-line/><p>Теперь перенаправление вызовов в исполнителе не представляет сложности: при настройке вместо объекта вызова нужно всего лишь подставить необходимое связывание. Пример для варианта «функция – функция» приведен в Листинг 62, здесь используется инициатор из Листинг 53.</p>
<subtitle><emphasis>Листинг 62. Перенаправление вызовов в исполнителе</emphasis></subtitle><p><code>void NativeHandler(int eventID)</code></p>
<p><code>{</code></p>
<p><code>  //here eventID is 10</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void AnotherHandler(int contextID, int eventID)</code></p>
<p><code>{</code></p>
<p><code>  //here eventID is 10, contextID is 1;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 10; int contextID = 1;</code></p>
<p><code>  Initiator initiator;            // (1)</code></p>
<empty-line/><p><code>  initiator.setup(NativeHandler); // (2)</code></p>
<p><code>  initiator.setup(std::bind(AnotherHandler, contextID, std::placeholders::_1)); // (3)</code></p>
<empty-line/><p><code>  initiator.run(); // (4)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлен инициатор. В строке 2 происходит настройка инициатора с передачей ему указателя на функцию с «родной» сигнатурой, т. е. сигнатурой, для которой инициатор осуществляет вызов. Если бы мы после этого запустили инициатор путем вызова метода <strong>run</strong>, то инициатор вызывал бы функцию <strong>NativeCallbackHandler</strong>. В строке 3 вместо функции с «родной» сигнатурой мы подставляем объект связывания, который будет перенаправлять вызов в другую функцию. В строке 4 запускаем инициатор, в котором после вызова функции объекта связывания будет осуществлен вызов <strong>AnotherCallbackHandler</strong> с соответствующими параметрами. Аналогичным образом, подставляя нужные связывания из Табл. 13, осуществляется перенаправление вызовов для других вариантов.</p>
<empty-line/><p>Итак, использование объектов связывания предлагает универсальный способ преобразования вызовов: вместо объектов преобразования (п. 4.2.2, 4.6.3) в универсальный аргумент подставляется объект связывания, сгенерированный соответствующим вызовом <strong>std::bind</strong>.</p>
</section><section><title><p>4.6.7. Универсальный аргумент и производительность</p>
</title><p>Может показаться, что организация обратных вызовов с использованием <strong>std::function</strong> в качестве универсального аргумента является наилучшим решением, предлагающим простоту реализации в сочетании с максимальной гибкостью. В большинстве случаев это действительно так, однако <strong>std::function </strong>обладает недостатком, который может свести на нет все остальные достоинства: большие временные затраты для осуществления вызова по сравнению с другими способами реализации. Причины этого следующие:</p>
<p>1) при вызове происходит проверка, настроен ли аргумент;</p>
<p>2) вызов происходит через промежуточный объект с виртуальной функцией (см. 4.5.1) – расходуется дополнительное время для вызова этой функции;</p>
<p>3) поскольку промежуточный объект создается динамически, его адрес может изменяться, что требует загрузки адреса перед вызовом;</p>
<p>4) на этапе компиляции тип аргумента неизвестен, поэтому код обработки не может быть встроен в точку вызова.</p>
<p>Первые три причины вносят незначительный вклад в общее время, затрачиваемое на выполнение вызова, а вот четвертая может привести к резкому падению производительности. Мы уже рассматривали подобную проблему при анализе функциональных объектов (п. 2.4.6): при малом объеме кода обработчика время, затраченное на вызов функции, может превысить время выполнения тела функции.</p>
<p>Проведем эксперимент. Напишем программу, в которой циклически будут осуществляться вызовы различных типов для кода небольшого размера<a l:href="#n24" type="note">25</a>. Поскольку код обработчика один и тот же, общее время, затраченное на выполнение вызова, будет прямо пропорционально времени, затраченному на организацию вызова. Запустим программу и выполним профилирование<a l:href="#n25" type="note">26</a>. Результаты профилирования представлены в Табл. 14, графически они изображены на Рис. 19<a l:href="#n26" type="note">27</a>.</p>
<empty-line/><p>Табл. 14. Время, затраченное на выполнение вызовов различных типов для кода небольшого размера, млс.</p>
<image l:href="#i_032.png"/><empty-line/><image l:href="#i_033.png"/><p>Рис. 19. Гистограмма результатов профилирования вызовов различных типов для кода небольшого размера</p>
<empty-line/><p>Проанализируем вначале результаты при организации вызовов напрямую, без использования универсального аргумента. Быстродействие для указателя на функцию и указателя на метод различается незначительно, а вот при использовании функциональных объектов и лямбда-выражений оно вырастает на порядки<a l:href="#n27" type="note">28</a>, потому что код встраивается в точку вызова.</p>
<p>Посмотрим теперь результаты при использовании универсального аргумента. Если сравнить с вызовами напрямую, время выполнения ожидаемо увеличивается. Однако если для указателя на функцию и указателя на метод увеличение незначительно, то для функционального объекта и лямбда-выражения оно увеличивается настолько, что практически исчезает отличие от других способов. Теперь код обработчика не встраивается в точку вызова, и расходы на вызов функции во много раз превышают расходы на выполнение тела функции.</p>
<p>Модифицируем теперь код обработчика таким образом, чтобы оптимизатор не мог встроить его в точку вызова. Числовые значения замеров представлены в Табл. 15, графически они изображены на Рис. 20. Теперь картина получается иная: прямое использование функциональных объектов и лямбда-выражений не дают заметного выигрыша в производительности, а использование универсального аргумента увеличивает время выполнения незначительно.</p>
<empty-line/><p>Табл. 15. Время, затраченное на выполнение вызовов различных типов для кода большого размера, млс.</p>
<image l:href="#i_034.png"/><empty-line/><image l:href="#i_035.png"/><p>Рис. 20. Гистограмма результатов профилирования вызовов различных типов для кода большого размера</p>
<empty-line/><p>Какой код будет встраиваться в точку вызова, а какой нет? Однозначного ответа на этот вопрос дать невозможно. Алгоритмы работы оптимизатора не документируются и принимают во внимание множество факторов: количество команд в коде; количество точек вызова; наличие рекурсивных вызовов; оценка степени увеличения результирующего кода после встраивания и т. п. Самый надежный способ – посмотреть дизассемблированный код, где однозначно видно, встроен ли код обработчика в точку вызова.</p>
<p>Исходя из изложенного, можно сделать следующий вывод:</p>
<cite><p>В системах, где предполагается интенсивное использование обратных вызовов и быстродействие является критически важным, использование универсального аргумента не является оптимальным выбором.</p>
</cite></section></section><section><title><p>4.7. Проблемы, порождаемые шаблонами</p>
</title><section><title><p>4.7.1. Недостатки шаблонов</p>
</title><p>Как можно заметить из рассмотренных примеров, шаблоны являются мощным и эффективным инструментом реализации обобщенного кода. Но, как известно, не бывает ничего идеального, поэтому, конечно же, у них имеются недостатки.</p>
<p><emphasis>Сложность разработки</emphasis>. При проектировании шаблонного кода операции зачастую задаются в декларативном виде, что приближает их к функциональному стилю. Использование пакетов параметров требует изощренных техник, весьма непохожих на классические приемы программирования.</p>
<p><emphasis>Сложность понимания</emphasis>. Код, написанный с помощью шаблонов, гораздо труднее анализировать, чем обычный. В этом можно убедиться, просмотрев, к примеру, исходный код стандартной библиотеки STL.</p>
<p><emphasis>Недружественность компилятора. </emphasis>Сообщения об ошибках, генерируемые при компиляции шаблонов, зачастую сложны и непонятны. Когда ошибка показывается где-то в недрах шаблонного кода, очень трудно бывает догадаться, возникает ли проблема из-за некорректной реализации этого кода либо из-за того, что структура данных, подставляемая в шаблон, не реализует предполагаемый интерфейс (например, требуется перегрузка некоторых операторов).</p>
<p><emphasis>Тщательное тестирование.</emphasis> Шаблоны подчиняются концепции «компиляция по требованию», т. е. компилируются только те функции и методы, которые используются в коде. Поэтому, чтобы убедиться в отсутствии синтаксических и семантических ошибок, следует покрывать вызовами все функции и методы, объявленные в шаблоне. Причем желательно это делать на некотором наборе предполагаемых типов данных.</p>
<p><emphasis>Большое время компиляции</emphasis>. Во-первых, компилятор осуществляет генерацию кода при каждом инстанциировании шаблона конкретным типом. Во-вторых, шаблоны для одних и тех же типов, инстанциируемые в разных участках программы, будут компилироваться заново. И, в-третьих, много времени тратится на компиляцию включаемых файлов: например, при каждом включении заголовочных файлов стандартной библиотеки все внутренние реализации шаблонов в этих файлах должны быть скомпилированы.</p>
<p><emphasis>Склонность к разрастанию программного кода.</emphasis> Для каждого используемого типа будет сгенерирован отдельный код. Представим, к примеру, что мы используем шаблонную функцию с входным аргументом – числом, тип которого задается параметром шаблона. Если мы будем вызывать эту функцию с аргументами различных типов, допустим, <strong>char</strong>, <strong>short</strong>, <strong>int</strong>, <strong>long</strong>, для каждого типа будет сгенерирована отдельная функция, несмотря на то что используемые типы эквивалентны и можно обойтись одним-единственным типом <strong>long</strong>. Аналогичная ситуация возникает при специализации шаблонов: даже если мы делаем частичную специализацию c целью изменить поведение одного-единственного метода, нам придется повторить весь код, используемый в общей специализации.</p>
</section><section><title><p>4.7.2. Ограничения шаблонов</p>
</title><p>В общем-то, рассмотренные недостатки не так уж значительны, и преимуществ у шаблонов значительно больше. Тем не менее, они имеют фундаментальное ограничение, вытекающие из их внутренней природы: <strong>шаблоны не создают предварительно откомпилированного кода</strong>. По большому счету шаблон представляет собой не сам код, а правила для генерации кода. Пока шаблон не инстанциирован, его код отсутствует; после инстанциирования последний генерируется только для тех методов и функций, которые были вызваны. Из указанного ограничения вытекают следующие выводы.</p>
<p><emphasis>Интерфейс шаблона не может быть отделен от реализации</emphasis>. И объявление шаблона, и его реализация должны находиться в одной области видимости (модель включения). Таким образом, при изменениях в реализации шаблона все компоненты, которые его используют, должны быть перекомпилированы.</p>
<p><emphasis>Шаблоны не могут поставляться в виде статических или динамических библиотек</emphasis>, они должны поставляться только в виде исходного кода. Никакие сторонние приложения (за исключением компиляторов C++, разумеется) не могут использовать функциональность, реализованную на базе шаблонов.</p>
<p>По вышеуказанным причинам,<a l:href="#n28" type="note">29</a></p>
<cite><p>С помощью шаблонов невозможно реализовать интерфейсы API.</p>
</cite></section></section><section><title><p>4.8. Итоги</p>
</title><p>Шаблоны обеспечивают параметрический полиморфизм, что позволяет писать обобщенный код, реализующий заданную функциональность без привязки к типам данных.</p>
<p>Инициатор для синхронных вызовов реализуется с помощью шаблонов функций, асинхронных – с помощью шаблонов классов.</p>
<p>В реализации шаблона инициатора тип объекта вызова задается параметром. Поскольку разные типы объектов требуют различное число параметров и используют неодинаковый синтаксис, для сохранения единой реализации используется преобразование вызовов.</p>
<p>Функциям, реализующим алгоритмы, зачастую требуются различные операции над данными. Поскольку в обобщенном коде типы данных заранее не известны, для реализации операций используются предикаты.</p>
<p>В асинхронных вызовах для каждого типа аргумента приходится инстанциировать соответствующий инициатор. Использование универсального аргумента позволяет реализовать единый класс для любых типов аргументов, однако в некоторых случаях это может привести к падению производительности.</p>
<p>В стандартной библиотеке STL имеются мощные средства для организации вызовов, реализующие универсальный аргумент, вызов методов класса, перенаправление вызовов.</p>
<p>Шаблонам присущи недостатки, большинство из которых незначительны и не перевешивают их достоинств. Однако шаблоны не предполагают предварительно откомпилированного кода, и по этой причине не могут использоваться в интерфейсах API.</p>
</section></section><section><title><p>5. Распределение вызовов</p>
</title><section><title><p>5.1. Постановка задачи</p>
</title><p>Под распределением вызовов понимается техника, в которой при вызове единственной функции осуществляется выполнение множества вызовов через соответствующие аргументы.</p>
<p>Графически задача распределения вызовов показана на Рис. 21. Компонент, осуществляющий вызов, называется источником; аргументы вызова называются получателями; компонент, осуществляющий распределение вызовов, называется распределитель; код, запускающий вызовы, называется распределяющая функция. При необходимости дополнительно в вызов могут передаваться какие-либо данные.</p>
<p>Распределитель может быть реализован в виде функции либо класса. Если распределитель реализован в виде функции, то он сам представляет собой распределяющую функцию. Если распределитель реализован в виде класса, то распределяющая функция представляет собой метод класса либо перегруженный оператор.</p>
<empty-line/><image l:href="#i_036.png"/><p>Рис. 21. Распределение вызовов</p>
<empty-line/><p>Как видим, постановка задачи звучит достаточно просто. Зачем же тогда ей посвящен отдельный раздел? Во-первых, распределение вызовов имеет важное прикладное значение: оно используется в самых различных приложениях, таких, как обработка команд, оповещение о событиях, синхронизация операций и др. Во-вторых, задача распределения вызовов совсем не такая простая, как это может показаться из формального описания. Для ее решения используются изощренные техники, призванные обеспечивать максимальную эффективность для самых различных требований.</p>
<p>Итак, рассмотрим, как реализуется распределение вызовов.</p>
</section><section><title><p>5.2. Статический набор получателей</p>
</title><section><title><p>5.2.1. Распределение в статическом наборе</p>
</title><p>Если типы и количество получателей известны на этапе компиляции и не планируется их изменение в процессе выполнения программы, то мы имеем статический набор получателей. В этом случае распределитель можно реализовать в виде шаблонной функции, которая в качестве входных аргументов будет принимать объекты вызова. Но поскольку типы объектов и их количество могут быть различными, логично в качестве входного параметра функции использовать пакет, задаваемый шаблоном.</p>
<p>Итак, нам необходимо выполнить вызов для каждого объекта, входящего в пакет. Для решения этой задачи используется техника рекурсивного развертывания пакета, суть которой заключается в следующем.</p>
<p>Объявляется функция, первым параметром которой выступает объект вызова, а вторым – пакет. Когда на вход данной функции поступает пакет, первый объект из него извлекается, происходит вызов этого объекта, а затем функция рекурсивно вызывается вновь с пакетом, содержащим еще не извлеченные объекты. Когда в результате рекурсивных вызовов все объекты будут извлечены, будет вызвана функция, на вход которой будет передан пустой пакет. Данная функция завершает рекурсивное выполнение.</p>
<p>Реализация описанной техники приведена в Листинг 63.</p>
<subtitle><emphasis>Листинг 63. Распределяющая функция для статического набора получателей</emphasis></subtitle><p><code>void Call()  // (1)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>template &lt; typename First, typename…Others&gt;</code></p>
<p><code>void Call(First&amp; first, Others…rest)  // (2)</code></p>
<p><code>{</code></p>
<p><code>  first();            // (3)</code></p>
<p><code>  Call(rest…);      // (4)</code></p>
<p><code>}</code></p>
<empty-line/><p><code>template &lt;typename … CallObjects&gt;</code></p>
<p><code>void Distribute(CallObjects… objects)  // (5)</code></p>
<p><code>{</code></p>
<p><code>  Call(objects…);  // (6)</code></p>
<p><code>}</code></p>
<empty-line/><p>Графически развертывание пакета параметров для трех аргументов изображено на Рис. 22. Процесс начинается с вызова распределяющей функции, которая объявлена в строке 5. Здесь используется пакет параметров <strong>objects</strong>, который содержит объекты вызова. Внутри этой функции, в строке 6, происходит первый вызов рекурсивной функции, которой на вход передаются соответствующий аргумент в виде пакета.</p>
<p>Рекурсивная функция <strong>Call</strong> объявлена в строке 2. Эта функция принимает два аргумента: первый параметр из пакета <strong>first</strong> и пакет остальных параметров <strong>rest</strong>. При первом вызове пакет параметров из <strong>Distribute</strong> передается в эту функцию, и там происходит его распаковка: первый параметр извлекается и помещается в <strong>first</strong>, оставшаяся часть пакета записывается в <strong>rest</strong>. В строке 3 производится вызов, а пакет с оставшимися параметрами передается в рекурсивный вызов <strong>Call</strong> (строка 4).</p>
<p>Итак, на каждом шаге рекурсивного вызова из пакета извлекается очередной параметр, а размер исходного пакета уменьшается. Таким образом, в итоге все параметры будут извлечены, и пакет станет пустым. Эта ситуация обрабатывается путем объявления функции с пустым пакетом параметров, т. е. функции, которая на вход не принимает ни одного аргумента (строка 1). Тело этой функции пустое, в ней происходит возврат управления, и по цепочке рекурсивных вызовов управление возвращается в исходную точку в строке 6.</p>
<empty-line/><image l:href="#i_037.png"/><p>Рис. 22. Рекурсивное развертывание пакета параметров для трех аргументов</p>
<empty-line/><p>Использование распределения вызовов для статического набора получателей приведено в Листинг 64.</p>
<subtitle><emphasis>Листинг 64. Распределение вызова для статического набора</emphasis></subtitle><p><code>void ExternalHandler()  // (1)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  void callbackHandler() {}</code></p>
<p><code>  void operator() () {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  FO fo;                             // (2)</code></p>
<p><code>  auto lambda = []() {};             // (3)</code></p>
<p><code>  auto cb2cl = std::bind(&amp;FO::callbackHandler, fo);  // (4)</code></p>
<empty-line/><p><code>  Distribute(ExternalHandler, fo, cb2cl, lambda);    // (5)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строках 1, 2, 3, 4 объявлены соответствующие объекты вызова: внешняя функция, функциональный объект, лямбда-выражение, объект для вызова метода класса. Для вызова метода класса в строке 4 объявляется объект связывания (см. п. 4.6.6), в строке 5 происходит распределение вызовов.</p>
</section><section><title><p>5.2.2. Передача данных</p>
</title><p>Если в вызов необходимо передавать данные, то для этого в описанные выше функции необходимо ввести дополнительный параметр (Листинг 65).</p>
<subtitle><emphasis>Листинг 65. Распределяющая функция для статического набора получателей с передачей данных</emphasis></subtitle><p><code>template &lt;typename CallData&gt;  // (1)</code></p>
<p><code>void Call(CallData&amp; data)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>template &lt;typename CallData, typename First, typename…Others&gt;  // (2)</code></p>
<p><code>void Call(CallData data, First&amp; first, Others&amp;…rest)</code></p>
<p><code>{</code></p>
<p><code>  first(data);          // (3)</code></p>
<p><code>  Call(data, rest…);  // (4)</code></p>
<p><code>}</code></p>
<empty-line/><p><code>template &lt;typename CallData, typename … CallObjects&gt;  // (5)</code></p>
<p><code>void Distribute(CallData data, CallObjects… objects)</code></p>
<p><code>{</code></p>
<p><code>  Call(data, objects…);  // (6)</code></p>
<p><code>}</code></p>
<empty-line/><p>Приведенная реализация повторяет Листинг 63 п. 5.2.1, только теперь в функциях к объектам вызова добавляется параметр <strong>data </strong>для передачи данных.</p>
<p>Пример распределения для статического набора получателей с передачей данных представлен в Листинг 66.</p>
<subtitle><emphasis>Листинг 66. Распределение вызовов для статического набора получателей</emphasis></subtitle><p><code>void ExternalHandler(int eventID)  // (1)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  void callbackHandler(int eventID) {}</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  using namespace std::placeholders;</code></p>
<empty-line/><p><code>  FO fo;  // (2)</code></p>
<p><code>  auto lambda = [](int eventID) {};                      // (3)</code></p>
<p><code>  auto cb2cl = std::bind(&amp;FO::callbackHandler, fo, _1);  // (4)</code></p>
<empty-line/><p><code>  int eventID = 0;  // (5)</code></p>
<empty-line/><p><code>  Distribute(eventID, ExternalHandler, fo, cb2cl, lambda);  // (6)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строках 1, 2, 3, 4 объявлены соответствующие объекты вызова: внешняя функция, функциональный объект, лямбда-выражение, объект для вызова метода класса. Для вызова метода класса в строке 4 объявляется объект связывания (см. п. 4.6.6), в строке 5 объявляется переменная для передачи данных. В строке 6 происходит распределение вызовов, первым параметром передается аргумент данных <strong>eventID</strong>.</p>
</section></section><section><title><p>5.3. Настройка сигнатуры для передачи данных</p>
</title><section><title><p>5.3.1. Общая концепция</p>
</title><p>В рассмотренной выше реализации распределения с передачей данных (п. 5.2.2) есть один недостаток: данные, передаваемые в вызов, имеют заранее прописанную сигнатуру. В нашем случае предполагается, что это единственная числовая переменная. Если нам понадобится другая сигнатура, т. е. другой набор и типы переменных, нам придется повторять всю реализацию распределения, изменяя только сам вызов. Можно ли настроить сигнатуру, как это мы делали в универсальном аргументе? Тогда мы определяли сигнатуру с помощью пакета параметров, но теперь у нас пакет параметров используется для задания объектов вызова.</p>
<p>Получается, нам необходим еще один пакет параметров. В общем случае допускается объявлять шаблон функции с несколькими пакетами<a l:href="#n29" type="note">30</a>, однако в этом случае для вывода типов пакета используется схема раскрытия. По этой причине необходимо, чтобы все пакеты параметров раскрывались параллельно в рамках одной синтаксической конструкции (Листинг 67), что для нашей задачи не подходит: мы должны вначале раскрыть пакет объектов вызова, а затем для каждого элемента пакета раскрыть пакет сигнатуры. Здесь нужно какое-то другое решение.</p>
<subtitle><emphasis>Листинг 67. Пример шаблона функции с несколькими пакетами параметров</emphasis></subtitle><p><code>template&lt;typename…First, typename…Second&gt;</code></p>
<p><code>void init(std::pair&lt;First,Second&gt;…)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  init(std::make_pair(1, 2), std::make_pair(3,4), std::make_pair(0.3, 1e5));</code></p>
<p><code>}</code></p>
<empty-line/><p>Поскольку пакет параметров в нашем случае может быть только один, необходима структура данных, в которую можно упаковать объекты различных типов. На эту роль лучше всего подойдет кортеж.</p>
<cite><p><strong>Кортеж</strong> – это структура данных, которая используется для хранения объектов различных типов.</p>
</cite><p>В STL кортеж реализуется шаблонным классом <strong>std::tuple</strong>, параметрами шаблона являются типы, которые будут храниться в кортеже. Этот класс как нельзя лучше подойдет для наших целей, потому что объекты вызова у нас также задаются параметрами шаблона.</p>
<p>Итак, у нас есть два набора: объекты вызова и данные, передаваемые в вызов. Какой набор упаковать в кортеж, а какой в пакет параметров? Рассмотрим различные способы упаковки наборов.</p>
</section><section><title><p>5.3.2. Способ 1: объекты в пакет, данные в кортеж</p>
</title><p>При использовании данного способа реализация распределения практически совпадает с описанной в Листинг 65 п. 5.2.2 с той разницей, что для передачи данных используется не переменная, а кортеж (Листинг 68).</p>
<subtitle><emphasis>Листинг 68. Распределение при упаковке объектов в пакет и данных в кортеж</emphasis></subtitle><p><code>template &lt;typename CallData&gt;</code></p>
<p><code>void Call(CallData&amp; data)  // (1)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>template &lt;typename CallData, typename First, typename…Others&gt;</code></p>
<p><code>void Call(CallData&amp; data, First&amp; first, Others&amp;…rest)  // (2)</code></p>
<p><code>{</code></p>
<p><code>  std::apply(first, data);  // (3)</code></p>
<p><code>  Call(data, rest…);      // (4)</code></p>
<p><code>}</code></p>
<empty-line/><p><code>template &lt;typename… CallData, typename… CallObjects&gt;</code></p>
<p><code>void Distribute1(std::tuple&lt;CallData…&gt; data, CallObjects… objects)  // (5)</code></p>
<empty-line/><p><code>{</code></p>
<p><code>  Call(data, objects…);  // (6)</code></p>
<p><code>}</code></p>
<empty-line/><p>Распределяющая функция объявлена в строке 5. Входными параметрами функции являются кортеж данных вызова <strong>data</strong> и пакет объектов вызова <strong>objects</strong>, типы их содержимого задаются параметрами шаблона. Внутри этой функции, в строке 6, происходит первый вызов рекурсивной функции, которой передаются соответствующие аргументы – кортеж и пакет.</p>
<p>Рекурсивная функция объявлена в строке 2. Эта функция извлекает очередной объект из пакета и осуществляет его вызов (строка 3). Здесь используется функция стандартной библиотеки <strong>std::apply</strong>, которая преобразует содержимое кортежа в список аргументов. Далее, в строке 4, пакет с оставшимися параметрами передается в рекурсивный вызов <strong>Call</strong>, и процесс повторяется до завершения рекурсии.</p>
</section><section><title><p>5.3.3. Способ 2: объекты в кортеж, данные в пакет</p>
</title><p>При использовании данного способа необходимо пройти по всем элементам кортежа и осуществить вызовы хранимых в нем объектов, передавая на вход пакет данных. Как осуществить обход содержимого кортежа?</p>
<p>Доступ к элементам кортежа осуществляется с помощью вызова</p>
<p>std::get&lt;index&gt;(tuple),</p>
<p>где <strong>index</strong> – это порядковый номер элемента (начиная с 0), <strong>tuple</strong> – имя переменной-кортежа. Проблема в том, что индексы должны быть заранее определены как числовые константы, использование переменной для задания индекса не допускается<a l:href="#n30" type="note">31</a>. Поэтому здесь нельзя использовать ни циклы, ни функции с входным аргументом – индексом.</p>
<p>Можно попробовать объявить шаблон функции, в которой индекс задается параметром шаблона, а внутри функции изменить индекс и осуществить рекурсивный вызов. По идее, в этом случае для каждого индекса должна была бы сгенерироваться отдельная специализированная функция, однако стандарт не допускает специализацию шаблонов функций<a l:href="#n31" type="note">32</a>. Но специализация шаблонов классов допустима, поэтому выходом будет обернуть функцию в класс – оболочку и уже для класса объявлять специализацию по индексам. Реализация приведена в Листинг 69.</p>
<subtitle><emphasis>Листинг 69. Распределение при упаковке объектов в кортеж и данных в пакет</emphasis></subtitle><p><code>template&lt;std::size_t Index, typename CallObjects, typename… CallData&gt;  // (1)</code></p>
<p><code>struct TupleIterator</code></p>
<p><code>{</code></p>
<p><code>  static void IterateTupleItem(CallObjects&amp; callObjects, CallData…callData)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>    const std::size_t idx = std::tuple_size_v&lt;CallObjects&gt; – Index;  // (3)</code></p>
<p><code>    std::get&lt;idx&gt;(callObjects)(callData…);                         // (4)</code></p>
<p><code>    TupleIterator&lt;Index – 1, CallObjects, CallData…&gt;::IterateTupleItem(callObjects, callData…);  // (5)</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template&lt;typename CallObjects, typename… CallData&gt;  // (6)</code></p>
<p><code>struct TupleIterator&lt;0, CallObjects, CallData…&gt;     // (7)</code></p>
<p><code>{</code></p>
<p><code>  static void IterateTupleItem(CallObjects&amp; callObjects, CallData… callData)  // (8)</code></p>
<p><code>  {</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template&lt;typename… CallObjects, typename… CallData&gt;                         // (9)</code></p>
<p><code>void Distribute2(std::tuple&lt;CallObjects…&gt; callObjects, CallData… callData)  // (10)</code></p>
<p><code>{</code></p>
<p><code>  TupleIterator  // (11)</code></p>
<p><code>  &lt;</code></p>
<p><code>  sizeof…(CallObjects),      // (12)</code></p>
<p><code>  std::tuple&lt;CallObjects…&gt;,  // (13)</code></p>
<p><code>  CallData…                  // (14)</code></p>
<p><code>&gt;</code></p>
<p><code>::IterateTupleItem(callObjects, callData…);  // (15)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявляется шаблон структуры. Параметрами шаблона выступают индекс элемента кортежа, сам кортеж и пакет параметров, который определяет данные, передаваемые в вызываемый объект.</p>
<p>Внутри структуры в строке 2 объявлена функция, осуществляющая выполнение вызова для элемента кортежа. Входными параметрами этой функции будет кортеж объектов вызова и пакет данных вызова, элемент кортежа определяется индексом – параметром шаблона. Функция объявлена статической, чтобы не объявлять экземпляр структуры в процессе вызова. По сути дела, структура здесь не несет функциональной нагрузки, она выступает в качестве оболочки, чтобы обеспечить специализацию функции по индексу (поскольку непосредственная специализация шаблонов функций невозможна).</p>
<p>В строке 3 осуществляется пересчет индекса: от размера (количества элементов) кортежа отнимается текущий индекс. Это необходимо для того, чтобы обход кортежа осуществлялся в прямом порядке, от первого элемента к последнему. Если не выполнять пересчет индексов, то обход будет происходить в обратном порядке.</p>
<p>В строке 4 осуществляется вызов объекта. С помощью вызова <strong>get</strong> по пересчитанному индексу осуществляется доступ к соответствующему элементу кортежа. Для указанного элемента выполняется вызов, на вход ему передается пакет данных <strong>callData</strong>, распакованный в список аргументов.</p>
<p>В строке 5 происходит рекурсивный вызов. Объявляется структура с новым значением параметра-индекса, уменьшенным на единицу. Вызывается соответствующая функция с передачей кортежа объектов и пакета параметров, и процесс повторяется заново.</p>
<p>С каждой итерацией значение индекса уменьшается, и когда оно станет равным нулю, необходимо остановить итерации, поскольку все элементы кортежа будут посещены. Для этой цели в строке 6 объявлена специализация структуры для нулевого индекса. Тело функции в этой структуре пустое, таким образом, рекурсия будет завершена.</p>
<p>В строке 9 объявлен шаблон распределяющей функции. Этот шаблон имеет два пакета параметров: пакет объектов вызова и пакет данных вызова, типы содержимого пакетов будут выводиться из входных аргументов. В строке 10 объявляется сама функция, которая на вход принимает два аргумента: кортеж объектов вызова и пакет данных вызова.</p>
<p>В строке 11 запускается процесс итерации путем инстанциирования шаблона <strong>TupleIterator</strong>. Аргументами шаблона выступают: количество объектов вызова (строка 12), вычисляется с помощью операции <strong>sizeof </strong>применительно к соответствующему пакету параметров; кортеж объектов вызова (строка 13); данные, передаваемые в вызов (строка 14). В строке 15 вызывается стартовая функция итерации с передачей соответствующих аргументов. Как видим, начальное значение индекса равно количеству объектов вызова, которое затем с каждой новой итерацией будет уменьшаться на единицу, в то время как пересчитываемый индекс, соответственно, увеличивается.</p>
</section><section><title><p>5.3.4. Способ 3: объекты и данные в кортежах</p>
</title><p>При использовании данного способа реализация практически повторяет рассмотренную в предыдущем параграфе, только вместо пакета данных будет использоваться кортеж (Листинг 70).</p>
<subtitle><emphasis>Листинг 70. Распределение при упаковке объектов и данных в кортежи</emphasis></subtitle><p><code>template&lt;std::size_t Index, typename CallObjects, typename CallData&gt;          // (1)</code></p>
<p><code>struct TupleIterator3</code></p>
<p><code>{</code></p>
<p><code>  static void IterateTupleItem(CallObjects&amp; callObjects, CallData&amp; callData)  // (2)</code></p>
<p><code>  {</code></p>
<p><code>      const std::size_t idx = std::tuple_size_v&lt;CallObjects&gt; – Index;         // (3)</code></p>
<p><code>      std::apply(std::get&lt;idx&gt;(callObjects), callData);                       // (4)</code></p>
<p><code>      TupleIterator3&lt;Index – 1, CallObjects, CallData&gt;::IterateTupleItem(callObjects, callData);  // (5)</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template&lt;typename CallObjects, typename CallData&gt;  // (6)</code></p>
<p><code>struct TupleIterator3&lt;0, CallObjects, CallData&gt;    // (7)</code></p>
<p><code>{</code></p>
<p><code>  static void IterateTupleItem(CallObjects&amp; callObjects, CallData&amp; callData)  // (8)</code></p>
<p><code>  {</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template&lt;typename… CallObjects, typename… CallData&gt;                                     // (9)</code></p>
<p><code>void Distribute3(std::tuple&lt;CallObjects…&gt; callObjects, std::tuple&lt;CallData…&gt; callData)  // (10)</code></p>
<p><code>{</code></p>
<p><code>  TupleIterator3               // (11)</code></p>
<p><code>  &lt;</code></p>
<p><code>  sizeof…(CallObjects),      // (12)</code></p>
<p><code>  std::tuple&lt;CallObjects…&gt;,  // (13)</code></p>
<p><code>  std::tuple&lt;CallData…&gt;      // (14)</code></p>
<p><code>  &gt;</code></p>
<p><code>  ::IterateTupleItem(callObjects, callData);  // (15)</code></p>
<p><code>}</code></p>
<empty-line/><p>По сравнению с Листинг 69 п. 5.3.3 изменения здесь следующие. Входными параметрами распределяющей функции (строка 10) являются кортеж объектов и кортеж данных (ранее параметр для данных задавался пакетом). В объявлениях шаблонов структур для обхода кортежа (строки 1, 6) параметр, определяющий данные вызова, объявляется как тип (ранее это был пакет). Вызов объекта (строка 4) осуществляется через <strong>std::apply</strong> (ранее объект вызывался непосредственно). И еще здесь изменены имена структур, чтобы избежать конфликта имен с предыдущей реализацией.</p>
</section><section><title><p>5.3.5. Сравнение способов</p>
</title><p>В Листинг 71 приведен пример распределения вызовов с использованием различных способов настройки сигнатуры, в качестве данных выступают два числовых значения.</p>
<subtitle><emphasis>Листинг 71. Распределение вызовов с заданной сигнатурой</emphasis></subtitle><p><code>void ExternalHandler(int eventID, int contextID) {}</code></p>
<empty-line/><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>void callbackHandler(int eventID, int contextID) {}</code></p>
<p><code>void operator() (int eventID, int contextID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>int eventID = 0, contextID = 1;</code></p>
<empty-line/><p><code>FO fo;</code></p>
<p><code>auto lambda = [](int eventID, int contextID) {};</code></p>
<p><code>auto cb2cl = std::bind(&amp;FO::callbackHandler, fo, _1, _2);</code></p>
<empty-line/><p><code>Distribute1(std::tuple(eventID, contextID), ExternalHandler, fo, cb2cl, lambda);</code></p>
<p><code>Distribute2(std::tuple(ExternalHandler, fo, cb2cl, lambda), eventID, contextID);</code></p>
<p><code>Distribute3(std::tuple(ExternalHandler, fo, cb2cl, lambda), std::tuple(eventID, contextID));</code></p>
<p><code>}</code></p>
<empty-line/><p>С точки зрения эффективности все три способа, в общем-то, равноценны. С точки зрения дизайна можно сказать следующее: первый способ самый простой в реализации; второй способ позволяет легко модифицировать код для сбора дополнительной информации при выполнении вызовов; третий способ позволяет передавать дополнительные параметры в функцию распределения, если это необходимо.</p>
</section><section><title><p>5.3.6. Настройка сигнатуры для перенаправления</p>
</title><p>В рассмотренных выше примерах мы предполагали, что все получатели используют одну и ту же сигнатуру вызова. Но что делать, если они имеют разные сигнатуры? Нам необходимо разработать какой-то объект, который бы обеспечивал следующее: настройку входной сигнатуры, в которую передаются данные вызова; настройку выходной сигнатуры, которая определяется получателем; преобразование одной сигнатуры в другую. По сути дела, необходимо обеспечить перенаправление вызовов, что решается с помощью инструментов STL, а именно – объектов связывания (см. п. 4.6.2). В этом случае в функцию распределителя вместо объекта-получателя передается объект-связывание, который осуществляет перенаправление вызова с заданной сигнатурой. Пример реализации приведен в Листинг 72; здесь в качестве распределяющей функции используется реализация из Листинг 69 п. 5.3.3.</p>
<subtitle><emphasis>Листинг 72. Перенаправление вызовов с настройкой сигнатуры</emphasis></subtitle><p><code>void NativeHandler(int eventID)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void ExternalHandler(int eventID, int contextID)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  void operator() (int eventID, int contextID) {}</code></p>
<p><code>  void callbackHandler(int eventID, int contextID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0, contextID = 0;</code></p>
<p><code>  FO fo;</code></p>
<p><code>  auto lambda = [](int eventID, int contextID) {};</code></p>
<empty-line/><p><code>  Distribute2(std::tuple(   // (1)</code></p>
<p><code>    NativeHandler,          // (2)</code></p>
<p><code>    std::bind(ExternalHandler, std::placeholders::_1, contextID),           // (3)</code></p>
<p><code>    std::bind(&amp;FO:: callbackHandler, fo, std::placeholders::_1, contextID), // (4)</code></p>
<p><code>    std::bind(&amp;FO::operator(), fo, std::placeholders::_1, contextID),       // (5)</code></p>
<p><code>    std::bind(lambda, std::placeholders::_1, contextID)                     // (6)</code></p>
<p><code>    ),</code></p>
<p><code>    eventID // (7)</code></p>
<p><code>  );</code></p>
<p><code>}</code></p>
<empty-line/><p>Входными аргументами распределяющей функции служат кортеж объектов вызова (объявлен в строке 1) и данные вызова (строка 7). В строке 2 в кортеж передается объект вызова с сигнатурой, совпадающей с исходной. В строке 3 передается объект связывания (результат вызова <strong>std::bind</strong>), в котором исходный вызов перенаправляется в назначенную функцию <strong>ExternalHandler</strong>. В строке 4 объект связывания перенаправляет вызов в метод-член структуры, в строке 5 – в перегруженный оператор, в строке 6 – в лямбда-выражение.</p>
</section></section><section><title><p>5.4. Возврат результатов выполнения</p>
</title><section><title><p>5.4.1. Получение возвращаемых значений</p>
</title><p>До сих пор мы считали, что функции, реализующие код вызова, не возвращают результатов. Однако в некоторых случаях необходимо получить результаты выполнения вызовов. Очевидно, что в этом случае их должна вернуть распределяющая функция. Как же сформировать возвращаемые значение?</p>
<p>Поскольку возвращаемые значения могут иметь различные типы, напрашивается сохранять их в кортеже, который затем будет возвращаться как результат работы распределяющей функции. Но мы же не знаем заранее типы возвращаемых значений, их определяют объекты вызова. Какие тогда типы задавать при инстанциировании переменной-кортежа? Можно предложить следующее решение: при объявлении кортежа не указывать явно хранимые в нем типы, а в конструктор в качестве входных аргументов передать результаты выполнения вызовов. В этом случае типы элементов кортежа будут выведены автоматически.</p>
<p>Но сформировать набор результатов выполнения не так-то просто. Мы не можем перечислить в списке аргументов запрос объекта по индексу и его вызов, ведь количество объектов заранее не известно. Поэтому предварительно необходимо сформировать последовательность индексов, которая разворачивается в контексте запроса и вызова объекта. Реализация приведена в Листинг 73.</p>
<subtitle><emphasis>Листинг 73. Распределение вызовов с возвратом результатов</emphasis></subtitle><p><code>template &lt;typename… CallObjects, std::size_t… indices, typename…CallData&gt;              // (1)</code></p>
<p><code>auto  DistributeReturnImpl(std::tuple&lt;CallObjects…&gt;&amp; callObjects, std::index_sequence&lt;indices…&gt;, CallData… callData)  // (2)</code></p>
<p><code>{</code></p>
<p><code>  return std::tuple(std::get&lt;indices&gt;(callObjects)(callData…)…);                         // (3)</code></p>
<p><code>}</code></p>
<empty-line/><p><code>template&lt;typename… CallObjects, typename…CallData&gt;                               // (4)</code></p>
<p><code>auto DistributeReturn(std::tuple&lt;CallObjects…&gt; callObjects, CallData… callData)  // (5)</code></p>
<p><code>{</code></p>
<p><code>  return DistributeReturnImpl(                                                     // (6)</code></p>
<p><code>    callObjects,                                                                   // (7)</code></p>
<p><code>    std::make_index_sequence&lt;sizeof…(CallObjects)&gt; (),                           // (8)</code></p>
<p><code>    callData…);                                                                  // (9)</code></p>
<p><code>}</code></p>
<empty-line/><p>Шаблон распределяющей функции объявлен в строке 4, параметрами шаблона являются пакет объектов вызова и пакет данных вызова. Сама функция объявлена в строке 5, входными параметрами являются кортеж вызываемых объектов, параметризованный пакетом объектов, и пакет данных вызова. Возвращаемое значение функции объявлено как <strong>auto</strong>, что означает, что оно будет выводиться из возвращаемого значения.</p>
<p>Для использования рассматриваемого распределения появляется требование, чтобы все объекты вызова возвращали результаты. Это связано с тем, что кортеж не может хранить типы <strong>void</strong>. Для вызовов, которые не возвращают результат, можно использовать любой из способов, описанный в главе 5.3.</p>
<p>В строке 6 вызывается вспомогательная функция, которой передается кортеж объектов вызова 7, последовательность индексов 8, данные вызова 9. Последовательность индексов формируется с помощью конструкции <strong>std::make_index_sequence, </strong>которой на вход в качестве значения передается размер пакета вызываемых объектов (определяется с помощью <strong>sizeof</strong>…).</p>
<p>В строке 1 объявлен шаблон вспомогательной функции, параметрами шаблона выступают пакет объектов вызова <strong>CallObjects</strong>, пакет индексов <strong>Indices</strong> и пакет данных вызова <strong>CallData</strong>. Сама функция объявлена в строке 2, ее входными параметрами являются: кортеж вызываемых объектов, параметризованный пакетом объектов вызова; последовательность индексов, параметризованная пакетом индексов; пакет данных вызова. Данная функция возвращает кортеж, сформированный по результатам вызова. Для получения элемента кортежа используется вызов <strong>std::get</strong>, на вход которому передается индекс элемента, и затем происходит вызов полученного элемента, на вход которому передаются данные <strong>callData</strong>. А поскольку вместо конкретного индекса мы используем последовательность индексов, она будет развернута в набор вызовов <strong>get</strong> с соответствующими индексами, таким образом, осуществляя вызовы для все элементов кортежа в соответствии с их индексами. Графически рассмотренная операция для трех объектов изображена на Рис. 23.</p>
<empty-line/><image l:href="#i_038.png"/><p>Рис. 23. Формирование кортежа возвращаемых значений</p>
<empty-line/></section><section><title><p>5.4.2. Анализ результатов</p>
</title><p>Итак, мы получили возвращаемые значения в виде кортежа. Как нам проанализировать полученные результаты? Существуют следующие способы анализа содержимого кортежа:</p>
<p>• доступ к элементам кортежа по индексу с помощью <strong>std::get</strong>;</p>
<p>• обход кортежа;</p>
<p>• использование структурных привязок.</p>
<p>Пример анализа значений, возвращаемых распределением вызовов, приведен в Листинг 74.</p>
<subtitle><emphasis>Листинг 74. Анализ возвращаемых значений</emphasis></subtitle><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  int operator() (int eventID)</code></p>
<p><code>  {</code></p>
<p><code>    return 10;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>};</code></p>
<empty-line/><p><code>struct SResult</code></p>
<p><code>{</code></p>
<p><code>  unsigned int code;</code></p>
<p><code>  const char* description;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>SResult ExternalHandler(int eventID)</code></p>
<p><code>{</code></p>
<p><code>  return SResult{ 1, "this is an error" };</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  FO fo;</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  auto lambda = [](int eventID) { return 0.0; };</code></p>
<empty-line/><p><code>  auto results = DistributeReturn( std::tuple(fo, ExternalHandler, lambda), eventID);  // (1)</code></p>
<empty-line/><p><code>  int foRes = std::get&lt;0&gt;(results);             // (2)</code></p>
<p><code>  SResult ExtRes = std::get&lt;1&gt;(results);        // (3)</code></p>
<p><code>  double lambdaRes = std::get&lt;2&gt;(results);      // (4)</code></p>
<empty-line/><p><code>  auto [foRes1, ExtRes1, lambdaRes1] = results; // (5)</code></p>
<p><code>  auto [foRes2, ExtRes2, lambdaRes2] = DistributeReturn(std::tuple(fo, ExternalHandler, lambda), eventID);  // (6)</code></p>
<p><code>}</code></p>
<empty-line/><p>После выполнения распределения в строке 1 в переменную <strong>results </strong>помещен кортеж с результатами выполнения вызова. В строках 2, 3, 4 показано получение результатов с помощью запроса элементов кортежа по индексу, в строке 5 показано использование структурных привязок. В строке 6 показано, как можно использовать структурные привязки без промежуточной переменной <strong>results</strong>. Обход кортежа здесь не рассматривается, поскольку он был подробно описан в п. 5.3.3.</p>
</section></section><section><title><p>5.5. Распределитель для статического набора</p>
</title><section><title><p>5.5.1. Распределение без возврата результатов</p>
</title><p>До сих пор мы выполняли распределение с помощью функции, что вызывает определенные неудобства. Во-первых, вызов распределяющей функции получается громоздким, потому что приходится перечислять все объекты, участвующие в распределении. Во-вторых, требуются дополнительные операции, потому что в зависимости от способа настройки либо объекты вызова, либо аргументы сигнатуры необходимо упаковать в кортеж. Хорошим решением было бы предварительно сохранить нужные объекты, для чего нам понадобится распределитель в виде класса. Реализация приведена в Листинг 75.</p>
<subtitle><emphasis>Листинг 75. Распределитель для статического набора получателей</emphasis></subtitle><p><code>template&lt;typename… CallObjects&gt;  // (1)</code></p>
<p><code>class StaticDistributorVoid</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  StaticDistributorVoid (CallObjects… objects) : callObjects(objects…) {}  // (2)</code></p>
<p><code>  auto&amp; tuple() {  return callObjects; }  // (3)</code></p>
<empty-line/><p><code>  template&lt;typename… CallData&gt;          // (4)</code></p>
<p><code>  void operator() (CallData… callData)</code></p>
<p><code>  {</code></p>
<p><code>    Distribute2(callObjects, callData…);</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  std::tuple&lt;CallObjects…&gt; callObjects;  // (5)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен шаблон класса, параметром которого выступает пакет объектов вызова. Кортеж для хранения объектов объявлен в строке 5, он инициализируется в конструкторе 2. Для доступа к кортежу реализован метод 3, который позволяет, если необходимо, изменить его содержимое.</p>
<p>В строке 4 объявлен перегруженный оператор, который осуществляет распределение. Этот оператор вызывает распределяющую функцию (реализацию см. Листинг 69 п. 5.3.3), которую при желании можно сделать членом класса.</p>
<empty-line/><p>Пример использования распределителя приведен в Листинг 76.</p>
<subtitle><emphasis>Листинг 76. Использование распределителя для статического набора</emphasis></subtitle><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  void operator() (int eventID) {}</code></p>
<p><code>  void callbackHandler(int eventID) {}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>void ExternalHandler(int eventID) {}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  FO fo;</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  auto lambda = [](int eventID) {};</code></p>
<p><code>  auto callbackToMethod = std::bind(&amp;FO::callbackHandler, fo, std::placeholders::_1);</code></p>
<empty-line/><p><code>  StaticDistributorVoid distributor(ExternalHandler, fo, callbackToMethod, lambda);  // (1)</code></p>
<empty-line/><p><code>  distributor(eventID);  // (2)</code></p>
<p><code>}</code></p>
<empty-line/><p>Как видим, использование очень простое: в строке 1 объявляется распределитель, в конструктор передаются объекты вызова, через перегруженный оператор 2 производятся вызовы сохраненных объектов.</p>
</section><section><title><p>5.5.2. Распределение с возвратом результатов</p>
</title><p>Если нужно получить значения, возвращаемые вызовами, то в распределителе необходимо модифицировать перегруженный оператор (Листинг 77).</p>
<subtitle><emphasis>Листинг 77. Распределитель для статического набора с возвратом результатов</emphasis></subtitle><p><code>template&lt;typename… CallObjects&gt;  // (1)</code></p>
<p><code>class StaticDistributorReturn</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  StaticDistributorReturn(CallObjects… objects) : callObjects(objects…) {}  // (2)</code></p>
<p><code>  auto&amp; tuple() { return callObjects; }  // (3)</code></p>
<empty-line/><p><code>  template&lt;typename… CallData&gt;         // (4)</code></p>
<p><code>  auto operator() (CallData… callData)</code></p>
<p><code>  {</code></p>
<p><code>      return DistributeReturn(callObjects, callData…);</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  std::tuple&lt;CallObjects…&gt; callObjects;  // (5)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 4 объявлен перегруженный оператор с возвращаемым типом <strong>auto</strong>. Указанный тип будет выведен из значения, возвращаемого соответствующей распределяющей функцией. (реализацию см. в Листинг 73 п. 5.4.1).</p>
<empty-line/><p>Пример использования распределителя приведен в Листинг 78.</p>
<subtitle><emphasis>Листинг 78. Использование распределителя для статического набора с возвратом результатов</emphasis></subtitle><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  int operator() (int eventID) { return 10; }</code></p>
<p><code>  int callbackHandler(int eventID) { return 0; }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>struct SResult</code></p>
<p><code>{</code></p>
<p><code>  unsigned int code;</code></p>
<p><code>  const char* description;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>SResult ExternalHandler(int eventID)</code></p>
<p><code>{</code></p>
<p><code>  return SResult{ 1, "this is an error" };</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  FO fo;</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  auto lambda = [](int eventID) { return 0.0; };</code></p>
<p><code>  auto callbackToMethod = std::bind(&amp;FO::callbackHandler, fo, std::placeholders::_1);</code></p>
<empty-line/><p><code>  StaticDistributorReturn distributor(ExternalHandler, fo, callbackToMethod, lambda);  // (1)</code></p>
<empty-line/><p><code>  auto [resExtHandler, resFoOperator, resFoMethod, resLambda] = distributor(eventID);  // (2)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявляется распределитель, в конструктор передаются объекты вызова. Через перегруженный оператор 2 производятся вызовы хранимых объектов, результаты возвращаются с помощью структурных привязок.</p>
<empty-line/><p>К сожалению, мы не можем использовать рассмотренную реализацию для объектов, которые не возвращают результатов. Это связано с тем, что результаты выполнения вызовов возвращаются через кортеж, а он не может хранить типы <strong>void</strong>. Для таких вызовов нужно использовать реализацию, рассмотренную в предыдущем параграфе.</p>
</section><section><title><p>5.5.3. Параметризация возвращаемого значения</p>
</title><p>Итак, у нас имеется отдельная реализация распределителя для случая, когда результаты вызовов не требуются, и отдельная реализация для случая, когда необходимо получать возвращаемые значения. Обе реализации одинаковы, за исключением перегруженного оператора. Как сделать общую реализацию для обеих случаев? Разместить два перегруженных оператора в одном классе не получится, потому что они различаются только типом возвращаемого значения. Можно предложить следующее решение: ввести в шаблон дополнительный параметр, который указывает, нужно ли возвращать результаты выполнения вызовов, и в зависимости от этого по-разному формировать перегруженный оператор с помощью условной компиляции. Реализация приведена в Листинг 79.</p>
<subtitle><emphasis>Листинг 79. Условная компиляция в зависимости от типа возвращаемого значения</emphasis></subtitle><p><code>template&lt;typename… CallObjects&gt;  // (1)</code></p>
<p><code>class StaticDistributor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  StaticDistributor(CallObjects… objects) : callObjects(objects…) {}  // (2)</code></p>
<p><code>  auto&amp; tuple() { return callObjects; }  // (3)</code></p>
<empty-line/><p><code>  template&lt;typename… CallData&gt;  </code></p>
<p><code>  auto operator() (CallData… callData)  // (4)</code></p>
<p><code>  {</code></p>
<empty-line/><p><code>#define callObject std::get&lt;0&gt;(callObjects)          // (5)</code></p>
<p><code>#define callObjType decltype(callObject)             // (6)</code></p>
<p><code>#define callObjInstance std::declval&lt;callObjType&gt;()  // (7)</code></p>
<p><code>#define testCall callObjInstance(callData…)        // (8)</code></p>
<p><code>#define retType decltype(testCall)                   // (9)</code></p>
<empty-line/><p><code>  //if constexpr (std::is_same_v&lt;void, decltype(std::declval&lt;decltype(std::get&lt;0&gt;(callObjects))&gt;()(callData…))&gt;)  // (10)</code></p>
<p><code>  if constexpr (std::is_same_v&lt;void, retType&gt;)         // (11)</code></p>
<p><code>    return Distribute2(callObjects, callData…);      // (12)</code></p>
<p><code>  else                              </code></p>
<p><code>    return DistributeReturn(callObjects, callData…);  // (13)</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  std::tuple&lt;CallObjects…&gt; callObjects;</code></p>
<p><code><code>};</code></code></p>
<empty-line/><p>В строках 1 – 4 код идентичен реализации распределителя в предыдущих случаях (Листинг 75 п. 5.5.1, Листинг 77 п. 5.5.2). Интерес представляет реализация перегруженного оператора (строка 4).</p>
<p>Макросы в строках 5 – 9 предназначены только для облегчения понимания кода, без них конструкция получается запутанной (строка 10).</p>
<p>В строке 5 мы получаем объект вызова, для которого будет проверяться, возвращает ли он значение. Мы запрашиваем нулевой элемент кортежа, поскольку предполагается, что кортеж содержит хотя-бы один объект (иначе зачем распределять вызовы для пустого кортежа?).</p>
<p>В строке 6 определяется тип объекта, который мы запросили. В строке 7 объявляется мета-экземпляр объекта соответствующего типа. Мы говорим «мета-экземпляр», потому что реально объект не создается, но его характеристики используются компилятором для анализа. Конструкция <strong>declval</strong> необходима, чтобы не было ошибки в случае, если объект не имеет конструктора по умолчанию.</p>
<p>В строке 8 производится мета-вызов с передачей параметров.  Мета-вызов здесь имеет тот же смысл, что и мета-экземпляр, т. е. в реальности вызов не производится, а используется для анализа. В строке 9 определяется тип значения, возвращаемого мета-вызовом.</p>
<p>В строке 11 проверяется, является ли тип возвращаемого значения void, и в этом случае вызывается распределяющая функция без возврата результатов (строка 12). В противном случае вызывается распределяющая функция, возвращающая результаты (строка 13).</p>
<empty-line/><p>Использование распределителя с условной компиляцией приведено в Листинг 80.</p>
<subtitle><emphasis>Листинг 80. Условная компиляция в зависимости от типа возвращаемого значения</emphasis></subtitle><p><code>struct FOReturn</code></p>
<p><code>{</code></p>
<p><code>  int operator() (int eventID) {return 10;}</code></p>
<p><code>};</code></p>
<empty-line/><p><code>struct FOVoid</code></p>
<p><code>{</code></p>
<p><code>  void operator() (int eventID) {  /*do something*/  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>struct SResult</code></p>
<p><code>{</code></p>
<p><code>  unsigned int code;</code></p>
<p><code>  const char* description;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>SResult ExternalReturn(int eventID)</code></p>
<p><code>{</code></p>
<p><code>  return SResult{ 1, "this is an error" };</code></p>
<p><code>}</code></p>
<empty-line/><p><code>void ExternalVoid(int eventID)</code></p>
<p><code>{</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  FOReturn foRet;</code></p>
<p><code>  FOVoid   foVoid;</code></p>
<empty-line/><p><code>  auto lambdaRet = [](int eventID) { return 0.0; };</code></p>
<p><code>  auto lambdaVoid = [](int eventID) {};</code></p>
<empty-line/><p><code>  using FunPtrRet = SResult(*)(int);</code></p>
<p><code>  using LambdaTypeRet = decltype(lambdaRet);</code></p>
<p><code>  using FunPtrVoid = void(*)(int);</code></p>
<p><code>  using LambdaTypeVoid = decltype(lambdaVoid);</code></p>
<empty-line/><p><code>  StaticDistributor&lt;FOReturn, FunPtrRet, LambdaTypeRet&gt;  distributor1(foRet, ExternalReturn, lambdaRet);  // (1)</code></p>
<p><code>  StaticDistributor&lt;FOVoid, FunPtrVoid, LambdaTypeVoid&gt;  distributor2(foVoid, ExternalVoid, lambdaVoid);  // (2)</code></p>
<empty-line/><p><code>  auto results = distributor1(eventID);</code></p>
<p><code>  distributor2(eventID);</code></p>
<p><code><code>}</code></code></p>
<empty-line/><p>Как видим, в обоих случаях объявляется один и тот же распределитель, а из свойств объектов распределения будет генерироваться соответствующий перегруженный оператор.</p>
</section></section><section><title><p>5.6. Динамический набор получателей</p>
</title><section><title><p>5.6.1. Распределение в динамическом наборе</p>
</title><p>В предыдущих параграфах мы рассматривали статический набор получателей, когда типы и количество получателей определены на этапе компиляции и остаются неизменными. Теперь рассмотрим динамический набор, когда типы и количество получателей заранее неизвестны и изменяются в процессе выполнения программы. В какой-то степени реализация здесь получается проще: у нас не будет специализаций, рекурсий, выведения типов и прочей так называемой «шаблонной магии», все решается обычными методами классического программирования.</p>
<p>Итак, поскольку количество объектов заранее не определено, для их хранения необходим динамический контейнер. Однако он не может хранить объекты непосредственно, поскольку они могут иметь разные типы, а динамический контейнер работает с данными одного строго определенного типа. Выходом будет хранить универсальные аргументы, а уже в них сохранять объекты вызова. Структурная схема изображена на Рис. 24.</p>
<empty-line/><image l:href="#i_040.png"/><p>Рис. 24. Структурная схема распределителя для динамического набора получателей</p>
<empty-line/><p>Оптимальным решением будет реализация распределителя в виде класса, который, кроме выполнения распределения, будет поддерживать операции с контейнером. Конечно же, проектировать динамический контейнер и универсальный аргумент не нужно – в STL имеется все необходимое. Контейнер, в общем-то, можно использовать любой, а на роль универсального аргумента нет ничего лучше, чем <strong>std::function</strong>. Реализация приведена в Листинг 81.</p>
<subtitle><emphasis>Листинг 81. Распределитель для динамического набора получателей</emphasis></subtitle><p><code>template&lt;typename unused&gt; class DynamicDistributor;  // (1)</code></p>
<empty-line/><p><code>template&lt;typename Return, typename… ArgumentList&gt;  // (2)</code></p>
<p><code>class DynamicDistributor&lt;Return(ArgumentList…)&gt;</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  template &lt;typename CallObject&gt;</code></p>
<p><code>  void addCallObject(CallObject object)        // (3)</code></p>
<p><code>  {</code></p>
<p><code>    callObjects.push_back(object);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void operator ()(ArgumentList… arguments)  // (4)</code></p>
<p><code>  {</code></p>
<p><code>    for (auto&amp; callObject : callObjects)</code></p>
<p><code>    {</code></p>
<p><code>      callObject(arguments…);</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  std::list&lt; std::function&lt;Return(ArgumentList …)&gt; &gt; callObjects;  // (5)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлена общая специализация шаблона. Реализация класса здесь отсутствует, поскольку для каждой сигнатуры она будет различной. В строке 2 объявлен шаблон для частичной специализации, в котором два аргумента: тип возвращаемого значения и пакет параметров, передаваемых на вход вызова. Подобную конструкцию мы использовали, когда рассматривали настройку сигнатуры для универсального аргумента (п. 4.5.2).</p>
<p>В строке 3 объявлен метод, который добавляет объект вызова в контейнер, сам контейнер объявлен в строке 5. Тип контейнера мы выбираем список, поскольку он не перемещает элементов при вставке/удалении, а произвольный доступ здесь не требуется. Типом хранимых данных в контейнере является объект <strong>std::function</strong>, аргументы которого задаются исходя из параметров в объявлении шаблона класса.</p>
<p>В строке 4 объявлен перегруженный оператор, который осуществляет распределение вызовов, т. е. является распределяющей функцией. Он обходит элементы контейнера и осуществляет вызов в соответствии с списком аргументов, типы которых задаются в пакете параметров шаблона.</p>
</section><section><title><p>5.6.2. Получение возвращаемых значений</p>
</title><p>Как получить возвращаемые значения для динамического набора? На момент вызова распределяющей функции количество получателей может быть любым, и, соответственно, число возвращаемых значений заранее не определено. Использовать динамический контейнер как возвращаемое значение функции является плохой идеей: во-первых, заполнение контейнера и создание его копии в стеке требует значительного расхода времени и увеличивает фрагментацию памяти; во-вторых, если возвращаемое значение не используется, то все вышеописанное будет работать «вхолостую», выполняя совершенно ненужные операции. Использовать контейнер как входной параметр – это тоже идея не очень: мы вынуждаем привязаться к контейнеру определенного типа, а если нам результаты нужно хранить в других структурах? А если нам вообще их не нужно хранить, а нужно всего лишь проверить? Вопросы, вопросы… Можно предложить следующее решение: для возврата результата использовать обратный вызов, а пользователь сам решает, что делать с возвращаемыми значениями. Реализация приведена в Листинг 82.</p>
<subtitle><emphasis>Листинг 82. Возврат значений для динамического набора получателей</emphasis></subtitle><p><code>template &lt;typename Return, typename… ArgumentList&gt;</code></p>
<p><code>class DynamicDistributor&lt;Return(ArgumentList…)&gt;</code></p>
<p><code>{</code></p>
<p><code>  /**********************……**********************************/</code></p>
<empty-line/><p><code>  template&lt;typename CallbackReturn &gt;  // (1)</code></p>
<p><code>  void operator()(CallbackReturn callbackReturn, ArgumentList… arguments)</code></p>
<p><code>  {</code></p>
<p><code>    for (auto&amp; callObject : callObjects)</code></p>
<p><code>    {</code></p>
<p><code>        callbackReturn(callObject(arguments…));  // (2)</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  std::list&lt; std::function&lt;Return(ArgumentList …)&gt; &gt; callObjects;</code></p>
<p><code>};</code></p>
<empty-line/><p>Реализация совпадает с Листинг 82 п. 5.6.1, только добавляется еще один перегруженный оператор. Его шаблон объявлен строке 1, параметром шаблона является тип аргумента, через который будет выполняться обратный вызов. В строке 2 происходит вызов объекта, результат возвращается через аргумент, переданный как входной параметр функции.</p>
<empty-line/><p>Пример распределения вызовов для динамического набора получателей приведен в Листинг 83.</p>
<subtitle><emphasis>Листинг 83. Распределение вызовов для динамического набора получателей</emphasis></subtitle><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  int operator() (int eventID) { return 10; }</code></p>
<p><code>  int callbackHandler(int eventID) { return 100; }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int ExternalHandler(int eventID)</code></p>
<p><code>{</code></p>
<p><code>  return 0;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<empty-line/><p><code>  FO fo;</code></p>
<p><code>  auto lambda = [](int eventID) { return 0; };</code></p>
<p><code>  auto binding = std::bind(&amp;FO::callbackHandler, fo, std::placeholders::_1);</code></p>
<empty-line/><p><code>  DynamicDistributor&lt;int(int)&gt; distributor;       // (1)</code></p>
<empty-line/><p><code>  distributor.addCallObject(fo);                  // (2)</code></p>
<p><code>  distributor.addCallObject(ExternalHandler);     // (3)</code></p>
<p><code>  distributor.addCallObject(binding);             // (4)</code></p>
<p><code>  distributor.addCallObject(lambda);              // (5)</code></p>
<empty-line/><p><code>  distributor(eventID);                           // (6)</code></p>
<empty-line/><p><code>  auto onReturnValue = [](int callResult) {};     // (7)</code></p>
<p><code>  distributor(onReturnValue, eventID);            // (8)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 инстанциирован класс распределителя с заданной сигнатурой функции. В строке 2, 3, 4, 5 в распределитель добавляются объекты вызова различного типа. В строке 6 запускается распределение вызовов, в результате которого будут вызваны добавленные объекты. В строке 7 объявлено лямбда-выражение для получения результатов, при вызове соответствующего оператора 8 это выражение будет вызвано для каждого возвращаемого значения.</p>
<empty-line/><p>Касательно модификации содержимого контейнера наш распределитель поддерживает только одну операцию – добавление получателя. Ни удаление, ни модификация получателей не поддерживается. Это связано с тем, что получатели не идентифицированы, и поэтому невозможно узнать, в каком элементе контейнера хранится соответствующий объект вызова<a l:href="#n32" type="note">33</a>. Далее мы рассмотрим, как можно решить указанную проблему.</p>
</section></section><section><title><p>5.7. Адресное распределение</p>
</title><section><title><p>5.7.1. Понятие адресного распределения</p>
</title><p>До сих пор мы предполагали, что вызовы должны быть сделаны для всех получателей. Однако зачастую требуется распределять вызовы не всем, а только некоторым получателям из списка.</p>
<p>Как это реализовать? Прежде всего, необходимо как-то идентифицировать получателей, для чего вводится понятие адреса. Каждому получателю присваивается адрес, и с каждым адресом связывается универсальный аргумент, который хранит объект вызова. Таким образом, зная адреса получателей, можно осуществлять вызовы только для конкретных объектов. Попутно решается задача изменения списка получателей: по заданному адресу возможно удаление/изменение соответствующего аргумента.</p>
<p>Что может быть адресом? Все что угодно: числа, строки, структуры и т. п. Единственное требование, предъявляемое к адресу, заключается в том, что он должен быть уникальным, в противном случае невозможно однозначно идентифицировать получателя. Мы сделаем тип адреса параметром шаблона, а пользователь сам решит, что использовать в качестве адреса.</p>
<p>Теперь в функцию распределителя, помимо данных, будет передаваться адрес. Источник должен найти аргумент, которому соответствует полученный адрес, и выполнить для него вызов. Для поиска необходимо сравнивать адреса, но ведь мы не знаем их типы: теперь это параметр шаблона, и тип используемого адреса станет известен только после инстанциирования. По этой причине мы не можем производить сравнение адресов напрямую, для этого необходимо использовать предикаты (см. п. 4.3.3).</p>
<p>Какой выбрать контейнер? На эту роль лучше других подойдет <strong>std::map</strong>. Во-первых, не нужно вводить новую структуру для хранения адреса и аргумента, контейнер реализует ее естественным образом в виде пары «ключ-значение». И, во-вторых, <strong>std::map </strong>осуществляет быстрый поиск по ключу, в качестве которого выступает адрес. Структурная схема изображена на Рис. 25.</p>
<empty-line/><image l:href="#i_041.png"/><p>Рис. 25. Структурная схема адресного распределения</p>
</section><section><title><p>5.7.2. Адресный распределитель</p>
</title><p>Реализация адресного распределителя приведена в Листинг 84.</p>
<subtitle><emphasis>Листинг 84. Распределитель для адресного набора получателей</emphasis></subtitle><p><code>template &lt;typename Address, typename AddressCompare, typename Function&gt; class AddressDistributor;  // (1)</code></p>
<empty-line/><p><code>template &lt;typename Address, typename AddressCompare, typename Return, typename… ArgumentList&gt;    // (2)</code></p>
<p><code>class AddressDistributor&lt;Address, AddressCompare, Return(ArgumentList…)&gt;                         // (3)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  template&lt;typename CallObject&gt;  // (4)</code></p>
<p><code>  void addReceiver(Address address, CallObject object)</code></p>
<p><code>  {</code></p>
<p><code>    callObjects.insert({ address,object } );</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void deleteReceiver(Address address)  // (5)</code></p>
<p><code>  {</code></p>
<p><code>    callObjects.erase(address);</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  Return operator()(Address address, ArgumentList… arguments)  // (6)</code></p>
<p><code>  {</code></p>
<p><code>    auto iterator = callObjects.find(address);  // (7)</code></p>
<p><code>    if (iterator != callObjects.end())</code></p>
<p><code>    {</code></p>
<p><code>      return iterator-&gt;second(arguments…);    // (8)</code></p>
<p><code>    }</code></p>
<p><code>    else</code></p>
<p><code>    {</code></p>
<p><code>      throw std::invalid_argument("Invalid receiver address");  // (9)</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>private:</code></p>
<p><code>  std::map&lt; Address, std::function&lt;Return(ArgumentList…)&gt;, AddressCompare  &gt; callObjects;  // (10)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлена общая специализация шаблона, параметрами выступают адрес получателя <strong>Address</strong>, предикат для сравнения <strong>AddressCompare</strong> и сигнатура распределяющей функции <strong>Function</strong>. Реализация здесь отсутствует, поскольку для каждой сигнатуры требуется отдельная специализация – аналогично настройке сигнатуры для универсального аргумента (п. 4.5.2).</p>
<p>В строке 2 объявлена частичная специализация, в которой дополнительно представлены параметр для возвращаемого значения <strong>Return </strong>и пакет параметров <strong>ArgumentList </strong>для аргументов функции. В строке 3 объявлен класс, который специализируется сигнатурой из указанных параметров.</p>
<p>В строке 4 объявлен шаблон метода для добавления получателя, который принимает адрес <strong>address</strong>, вызываемый объект <strong>object</strong> и добавляет их в контейнер. В строке 5 объявлен метод для удаления получателя. Оба метода работают с контейнером, который объявлен в строке 10. Контейнер объявлен как <strong>std::map</strong>, ключом является адрес, а значением – объект <strong>std::function</strong> с заданной сигнатурой.</p>
<p>В строке 6 объявлен перегруженный оператор, который осуществляет распределение вызовов, т. е. является распределяющей функцией. Он пробегает по всем элементам контейнера и осуществляет вызов в соответствии с списком аргументов, типы которых задаются в пакете параметров шаблона класса. Поскольку мы используем адресное распределение, т. е. предполагается, что вызов попадает только одному получателю, то мы операторе можем вернуть результат вызова.</p>
<p>В строке 7 происходит поиск получателя по адресу. Если получатель найден, то происходит вызов объекта (строка 8). Если получатель не найден, то генерируется исключение (строка 9), иначе какой результат нам возвратить?</p>
</section><section><title><p>5.7.3. Использование адресного распределения</p>
</title><p>Пример использования адресного распределения приведен в Листинг 85.</p>
<subtitle><emphasis>Листинг 85. Использование адресного распределения</emphasis></subtitle><p><code>struct FO</code></p>
<p><code>{</code></p>
<p><code>  int operator() (int eventID)</code></p>
<p><code>  {</code></p>
<p><code>    return 10;</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int ExternalHandler(int eventID)</code></p>
<p><code>{</code></p>
<p><code>  return 0;</code></p>
<p><code>}</code></p>
<empty-line/><p><code>struct ReceiverAddress  // (1)</code></p>
<p><code>{</code></p>
<p><code>  ReceiverAddress(int idGroup = 0, int idNumber = 0)</code></p>
<p><code>  {</code></p>
<p><code>    group = idGroup; number = idNumber;</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  int group;</code></p>
<p><code>  int number;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>template&lt;&gt;</code></p>
<p><code>struct std::less&lt;ReceiverAddress&gt;  // (2)</code></p>
<p><code>{</code></p>
<p><code>  bool operator() (const ReceiverAddress&amp; addr1, const ReceiverAddress&amp; addr2) const</code></p>
<p><code>  {</code></p>
<p><code>    if (addr1.group &lt; addr2.group)</code></p>
<p><code>    {</code></p>
<p><code>      return true;</code></p>
<p><code>    }</code></p>
<p><code>    else</code></p>
<p><code>    {</code></p>
<p><code>      if (addr1.group == addr2.group)</code></p>
<p><code>        return addr1.number &lt; addr2.number;</code></p>
<p><code>      else</code></p>
<p><code>        return false;</code></p>
<p><code>      }</code></p>
<p><code>  }</code></p>
<p><code>};</code></p>
<empty-line/><p><code>int main()</code></p>
<p><code>{</code></p>
<p><code>  int eventID = 0;</code></p>
<p><code>  FO fo;</code></p>
<p><code>  auto lambda = [](int eventID) { return 0; };</code></p>
<empty-line/><p><code>  AddressDistributor&lt;ReceiverAddress, std::less&lt;ReceiverAddress&gt;, int(int)&gt; distributor;  // (3)</code></p>
<empty-line/><p><code>  distributor.addReceiver({ 1,1 }, fo);               // (4)</code></p>
<p><code>  distributor.addReceiver({ 2,2 }, ExternalHandler);  // (5)</code></p>
<p><code>  distributor.addReceiver({ 3,3 }, lambda);           // (6)</code></p>
<empty-line/><p><code>  distributor({ 1,1 }, eventID);  // (7)</code></p>
<p><code>  distributor({ 2,2 }, eventID);  // (8)</code></p>
<p><code>  distributor({ 3,3 }, eventID);  // (9)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявлена структура для адреса, которая состоит из двух полей: идентификатор группы и номер получателя в группе. Сравнить эти две структуры напрямую нельзя, поэтому потребуется реализовать предикат.</p>
<p>В строке 2 объявлен функциональный объект, реализующий предикат для сравнения адресов. Почему именно в таком виде? Дело в том, что <strong>std::map</strong> требует, чтобы в качестве предиката использовался именно функциональный объект, мы не можем для этого использовать внешнюю функцию или лямбда-выражение. Это связано с тем, что в контейнере предикат хранится в виде переменной с конструктором, тип переменной определяется параметром шаблона. А наличие конструктора может обеспечить только функциональный объект.</p>
<p>Указанный подход имеет как достоинства, так и недостатки. С одной стороны, нам достаточно всего лишь объявить тип объекта в параметре шаблона, а затем про него можно забыть. Объект не нужно ни настраивать, ни передавать в конструктор как входной аргумент. С другой стороны, было бы удобно использовать в качестве предиката что-либо другое, например, лямбда-выражение или внешнюю функцию. Но в этом случае предикат пришлось бы инициализировать в конструкторе, причем ему нельзя было бы назначить значение по умолчанию. В любом случае, мы вынуждены следовать заданной реализации, поэтому предикат объявляем как функциональный объект.</p>
<p>В STL уже объявлен шаблон структуры для предикатов <strong>std::less</strong>, параметром которого выступает тип данных, которые необходимо сравнить. Этот предикат принимает на вход две переменные и возвращает <strong>true</strong>, если первая меньше второй<a l:href="#n33" type="note">34</a>. <strong>std::less </strong>реализует арифметическое сравнение, поэтому для типов, которые поддерживают арифметические операции, предикат объявлять не нужно, он будет сгенерирован компилятором. Однако в нашем случае данные арифметически сравниваться не могут, поэтому мы специализируем этот шаблон своим типом (строка 2) и реализуем перегруженный оператор, который будет сравнивать две структуры. При инстанциировании контейнера компилятор сам выберет подходящую специализацию предиката, исходя из типа хранимых элементов.</p>
<p>В строке 3 объявлен объект распределителя путем инстанциирования соответствующего шаблона. Аргументами шаблона выступают тип адреса, предикат для сравнения и сигнатура для вызова объектов. В строках 4, 5, 6 в распределитель добавляются объекты вызова различных типов, в строках 7, 8, 9 эти объекты будут вызваны в соответствии с их адресами.</p>
</section></section><section><title><p>5.8. Итоги</p>
</title><p>Под распределением вызовов понимается техника, в которой при вызове единственной функции осуществляется выполнение множества вызовов через соответствующие аргументы. Структурно распределение состоит из следующих компонентов: источник, получатель, распределитель, распределяющая функция.</p>
<p>Если типы и количество получателей известны на этапе компиляции и не планируется их изменение в процессе выполнения программы, то мы имеем статический набор получателей. Распределитель для статического набора можно реализовать в виде функции, в этом случае распределитель структурно совпадает с распределяющей функцией.</p>
<p>В общем случае распределяющая функция принимает набор объектов и набор данных вызова. Эти наборы могут упаковываться в кортеж и пакет параметров в различных комбинациях. С точки зрения дизайна каждый способ упаковки имеет свои преимущества и недостатки, с точки зрения эффективности они равноценны.</p>
<p>Если требуются результаты выполнения вызовов, то они реализуются с помощью отдельной распределяющей функции, которая возвращает результаты в виде кортежа.</p>
<p>Зачастую бывает удобно реализовать распределитель для статического набора в виде класса, в котором объекты вызова хранятся в кортеже, а распределяющей функцией выступает перегруженный оператор. Здесь возникает проблема, как использовать класс с возвратом результатов выполнения и без возврата: перегруженный оператор имеет одинаковый набор входных параметров, различается только наличие и отсутствие возвращаемого значения. Выходом будет реализация двух отдельных классов либо общий класс с дополнительным параметром – индикатором. Во втором случае теряется возможность автоматического вывода типа.</p>
<p>Если типы и количество получателей заранее неизвестны и изменяются в процессе выполнения программы, то мы имеем динамический набор получателей. Он реализуется в виде класса с контейнером, в котором хранятся универсальные аргументы.</p>
<p>Если необходима передача вызовов не всем получателям, а только некоторым, то используется адресное распределение. Поскольку тип используемого адреса заранее не определен, то для сравнения адресов нужно использовать предикаты.</p>
<p>На этом изложение теоретического материала можно считать законченным. Далее рассмотрим, как обратные вызовы используются в практике разработки ПО.</p>
</section></section><section><title><p>6. Практическое использование обратных вызовов</p>
</title><section><p>Итак, мы изучили теоретические основы проектирования обратных вызовов, теперь пришло время продемонстрировать, как они используются в реальных системах. Для иллюстрации мы воспользуемся примером разработки модуля управления датчиками из проекта «автоматизированная система управления технологическими процессами», в котором когда-то принимал участие автор. Данный пример адаптирован, в нем опущены многие детали, которые не имеют отношения к рассматриваемой теме. Мы пройдемся через основные этапы проектирования и проследим, как обратные вызовы используются в реальных инженерных задачах.</p>
<p>Подробное описание всех компонентов модуля заняло бы слишком много места и навряд ли имеет практическую ценность, поэтому мы будем рассматривать самые общие принципы функционирования с акцентом на использование обратных вызовов. Полностью проект можно посмотреть здесь: <a l:href="https://github.com/Tkachenko-vitaliy/Callbacks/tree/master/Sensor"><strong>https://github.com/Tkachenko-vitaliy/Callbacks/tree/master/Sensor</strong></a>.</p>
</section><section><title><p>6.1. Разработка архитектуры</p>
</title><section><title><p>6.1.1. Техническое задание</p>
</title><p>Первый вопрос, который должен быть задан перед началом разработки чего бы то ни было, звучит следующим образом: что мы будем разрабатывать и что мы хотим в итоге получить? Этот вопрос совсем не тривиальный, как может показаться вначале. Без ясного осознания конечной цели, без четкого понимания свойств и характеристик, которыми должна обладать проектируемая система, разработка может растянуться до бесконечности: происходят постоянные переделки, доработки, хаотичная реализация все новых и новых функций с не очень понятной ценностью, и т. п. В итоге, вместо результата мы сосредотачиваемся на процессе, а конечная цель пропадает где-то за горизонтом. Не сталкивались с такими проектами? Что ж, вам крупно повезло; чтобы также везло в дальнейшем, и подобные проекты в вашей карьере отсутствовали, любое проектирование нужно начинать с постановки целей, которые выражаются в требованиях, предъявляемых к системе. В нашем случае они будут следующими.</p>
<empty-line/><p><strong>Разработать модуль управления датчиками, который должен обеспечивать:</strong></p>
<p>1. Настройку конфигурации датчиков и возможность ее изменения в процессе работы.</p>
<p>2. Отслеживание состояния и определение неисправности датчиков.</p>
<p>3. Считывание показаний отдельных датчиков.</p>
<p>4. Считывание показаний всех работоспособных датчиков.</p>
<p>5. Асинхронный опрос показаний.</p>
<p>6. Возможность получения минимальных и максимальных значений для группы датчиков.</p>
<p>7. Настройка пороговых значений показателей и уведомление при их превышении.</p>
<p>8. Возможность работы как с реальными физическими датчиками, так и с их программными моделями.</p>
</section><section><title><p>6.1.2. Сценарий функционирования</p>
</title><p>Базовый сценарий функционирования модуля следующий.</p>
<p>Основным компонентом, поставляющим информацию, являются датчики. Они могут производить измерения трех типов: текущее, сглаженное и производное. Для идентификации датчикам присваиваются уникальные номера.</p>
<p>Перед началом работы производится настройка, т. е. определяется состав датчиков, с которых будут сниматься показания. Настройка не статическая, она может изменяться в процессе работы.</p>
<p>В любой момент приложение может запросить показания датчиков как в синхронном, так и в асинхронном режиме. Показания возвращаются только для функционирующих датчиков, в приложении должна иметься возможность проверить их работоспособность.</p>
<p>Коммуникация с датчиками осуществляется через протокол USB либо Ethernet путем пересылки / получения команд в соответствии с заданным протоколом.</p>
<p>В процессе работы модуль должен отслеживать и уведомлять приложение о том, что некоторые показатели превышают заданные пороговое значение. Состав измеряемых значений и их предельные величины настраиваются приложением.</p>
<p>В соответствии с описанием структура системы может быть представлена следующим образом (Рис. 26).</p>
<empty-line/><image l:href="#i_042.png"/><p>Рис. 26. Структурная схема</p>
<empty-line/><p>Приложение через интерфейс обращается к функциям модуля. В зависимости от вызываемой функции интерфейс обращается к соответствующим компонентам и возвращает результат.</p>
<p>Компонент «Асинхронный вызов» предназначен для выполнения асинхронных вызовов. «Наблюдатель» предназначен для отслеживания пороговых значений. «Контейнер» хранит список датчиков. Компонент «Датчик» через компонент «драйвер» обращается к аппаратному обеспечению.</p>
</section><section><title><p>6.1.3. Декомпозиция системы</p>
</title><p>Итак, в соответствии методологией объектно-ориентированного анализа необходимо определить состав классов и связи между ними, отражающие предметную область. Нам будут необходимы следующие классы:</p>
<p>• класс для работы с датчиком;</p>
<p>• контейнер для хранения указанных классов;</p>
<p>• драйвер, обеспечивающий низкоуровневое взаимодействие с аппаратурой;</p>
<p>• очередь для выполнения асинхронных запросов;</p>
<p>• класс для отслеживания пороговых значений;</p>
<p>• интерфейсный класс, который будет взаимодействовать с приложением для вызовов соответствующих функций модуля.</p>
<p>Обобщенная диаграмма классов модуля представлена на Рис. 27<a l:href="#n34" type="note">35</a>.</p>
<empty-line/><image l:href="#i_043.jpg"/><p>Рис. 27. Обобщенная диаграмма классов</p>
<empty-line/><p>Класс <strong>ISensorControl</strong> объявляет интерфейс модуля, класс <strong>SensorControl</strong> реализует указанный интерфейс. <strong>SensorControl</strong> содержит классы <strong>Observer</strong> (отслеживает пороговые значения), <strong>CommandQueue</strong> (очередь комманд для асинхронных запросов), <strong>SensorContainer</strong> (реализует контейнер для хранения классов для работы с датчиком).</p>
<p>Интерфейс для работы с датчиками объявлен в классе <strong>ISensor</strong>, обощенная реализация интерфейса осуществляется в классе <strong>SensorAbstract</strong>. Указанный класс хранит указатель на <strong>IDriver</strong>, который используется для получения значений датчиков. В классе <strong>IDriver</strong> объявляется интерфейс для взаимодействия с аппаратурой.</p>
</section></section><section><title><p>6.2. Реализация классов</p>
</title><section><title><p>6.2.1. Общие определения</p>
</title><p>В Листинг 86 представлены общие объявления типов.</p>
<subtitle><emphasis>Листинг 86. Общие объявления типов (SensorDef.h)</emphasis></subtitle><p><code>namespace sensor</code></p>
<p><code>{</code></p>
<p><code>class ISensor;</code></p>
<p><code>class IDriver;</code></p>
<empty-line/><p><code>using SensorNumber = unsigned int;       // (1)</code></p>
<p><code>using SensorValue = double;              // (2)</code></p>
<p><code>using CheckAlertTimeout = unsigned int;  // (3)</code></p>
<empty-line/><p><code>enum class SensorType : uint32_t  // (4)</code></p>
<p><code>{</code></p>
<p><code>  Spot = 0,</code></p>
<p><code>  Smooth = 1,</code></p>
<p><code>  Derivative = 2,</code></p>
<p><code>};</code></p>
<empty-line/><p><code>enum class DriverType : uint32_t  // (5)</code></p>
<p><code>{</code></p>
<p><code>  Simulation = 0,</code></p>
<p><code>  Usb = 1,</code></p>
<p><code>  Ethernet = 2</code></p>
<p><code>};</code></p>
<empty-line/><p><code>enum class AlertRule : uint32_t // (6)</code></p>
<p><code>{</code></p>
<p><code>  More = 0,</code></p>
<p><code>  Less = 1</code></p>
<p><code>};</code></p>
<empty-line/><p><code>using SensorPointer = std::shared_ptr&lt;ISensor&gt;;  // (7)</code></p>
<p><code>using DriverPointer = std::shared_ptr&lt;IDriver&gt;;  // (8)</code></p>
<p><code>using SensorValueCallback = std::function&lt;void(SensorNumber, SensorValue)&gt;;               // (9)</code></p>
<p><code>using SensorAlertCallback = std::function&lt;CheckAlertTimeout(SensorNumber, SensorValue)&gt;;  // (10)</code></p>
<empty-line/><p><code>}; //namespace sensor</code></p>
<empty-line/><p>В строке 1 объявлен тип для номера датчика, в строке 2 объявлен тип значения, возвращаемого датчиком. В строке 3 объявлен тип значения интервала опроса датчиков для сигнализации пороговых значений.</p>
<p>В строке 4 объявлены идентификаторы типов датчиков, в строке 5 объявлены идентификаторы драйверов. В строке 6 объявлены идентификаторы правил для задания пороговых значений (сигнализация превышения или опускания ниже заданного значения).</p>
<p>В строке 7 объявлен тип для хранения указателей классов датчиков, в строке 8 – тип для хранения указателей классов драйверов. В строке 9 объявлен тип обратного вызова, в который передается значение датчика, в строке 10 – тип обратного вызова, в который передается значение датчика в случае срабатывания сигнализации порогового значения.</p>
</section><section><title><p>6.2.2. Обработка ошибок</p>
</title><p>В процессе работы любой программы могут ситуации, приводящие к ошибкам. Причины ошибок могут быть самыми различными: неправильные действия пользователя, некорректная работа ПО, сбои в работе оборудования и т. п. Таким образом, возникает необходимость реализации подсистемы обработки ошибок, которая осуществляет восстановление работоспособности компонента после возникновения ошибочной ситуации и уведомление об этом пользователя.</p>
<p>В общем случае существуют две модели обработки ошибок: анализ кодов возврата и использование исключений. Несмотря на то, что использование исключений в последнее время подвергается серьезной критике, вплоть до того, что в новых языках программирования от них избавляются, в C++ указанный механизм остается востребованным, и мы также им воспользуемся. Объявления для формирования исключений представлены в Листинг 87.</p>
<subtitle><emphasis>Листинг 87. Исключения для обработки ошибок (Errors.h)</emphasis></subtitle><p><code>namespace sensor</code></p>
<p><code>{</code></p>
<empty-line/><p><code>enum class SensorError: uint32_t  // (1)</code></p>
<p><code>{</code></p>
<p><code>  NoError = 0,</code></p>
<p><code>  NotInitialized = 1,</code></p>
<p><code>  UnknownSensorType = 2,</code></p>
<p><code>  UnknownSensorNumber = 3,</code></p>
<p><code>  SensorIsNotOperable = 4,</code></p>
<p><code>  DriverIsNotSet = 5,</code></p>
<p><code>  InvalidArgument = 6,</code></p>
<p><code>  NotSupportedOperation = 7,</code></p>
<p><code>  InitDriverError = 8</code></p>
<p><code>};</code></p>
<empty-line/><p><code>class sensor_exception : public std::exception    // (2)</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  sensor_exception(SensorError error);</code></p>
<p><code>  SensorError code() const;</code></p>
<p><code>  virtual const char* what() const;</code></p>
<empty-line/><p><code>  static void throw_exception(SensorError error);  // (3)</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  SensorError code_;</code></p>
<p><code>};</code></p>
<empty-line/><p><code>}; //namespace sensor</code></p>
<empty-line/><p>В строке 1 объявлены коды возможных ошибок, в строке 2 объявлен класс исключений. Если при выполнении где-то в коде возникает ошибка, то в этом месте нужно вызвать метод, объявленный в строке 3. Указанный метод выбросит исключение с соответствующим кодом.</p>
</section><section><title><p>6.2.3. Драйвер</p>
</title><p>Драйвер предназначен для взаимодействия с аппаратным обеспечением. Класс, представляющий обобщенный интерфейс для работы с драйвером, приведен в Листинг 88.</p>
<subtitle><emphasis>Листинг 88. Интерфейс для работы с драйвером (DriverInterface.h)</emphasis></subtitle><p><code>namespace sensor</code></p>
<p><code>{</code></p>
<empty-line/><p><code>class IDriver</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  virtual void initialize() = 0;                     // (1)</code></p>
<p><code>  virtual void activate(SensorNumber number) = 0;    // (2)</code></p>
<p><code>  virtual bool isOperable(SensorNumber number) = 0;  // (3)</code></p>
<empty-line/><p><code>  virtual SensorValue readSpot(SensorNumber number) = 0;        // (4)</code></p>
<p><code>  virtual SensorValue readSmooth(SensorNumber number) = 0;      // (5)</code></p>
<p><code>  virtual SensorValue readDerivative(SensorNumber number) = 0;  // (6)</code></p>
<empty-line/><p><code>  virtual ~IDriver() = default;</code></p>
<empty-line/><p><code>  static DriverPointer createDriver(DriverType type);  // (7)</code></p>
<p><code>};</code></p>
<empty-line/><p><code>}; //namespace sensor</code></p>
<empty-line/><p>В строке 1 объявлен метод для инициализации драйвера. В строке 2 объявлен метод для активации датчика. В строке 3 объявлен метод, возвращающий признак работоспособности датчика. В строках 4, 5 и 6 объявлены методы для чтения соответственно текущих, сглаженных и производных значений. Метод в строке 7 представляет собой фабрику классов, в котором происходит создание класса соответствующего типа.</p>
<p>От общего интерфейса наследуются классы, реализующие драйверы различных типов. В нашей системе реализованы три типа драйверов: драйвер для работы с шиной USB; драйвер для работы через сеть Ethernet; имитируемый драйвер. Диаграмма классов изображена на Рис. 28.</p>
<empty-line/><image l:href="#i_044.jpg"/><p>Рис. 28. Диаграмма классов, реализующих драйверы</p>
<empty-line/><p>Драйверы для работы с физическими устройствами формируют команды, посылают их через соответствующие протоколы и возвращают результаты. Реализацию этих драйверов мы рассматривать не будем, поскольку работа с hardware – это отдельная тема, для изучения которой требуется не одна книга. Для нас представляет интерес реализация имитируемого драйвера.</p>
<p>Очевидно, что имитируемый драйвер должен возвращать заранее заданные значения. Самое простое решение, лежащее на поверхности, заключается в том, чтобы хранить эти значения в глобальных или статических переменных и возвращать их в соответствующих методах. Однако в этом случае имитация будет очень примитивной: для всех датчиков будет возвращаться одно и то же значение. Можно хранить свое возвращаемое значение в каждом классе датчика, что больше похоже на работу в реальной системе, но это также не лишено недостатков: мы не можем моделировать изменения показателей в динамике. Лучшим решением было бы предоставить возможность пользователю возвратить значение в момент запроса, для чего нам, конечно же, понадобится обратный вызов. Обратный вызов будет использоваться по схеме «Запрос данных» (см. п. 1.2.1).</p>
<p>Итак, для реализации интерфейса имитируемого драйвера нам понадобятся дополнительные методы и определения (см. Листинг 89).</p>
<subtitle><emphasis>Листинг 89. Имитируемый драйвер (DriverImpl.h)</emphasis></subtitle><p><code>class DriverSimulation : public IDriver</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  enum ReadType { READ_SPOT = 0, READ_SMOOTH = 1, READ_DERIVATIVE = 2 };  // (1)</code></p>
<empty-line/><p><code>  using OnReadValue = std::function&lt;SensorValue(SensorNumber, ReadType)&gt;;  // (2)</code></p>
<p><code>  using OnOperable = std::function&lt;bool(SensorNumber)&gt;;                    // (3)</code></p>
<empty-line/><p><code>  void initialize() override;</code></p>
<p><code>  void activate(SensorNumber number) override;</code></p>
<p><code>  bool isOperable(SensorNumber number) override;</code></p>
<empty-line/><p><code>  void setDefaultValue(SensorValue value);   // (4)</code></p>
<p><code>  void setDefaultOperable(bool isOperable);  // (5)</code></p>
<p><code>  void setReadValue(OnReadValue value);      // (6)</code></p>
<p><code>  void setOperable(OnOperable operable);     // (7)</code></p>
<empty-line/><p><code>  SensorValue readSpot(SensorNumber number) override;       // (8)</code></p>
<p><code>  SensorValue readSmooth(SensorNumber number) override;     // (9)</code></p>
<p><code>  SensorValue readDerivative(SensorNumber number) override; // (10)</code></p>
<empty-line/><p><code>  static IDriver* create();</code></p>
<empty-line/><p><code>protected:</code></p>
<p><code>  DriverSimulation();</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  OnReadValue getValue_;         // (11)</code></p>
<p><code>  OnOperable getOperable_;       // (12)</code></p>
<p><code>  SensorValue defaultValue_ = 0; // (13)</code></p>
<p><code>  bool defaultOperable_ = true;  // (14)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявляется перечисление для указания используемого метода чтения показателей. В строке 2 и 3 объявляются типы для обратных вызовов. Переменные соответствующих типов для хранения вызовов объявлены в строках 11 и 12. Настройка вызовов производится в методах 6 и 7. Кроме того, объявляются переменные для хранения значений по умолчанию (строки 13 и 14), эти переменные настраиваются в методах 4 и 5.</p>
<p>Реализацию чтения показателей продемонстрируем на примере получения текущего значения датчика (Листинг 90).</p>
<subtitle><emphasis>Листинг 90. Чтение текущего значения датчика в имитируемом драйвере (DriverImpl.cpp)</emphasis></subtitle><p><code>SensorValue DriverSimulation::readSpot(SensorNumber number)</code></p>
<p><code>{</code></p>
<p><code>  if (getValue_)  // (1)</code></p>
<p><code>  {</code></p>
<p><code>    return getValue_(number, READ_SPOT);  // (2)</code></p>
<p><code>  }</code></p>
<p><code>  else</code></p>
<p><code>  {</code></p>
<p><code>    return defaultValue_;  // (3)</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 проверяется, настроен ли обратный вызов. Если настроен, то через него запрашивается значение для соответствующего датчика. Информацией вызова здесь является номер датчика и метод чтения показателей (строка 2). Если обратный вызов не настроен, то возвращается значение по умолчанию (строка 3).</p>
</section><section><title><p>6.2.4. Датчик</p>
</title><p>Обобщенный интерфейсный класс для работы с датчиком приведен в Листинг 91.</p>
<subtitle><emphasis>Листинг 91. Интерфейсный класс для роботы с датчиком (SensorInterface.h)</emphasis></subtitle><p><code>namespace sensor</code></p>
<p><code>{</code></p>
<empty-line/><p><code>class ISensor</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  virtual void setDriver(DriverPointer driverPointer) = 0;  // (1)</code></p>
<p><code>  virtual DriverPointer getDriver() = 0;  // (2)</code></p>
<empty-line/><p><code>  virtual double getValue() = 0;  // (3)</code></p>
<p><code>  virtual bool isOperable() = 0;  // (4)</code></p>
<empty-line/><p><code>  virtual ~ISensor() = default;</code></p>
<empty-line/><p><code>  static SensorPointer createSensor(SensorType type, SensorNumber number, DriverPointer driverPointer);  // (5)</code></p>
<empty-line/><p><code>};</code></p>
<empty-line/><p><code>}; //namespace sensor</code></p>
<empty-line/><p>В строке 1 объявлен метод для настройки драйвера, с которым будет работать датчик. Получить используемый драйвер можно с помощью метода 2. В строках 3 и 4 объявлены методы для получения текущего значения датчика и определения его работоспособности. В строке 5 объявлен метод для создания экземпляра класса соответствующего типа.</p>
<empty-line/><p>В соответствии с требованиями нам необходимо реализовать датчики, которые бы возвращали текущие, сглаженные и производные значения показателей. Для каждого способа реализован отдельный класс; диаграмма классов изображена на Рис. 29.</p>
<empty-line/><image l:href="#i_045.jpg"/><p>Рис. 29. Диаграмма классов, реализующих управление датчиками</p>
<empty-line/><p>Как видно из диаграммы, при вызове метода для получения значения датчик обращается к драйверу, вызывая соответствующие методы. В зависимости от настроенного драйвера будут возвращаться реальные или имитируемые значения.</p>
<empty-line/></section><section><title><p>6.2.5. Контейнер</p>
</title><p>Контейнер предназначен для хранения экземпляров классов для управления датчиками. Объявление класса приведено в Листинг 92.</p>
<subtitle><emphasis>Листинг 92. Объявление контейнера (SensorContainer.h)</emphasis></subtitle><p><code>namespace sensor</code></p>
<p><code>{</code></p>
<p><code>  class ISensor;</code></p>
<empty-line/><p><code>  class SensorContainer</code></p>
<p><code>  {</code></p>
<p><code>  public:</code></p>
<p><code>    void addSensor(SensorNumber number, SensorPointer sensor);  // (1)</code></p>
<p><code>    void deleteSensor(SensorNumber number);                     // (2)</code></p>
<p><code>    SensorPointer checkSensorExist(SensorNumber number);        // (3)</code></p>
<p><code>    SensorPointer findSensor(SensorNumber number);              // (4)</code></p>
<empty-line/><p><code>    template&lt;typename CallbackIterate&gt;</code></p>
<p><code>    void forEachSensor(CallbackIterate&amp;&amp; callback)  // (5)</code></p>
<p><code>    {</code></p>
<p><code>      for (auto item : container_)                // (6)</code></p>
<p><code>      {</code></p>
<p><code>        callback(item.first, item.second);</code></p>
<p><code>      }</code></p>
<p><code>    }</code></p>
<p><code>private:</code></p>
<p><code>    std::map&lt;SensorNumber, SensorPointer&gt; container_;  // (7)</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>};</code></p>
<empty-line/><p>Хранилище объектов реализовано в виде двоичного дерева (строка 7). Ключом здесь выступает номер датчика, содержимым является указатель на класс управления датчиком. Методы для добавления и удаления указателей объявлены в строках 1 и 2.</p>
<p>Метод в строке 3 возвращает указатель на объект класса, если последний с заданным номером содержится в хранилище, в противном случае возвращается нулевой указатель. Метод в строке 4 возвращает указатель на объект класса для соответствующего номера; если объект отсутствует, то генерируется исключение.</p>
<p>Метод 5 предназначен для итерации по всем хранимым объектам. Здесь используется обратный синхронный вызов (см. п. 1.4.1) по схеме «перебор элементов» (см. п. 1.2.3). Реализация осуществляет перебор всех элементов хранилища, для каждого элемента выполняется соответствующий вызов. Метод реализован в виде шаблона, что позволяет его использование для различных типов объектов. Входным параметром метода выступает объект вызова, объявленный как ссылка на r-value. Такое объявление позволяет передавать выражения или временные копии объектов.</p>
</section><section><title><p>6.2.6. Асинхронные запросы</p>
</title><p>Для реализации асинхронных запросов объявляется очередь, в которую помещаются все поступающие запросы. Обработка очереди происходит в отдельном потоке. Поток извлекает очередной запрос и для него выполняет обратный вызов. Объявление класса для выполнения асинхронных вызовов приведено в Листинг 93.</p>
<subtitle><emphasis>Листинг 93. Класс для выполнения асинхронных вызовов (CommandQueue.h)</emphasis></subtitle><p><code>class CommandQueue</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void start();  // (1)</code></p>
<p><code>  void stop();   // (2)</code></p>
<p><code>  void addCommand(SensorNumber number, SensorPointer pointer, SensorValueCallback callback);  // (3)</code></p>
<empty-line/><p><code>private:</code></p>
<p><code>  struct Command  // (4)</code></p>
<p><code>  {</code></p>
<p><code>    SensorNumber number;</code></p>
<p><code>    SensorPointer pointer;</code></p>
<p><code>    SensorValueCallback callback;</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>  std::queue&lt;Command&gt; commandQueue_ ;    // (5)</code></p>
<p><code>  std::condition_variable conditional_;  // (6)</code></p>
<p><code>  std::mutex mutex_;                     // (7)</code></p>
<p><code>  std::thread queueThread_;              // (8)</code></p>
<p><code>  bool exit_;                            // (9)</code></p>
<empty-line/><p><code>  void readCommand();  // (10)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 4 объявлена структура, в которой будут храниться данные для выполнения вызова: номер датчика, указатель на класс датчика и объект вызова. В строке 5 объявлен контейнер, который будет хранить указанные структуры. В строках 6 и 7 объявлены переменные для синхронизации операций записи/чтения очереди, в строке 8 объявлен класс для запуска потока обработки очереди, в строке 9 объявлен индикатор для завершения работы потока.</p>
<p>В строке 1 объявлен метод, который запускает поток обработки очереди, в строке 2 объявлен метод для остановки этого потока. Метод, объявленный в строке 3, добавляет переданные данные в очередь путем создания экземпляра структуры 4 и размещения ее в контейнере 5.</p>
<p>Обработка очереди реализована в методе, объявленном в строке 10. Поток обработки очереди вызывает этот метод, который, в свою очередь, ожидает поступления записей и обрабатывает их. Реализация приведена в Листинг 95.</p>
<subtitle><emphasis>Листинг 94. Обработка очереди запросов (CommandQueue.cpp)</emphasis></subtitle><p><code>void CommandQueue::readCommand()</code></p>
<p><code>{</code></p>
<p><code>  while (!exit_)  // (1)</code></p>
<p><code>  {</code></p>
<p><code>    std::unique_lock&lt;std::mutex&gt; lock(mutex_);  // (2)</code></p>
<empty-line/><p><code>    conditional_.wait(lock, [this]() {return commandQueue_.size() &gt; 0 || exit_ == true; });  // (3)</code></p>
<empty-line/><p><code>    while (commandQueue_.size() &gt; 0 &amp;&amp; exit_ == false)      // (4)</code></p>
<p><code>    {</code></p>
<p><code>      Command cmd = commandQueue_.front();                // (5)</code></p>
<p><code>      commandQueue_.pop();                                // (6)</code></p>
<p><code>      lock.unlock();                                      // (7)</code></p>
<p><code>      cmd.callback(cmd.number, cmd.pointer-&gt;getValue());  // (8)</code></p>
<p><code>      lock.lock();  // (9)</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
<empty-line/><p>Пока не установлен индикатор завершения (устанавливается в методе <strong>stop</strong>), выполняется цикл 1. Вначале блокируется мьютекс 2 (это необходимо для корректной работы условной переменной), затем осуществляется ожидание условной переменной 3. Когда метод <strong>addCommand</strong> сформировал новую запись и добавил ее в контейнер, он инициирует срабатывание условной переменной, и поток выполнения переходит к циклу 4 (мьютекс при этом оказывается заблокирован). Этот цикл работает, пока очередь не опустеет либо будет установлен индикатор выхода.</p>
<p>В строке 5 из контейнера извлекается очередная запись, в строке 6 эта запись удаляется из контейнера. В строке 7 снимается блокировка мьютекса, что позволяет добавлять в контейнер новые записи, пока идет обработка очередной команды. В строке 8 осуществляется обратный вызов, в строке 9 мьютекс блокируется вновь, и далее повторяется цикл 4.</p>
</section><section><title><p>6.2.7. Наблюдатель</p>
</title><p>Объявление класса наблюдателя приведено в Листинг 95.</p>
<subtitle><emphasis>Листинг 95. Наблюдатель – класс для отслеживания пороговых значений (Observer.h)</emphasis></subtitle><p><code>class Observer</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  void start();  // (1)</code></p>
<p><code>  void stop();   // (2)</code></p>
<p><code>  void addAlert(SensorNumber number, SensorPointer pointer, SensorAlertCallback callback, SensorValue alertValue, AlertRule alertRule, CheckAlertTimeout checkTimeoutSeс);  // (3)</code></p>
<p><code>  void deleteAlert(SensorNumber number);  // (4)</code></p>
<p><code>private:</code></p>
<empty-line/><p><code>  struct Alert  // (5)</code></p>
<p><code>  {</code></p>
<p><code>    Alert() {}</code></p>
<p><code>    Alert(SensorAlertCallback callback, SensorValue alertValue, AlertRule alertRule, SensorPointer sensor, CheckAlertTimeout checkTimeout):</code></p>
<p><code>    callback(callback), alertValue(alertValue), alertRule(alertRule), sensor(sensor), checkTimeout(checkTimeout), currentTimeout(0)</code></p>
<p><code>    {</code></p>
<p><code>    }</code></p>
<empty-line/><p><code>    SensorAlertCallback callback;</code></p>
<p><code>    SensorValue alertValue;</code></p>
<p><code>    AlertRule alertRule;</code></p>
<p><code>    SensorPointer sensor;</code></p>
<p><code>    CheckAlertTimeout checkTimeout;</code></p>
<p><code>    CheckAlertTimeout currentTimeout;</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>  std::map&lt;SensorNumber, Alert&gt; containerAlert;  // (6)</code></p>
<p><code>  std::thread pollThread_;                       // (7)</code></p>
<p><code>  bool exit_;                                    // (8)</code></p>
<p><code>  std::mutex mutex_;                             // (9)</code></p>
<empty-line/><p><code>  void poll();                                   // (10)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен метод для запуска процесса отслеживания пороговых значений, в строке 2 – метод для останова. Метод в строке 3 добавляет датчик для отслеживания, метод 4 – удаляет.</p>
<p>В строке 5 объявлена структура, в которой хранятся данные, необходимые для отслеживания показаний датчика. В строке 6 объявлен контейнер для хранения указанных структур; метод <strong>addAlert</strong> добавляет запись в контейнер, метод <strong>deleteAlert</strong> удаляет ее. В строке 7 объявлен класс для запуска потока для отслеживания, в строке 8 объявлен индикатор выхода, в строке 9 объявлен мьютекс для синхронизации.</p>
<p>Отслеживание показаний реализовано в методе, объявленном в строке 10. Поток отслеживания вызывает этот метод, который циклически опрашивает назначенные датчики и в случае превышения пороговых значений осуществляет обратный вызов. Реализация приведена в Листинг 96.</p>
<subtitle><emphasis>Листинг 96. Отслеживание пороговых значений</emphasis></subtitle><p><code>void Observer::poll()</code></p>
<p><code>{</code></p>
<p><code>  using namespace std::chrono_literals;</code></p>
<empty-line/><p><code>  while (!exit_)  // (1)</code></p>
<p><code>  {</code></p>
<p><code>    std::this_thread::sleep_for(1s);           // (2)</code></p>
<p><code>    std::lock_guard&lt;std::mutex&gt; lock(mutex_);  // (3)</code></p>
<empty-line/><p><code>    for (auto&amp; item : containerAlert)  // (4)</code></p>
<p><code>    {</code></p>
<p><code>      Alert&amp; alert = item.second;</code></p>
<p><code>      alert.currentTimeout++;          // (5)</code></p>
<p><code>      if (alert.checkTimeout != 0 &amp;&amp; alert.currentTimeout &gt;= alert.checkTimeout)  // (6)</code></p>
<p><code>      {</code></p>
<p><code>          bool triggerAlert = false;</code></p>
<empty-line/><p><code>          if (alert.alertRule == AlertRule::More)  // (7)</code></p>
<p><code>          {</code></p>
<p><code>            triggerAlert = alert.sensor-&gt;getValue() &gt; alert.alertValue;</code></p>
<p><code>          }</code></p>
<p><code>          else               // (8)</code></p>
<p><code>          {</code></p>
<p><code>            triggerAlert = alert.sensor-&gt;getValue() &lt; alert.alertValue;</code></p>
<p><code>          }</code></p>
<empty-line/><p><code>          if (triggerAlert)  // (9)</code></p>
<p><code>          {</code></p>
<p><code>              alert.checkTimeout = alert.callback(item.first, alert.alertValue);  // (10)</code></p>
<p><code>          }</code></p>
<empty-line/><p><code>          alert.currentTimeout = 0;  // (11)</code></p>
<p><code>        }</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>}</code></p>
<p>В строке 1 объявлен цикл опроса, который выполняется, пока не выставлен индикатор завершения (выставляется в методе <strong>stop</strong>). В строке 2 поток засыпает на 1 секунду, т. е. интервал опроса равен 1 секунде. В строке 3 блокируется мьютекс, чтобы избежать коллизий добавления/удаления элементов в контейнере.</p>
<p>В строке 4 осуществляется опрос элементов, хранящихся в контейнере. Текущее время опроса в строке 5 увеличивается на единицу. Если уведомление разрешено, о чем говорит ненулевое значение <strong>timeout</strong>, и время последнего опроса превысило назначенное время (строка 6), то тогда проверяется, имелось ли превышение пороговых значений в соответствии с назначенными правилами (строки 6, 7). Если превышение зафиксировано (строка 9), то осуществляется обратный вызов (строка 10). Этот вызов возвращает следующий интервал опроса, после чего текущее время сбрасывается (строка 11).</p>
</section><section><title><p>6.2.8. Интерфейсный класс</p>
</title><p>Класс, объявляющий интерфейс для взаимодействия с приложением, представлен в Листинг 97.</p>
<subtitle><emphasis>Листинг 97. Интерфейсный класс (ControlInterface.h)</emphasis></subtitle><p><code>namespace sensor</code></p>
<p><code>{</code></p>
<empty-line/><p><code>  class ISensorControl</code></p>
<p><code>  {</code></p>
<p><code>  public:</code></p>
<p><code>    virtual ~ ISensorControl () = default;</code></p>
<empty-line/><p><code>    virtual void initialize() = 0;  // (1)</code></p>
<p><code>    virtual void shutDown() = 0;    // (2)</code></p>
<p><code>    virtual void assignDriver(DriverPointer driver) = 0;  // (3)</code></p>
<p><code>    virtual DriverPointer getAssignedDriver() = 0;        // (4)</code></p>
<p><code>    virtual DriverPointer getSensorDriver(SensorNumber number) = 0;    // (5)</code></p>
<p><code>    virtual void addSensor(SensorType type, SensorNumber number) = 0;  // (6)</code></p>
<p><code>    virtual void deleteSensor(SensorNumber number) = 0;           // (7)</code></p>
<p><code>    virtual bool isSensorExist(SensorNumber number) = 0;          // (8)</code></p>
<p><code>    virtual bool isSensorOperable(SensorNumber number) = 0;       // (9)</code></p>
<p><code>    virtual SensorValue getSensorValue(SensorNumber number) = 0;  // (10)</code></p>
<p><code>    virtual void querySensorValue(SensorNumber number, SensorValueCallback callback) = 0;  // (11)</code></p>
<p><code>    virtual void readSensorValues(SensorValueCallback callback) = 0;                       // (12)</code></p>
<p><code>    virtual SensorValue getMinValue(SensorNumber first, SensorNumber last) = 0;  // (13)</code></p>
<p><code>    virtual SensorValue getMaxValue(SensorNumber first, SensorNumber last) = 0;  // (14)</code></p>
<p><code>    virtual void setAlert(SensorNumber number, SensorAlertCallback callback, SensorValue alertValue, AlertRule alertRule, CheckAlertTimeout checkTimeoutSeс = 1) = 0;  // (15)</code></p>
<p><code>      virtual void resetAlert(SensorNumber number) = 0;  // (16)</code></p>
<empty-line/><p><code>      static ISensorControl* createControl();            // (17)</code></p>
<p><code>  };</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 и 2 объявлены методы для запуска и останова. В строках 3 и 4 объявлены методы для назначения и получения драйвера. Этот драйвер должен быть создан и назначен в самом начале работы, поскольку он будет передаваться новым создаваемым датчикам. Узнать назначенный драйвер для соответствующего датчика можно в методе 5.</p>
<p>В строках 6 и 7 объявлены методы для добавления и удаления датчика. В методе 8 можно проверить, существует ли датчик с переданным номером, в методе 9 можно проверить, является ли датчик работоспособным.</p>
<p>В строке 10 объявлен метод для чтения текущего показания датчика. В методе 11 осуществляется асинхронный запрос показания датчика, значение будет возвращаться через передаваемый обратный вызов. В строке 12 осуществляется опрос показаний всех работоспособных датчиков, значения также возвращаются через обратный вызов. С помощью методов, объявленных в строках 13 и 14, можно получить минимальное и максимальное значение для набора датчиков с номерами из указанного диапазона.</p>
<p>В строке 15 назначается отслеживание пороговых значений, в строке 16 отслеживание выключается. С помощью метода, объявленного в строке 17, можно создать экземпляр соответствующего интерфейсного класса.</p>
<empty-line/><p>Класс, реализующий интерфейс, приведен в Листинг 98.</p>
<subtitle><emphasis>Листинг 98 Класс, реализующий интерфейс (SensorControl.h)</emphasis></subtitle><p><code>namespace sensor</code></p>
<p><code>{</code></p>
<empty-line/><p><code>class ISensor;</code></p>
<p><code>class IDriver;</code></p>
<p><code>class CommandQueue;</code></p>
<p><code>class AlertControl;</code></p>
<p><code>class SensorContainer;</code></p>
<empty-line/><p><code>class SensorControl: public ISensorControl</code></p>
<p><code>{</code></p>
<p><code>  public:</code></p>
<p><code>    SensorControl();</code></p>
<p><code>    ~SensorControl();</code></p>
<p><code>    void initialize() override;</code></p>
<p><code>    /* Other Interface methods – they are not displayed here*/</code></p>
<empty-line/><p><code>  private:</code></p>
<p><code>    SensorContainer* sensorContainer_;   // (1)</code></p>
<p><code>    CommandQueue* commandQueue_;         // (2)</code></p>
<p><code>    AlertControl* alertControl_;         // (3)</code></p>
<p><code>    bool isInitialized_;                 // (4)</code></p>
<p><code>    DriverPointer driver_;               // (5)</code></p>
<empty-line/><p><code>    void checkInitialize();  // (6)</code></p>
<p><code>    void checkDriver();      // (7)</code></p>
<p><code>};</code></p>
<empty-line/><p><code>}; //namespace sensor</code></p>
<empty-line/><p>В строке 1 объявлен контейнер для хранения датчиков, в строке 2 – класс для выполнения асинхронных запросов, в строке 3 – класс для отслеживания пороговых значений. Соответствующие указатели создаются в конструкторе и уничтожаются в деструкторе. Индикатор 4 указывает, была ли выполнена инициализация.</p>
<p>В строке 6 объявлен вспомогательный метод, который проверяет, была ли выполнена инициализация (если нет, выбрасывает исключение). В строке 7 аналогичный метод проверяет, был ли установлен драйвер.</p>
<empty-line/><p>Рассмотрим, как здесь используются обратные вызовы. Для начала самый простой случай – чтение показаний работоспособных датчиков (Листинг 99).</p>
<subtitle><emphasis>Листинг 99. Обратные вызовы в классе, реализующем интерфейс (SensorControl.cpp)</emphasis></subtitle><p><code>void SensorControl::readSensorValues(SensorValueCallback callback)</code></p>
<p><code>{</code></p>
<p><code>  checkInitialize();  // (1)</code></p>
<empty-line/><p><code>  sensorContainer_-&gt;forEachSensor([callback](SensorNumber number, SensorPointer sensor)  // (2)</code></p>
<p><code>    {</code></p>
<p><code>      if (sensor-&gt;isOperable())  // (3)</code></p>
<p><code>      {</code></p>
<p><code>        callback(number, sensor-&gt;getValue());  // (4)</code></p>
<p><code>      }</code></p>
<p><code>    }</code></p>
<p><code>  );</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 производится проверка, инициализирован ли класс. Если класс не проинициализирован, то функция выбросит исключение.</p>
<p>В строке 2 происходит перебор элементов контейнера, в качестве обратного вызова используется лямбда-выражение. Контейнер будет вызывать лямбда-выражение, в которое он будет передавать номер датчика и указатель на экземпляр класса. В теле выражения проверяется, является ли датчик работоспособным (строка 3), и если да, то выполняется соответствующий обратный вызов (строка 4).</p>
<empty-line/><p>Рассмотрим теперь поиск максимального и минимального значения для заданного диапазона номеров датчиков. Вначале разработаем вспомогательный класс, который будет последовательно принимать на вход показания датчиков и искать среди них максимальное и минимальное значение (Листинг 100).</p>
<subtitle><emphasis>Листинг 100. Класс для анализа минимального и максимального значения (SensorControl.cpp)</emphasis></subtitle><p><code>class FindMinMaxValue</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  enum MinMaxSign { MIN_VALUE = 0, MAX_VALUE = 1 };  // (1)</code></p>
<empty-line/><p><code>  FindMinMaxValue(SensorNumber first, SensorNumber last, MinMaxSign sign) :  // (2)</code></p>
<p><code>    sign_(sign), first_(first), last_(last), count_(0)</code></p>
<p><code>  {</code></p>
<p><code>    if (sign == MIN_VALUE)</code></p>
<p><code>    {</code></p>
<p><code>      result_ = std::numeric_limits&lt;SensorValue&gt;::max();  // (3)</code></p>
<p><code>    }</code></p>
<p><code>    else</code></p>
<p><code>    {</code></p>
<p><code>      result_ = std::numeric_limits&lt;SensorValue&gt;::min();  // (4)</code></p>
<p><code>    }</code></p>
<empty-line/><p><code>    arrayFunMinMax_[MIN_VALUE] = &amp;FindMinMaxValue::CompareMin;  // (5)</code></p>
<p><code>    arrayFunMinMax_[MAX_VALUE] = &amp;FindMinMaxValue::CompareMax;  // (6)</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void operator()(SensorNumber number, SensorPointer sensor)                  // (7)</code></p>
<p><code>  {</code></p>
<p><code>    if ( sensor-&gt;isOperable() &amp;&amp; (number &gt;= first_ &amp;&amp; number &lt;= last_) )  // (8)</code></p>
<p><code>    {</code></p>
<p><code>        (this-&gt;*arrayFunMinMax_[sign_])(sensor-&gt;getValue());              // (9)</code></p>
<p><code>        count_++;                                                         // (10)</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<p><code>  SensorValue result() { return result_; }  // (11)</code></p>
<p><code>  size_t count() { return count_; }         // (12)</code></p>
<p><code>private:</code></p>
<p><code>  SensorNumber first; // (13)</code></p>
<p><code>  SensorNumber last;  // (14)</code></p>
<p><code>  MinMaxSign sign;    // (15)</code></p>
<p><code>  SensorValue result; // (16)</code></p>
<p><code>  size_t count;       // (17)</code></p>
<empty-line/><p><code>  using FunMinMax = void (FindMinMaxValue::*)(SensorValue value);  // (18)</code></p>
<empty-line/><p><code>  void CompareMin(SensorValue value)  // (19)</code></p>
<p><code>  {</code></p>
<p><code>      if (result_ &gt; value)</code></p>
<p><code>      {</code></p>
<p><code>          result_ = value;</code></p>
<p><code>      }</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  void CompareMax(SensorValue value)  // (20)</code></p>
<p><code>  {</code></p>
<p><code>    if (result_ &lt; value)</code></p>
<p><code>    {</code></p>
<p><code>      result_ = value;</code></p>
<p><code>    }</code></p>
<p><code>  }</code></p>
<empty-line/><p><code>  FunMinMax arrayFunMinMax_[2];       // (21)</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 2 объявлен конструктор, который принимает на вход следующие параметры: минимальное значение диапазона номеров; максимальное значение диапазона номеров; параметр, указывающий, что необходим поиск минимального либо максимального значения. В конструкторе инициализируются переменные класса: минимальное значение диапазона (объявлено в строке 13); максимальное значение диапазона (объявлено в 14); параметр для поиска (объявлено в 15); итоговый результат (объявлено в 16); количество датчиков, которые участвовали в поиске (объявлено в 17). В зависимости от переданного параметра начальный результат инициализируется соответственно максимальным либо минимальным значением (строки 3 и 4). Кроме того, инициализируется массив указателей на функцию (строки 5 и 6, объявление в 21). Данные функции предназначены для сравнения и запоминания максимального либо минимального значений (объявлены в 19 и 20).</p>
<p>Анализ очередного значения происходит в перегруженном операторе 7. На вход подаются номер датчика и указатель на датчик. Если датчик работоспособный и его номер попадает в заданный диапазон номеров (строка 8), то в зависимости от параметра поиска через указатель вызывается соответствующая функция для анализа (строка 9), а также увеличивается счетчик просмотренных датчиков (строка 10). Функции 11 и 12 возвращают итоговые результаты.</p>
<empty-line/><p>Итак, класс для анализа готов. Теперь можно вызвать метод для итерации по элементам контейнера, и в качестве обратного вызова передать экземпляр соответствующего вспомогательного класса. Метод будет вызывать перегруженный оператор, и таким образом, мы узнаем минимальное либо максимальное значение (Листинг 101).</p>
<subtitle><emphasis>Листинг 101. Поиск минимального и максимального значений (SensorControl.cpp)</emphasis></subtitle><p><code>SensorValue SensorControl::getMinValue(SensorNumber first, SensorNumber last)</code></p>
<p><code>{</code></p>
<p><code>  checkInitialize();</code></p>
<empty-line/><p><code>  FindMinMaxValue fmv(first, last, FindMinMaxValue::MIN_VALUE);</code></p>
<p><code>  sensorContainer_-&gt;forEachSensor(fmv);</code></p>
<p><code>  return fmv.result();</code></p>
<p><code>}</code></p>
<empty-line/><p><code>SensorValue SensorControl::getMaxValue(SensorNumber first, SensorNumber last)</code></p>
<p><code>{</code></p>
<p><code>  checkInitialize();</code></p>
<empty-line/><p><code>  FindMinMaxValue fmv(first, last, FindMinMaxValue::MAX_VALUE);</code></p>
<p><code>  sensorContainer_-&gt;forEachSensor(fmv);</code></p>
<p><code>  return fmv.result();</code></p>
<p><code>}</code></p>
</section></section><section><title><p>6.3. Разработка системного API</p>
</title><section><title><p>6.3.1. API как оболочка</p>
</title><p>Уже после того, как классы модуля были разработаны, протестированы и начали использоваться в системе, появилось новое требование – ввести поддержку системного API. Как известно, в интерфейсах системных API можно использовать только внешние функции и простые структуры данных в стиле C; классы и другие специфические конструкции C++ использовать нельзя (см. п. 1.4.2). Так что же, все теперь придется переписывать? Можно предложить следующее решение: использовать интерфейс API как оболочку для вызова методов класса. Концептуальный пример приведен в Листинг 102.</p>
<subtitle><emphasis>Листинг 102. Концептуальный пример реализации API как оболочки</emphasis></subtitle><p><code>using ControlPointer = std::unique_ptr&lt;sensor::ISensorControl&gt;;</code></p>
<p><code>ControlPointer g_SensorControl(sensor::ISensorControl::createControl());</code></p>
<empty-line/><p><code>void initialize () // This function is declared in the header file as part of API interface</code></p>
<p><code>{</code></p>
<p><code>  g_SensorControl-&gt;initialize();</code></p>
<p><code>}</code></p>
<empty-line/><p>Однако не все так просто, перед нами встают следующие проблемы.</p>
<p>1. В исходной реализации мы использовали специфические типы C++, такие, как std::function, smart pointers и т. п., что не допускается в интерфейсах системных API. Какие типы использовать взамен?</p>
<p>2. Для обработки ошибок в исходной реализации мы использовали исключения. Как сейчас обрабатывать ошибки, ведь в интерфейсах API исключения недопустимы?</p>
<p>3. В исходной реализации мы в каждом потоке могли объявить отдельный интерфейсный класс и работать с ним независимо от остальных потоков. Как теперь обеспечить многопоточную работу, ведь отдельные потоки вызывают одни и те же интерфейсные функции?</p>
<p>4. В исходной реализации драйвер настраивался путем создания нового класса и передаче его в интерфейсный класс. Как теперь настраивать драйвер, если в интерфейсах API нельзя использовать классы?</p>
<p>5. Как организовать обратные вызовы?</p>
<empty-line/><p>Рассмотрим, как эти проблемы можно решить.</p>
</section><section><title><p>6.3.2. Объявления типов</p>
</title><p>В исходной реализации общие типы объявлены в <emphasis>SensorDef.h</emphasis>, но мы не можем просто перенести их в интерфейс API из-за использования специфических конструкций С++. Поэтому нам придется повторить эти объявления в стиле C с использованием простых типов, которые можно будет использовать в интерфейсных функциях. Объявления представлены в Листинг 103.</p>
<subtitle><emphasis>Листинг 103. Объявления типов для интерфейса API (SensorLib.h)</emphasis></subtitle><p><code>#ifdef _WINDOWS  // (1)</code></p>
<p><code>  #ifdef LIB_EXPORTS</code></p>
<p><code>    #define LIB_API __declspec(dllexport)</code></p>
<p><code>  #else</code></p>
<p><code>    #define LIB_API __declspec(dllimport)</code></p>
<p><code>  #endif</code></p>
<p><code>  #else</code></p>
<p><code>    #define LIB_API</code></p>
<p><code>#endif</code></p>
<empty-line/><p><code>typedef uint32_t SensorNumber;       // (2)</code></p>
<p><code>typedef double SensorValue;          // (3)</code></p>
<p><code>typedef uint32_t CheckAlertTimeout;  // (4)</code></p>
<empty-line/><p><code>typedef uint32_t SensorType;         // (5)</code></p>
<p><code>typedef uint32_t DriverType;         // (6)</code></p>
<p><code>typedef uint32_t AlertRule;          // (7)</code></p>
<empty-line/><p><code>typedef void(*SensorValueCallback)(SensorNumber, SensorValue, void*);               // (8)</code></p>
<p><code>typedef CheckAlertTimeout(*SensorAlertCallback)(SensorNumber, SensorValue, void*);  // (9)</code></p>
<p><code>typedef SensorValue(*OnSimulateReadValue)(SensorNumber, int, void*);                // (10)</code></p>
<p><code>typedef int (*OnSimulateOperable)(SensorNumber, void*);                             // (11)</code></p>
<empty-line/><p><code>enum eSensorType  // (12)</code></p>
<p><code>{</code></p>
<p><code>  SENSOR_SPOT = 0,</code></p>
<p><code>  SENSOR_SMOOTH = 1,</code></p>
<p><code>  SENSOR_DERIVATIVE = 2,</code></p>
<p><code>};</code></p>
<empty-line/><p><code>enum eDriverType  // (13)</code></p>
<p><code>{</code></p>
<p><code>  DRIVER_SIMULATION = 0,</code></p>
<p><code>  DRIVER_USB = 1,</code></p>
<p><code>  DRIVER_ETHERNET = 2</code></p>
<p><code>};</code></p>
<empty-line/><p><code>enum  eAlertRule  // (14)</code></p>
<p><code>{</code></p>
<p><code>  ALERT_MORE = 0,</code></p>
<p><code>  ALERT_LESS = 1</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлены определения для экспортируемых функций. Эти объявления необходимы для компиляции динамической библиотеки в среде Windows, для других платформ они неактуальны.</p>
<p>В строках 2–4 объявлены типы, которые будут использоваться для входных параметров интерфейсных функций. Это те же объявления, которые использовались в исходной реализации (SensorDef.h, см. п. 6.2.2).</p>
<p>В строках 5–7 вместо перечислений C++ объявляются простые числовые типы. В экспортируемых функциях нежелательно использовать перечисления как типы входных параметров, потому что размер этих типов в C явно не определен. Вместо этого перечисления используются в качестве числовые констант, они объявлены соответственно в строках 12–14.</p>
<p>В строках 8–11 объявлены типы указателей на функцию для выполнения обратных вызовов. Как видим, в отличие от исходной реализации здесь присутствует дополнительный параметр для указания контекста вызова.</p>
</section><section><title><p>6.3.3. Интерфейс API и обработка ошибок</p>
</title><p>Исходя из концепции «API как оболочка», сигнатура интерфейсных функций API должна повторять сигнатуру методов интерфейсного класса. Однако здесь мы сталкиваемся с некоторыми проблемами, одна из которых – это обработка ошибок.</p>
<p>В исходной реализации мы обрабатывали ошибки с помощью исключений. Теперь исключения использовать нельзя, в системных API они недопустимы. Тем не менее, вызываемая функция должна как-то уведомить о возникновении ошибки, для чего могут использоваться следующие способы:</p>
<p>1) функция возвращает результат, для которого некоторое предопределенное значение говорит о том, что произошла ошибка. Код ошибки возвращается с помощью отдельного вызова;</p>
<p>2) код ошибки возвращается через дополнительный параметр функции;</p>
<p>3) все функции возвращают результат выполнения, который является кодом ошибки.</p>
<p>Ни один способов не является идеальным, каждый имеет свои достоинства и недостатки. Так, в первом способе возникают сложности, если результат, возвращаемый функцией, не имеет значений, которые недопустимы и могут сигнализировать о возникновении ошибки<a l:href="#n35" type="note">36</a>. Во втором способе для всех вызовов придется использовать дополнительную переменную – код ошибки, даже если он нас не интересует. В третьем способе, если функция возвращает результат, то для него приходится использовать отдельный входной параметр, что не всегда удобно.</p>
<p>В нашем случае мы выберем третий способ, исходя из следующих соображений: объявления функций будут выглядеть единообразно; возникновение ошибки можно узнать непосредственно в момент вызова, (например, в операторе if); если функция не возвращает значений, то ей не нужно передавать никакие дополнительные параметры. Объявления интерфейсных функций с возвратом ошибок представлены в Листинг 104.</p>
<subtitle><emphasis>Листинг 104. Интерфейс системного API (SensorLib.h)</emphasis></subtitle><p><code>typedef unsigned int ErrorCode;</code></p>
<empty-line/><p><code>LIB_API ErrorCode initialize();</code></p>
<p><code>LIB_API ErrorCode shutDown();</code></p>
<p><code>LIB_API ErrorCode assignDriver(DriverType type);</code></p>
<p><code>LIB_API ErrorCode getAssignedDriver(DriverType* type);</code></p>
<p><code>LIB_API ErrorCode getSensorDriver(SensorNumber number, DriverType* type);</code></p>
<p><code>LIB_API ErrorCode addSensor(SensorType type, SensorNumber number);</code></p>
<p><code>LIB_API ErrorCode deleteSensor(SensorNumber number);</code></p>
<p><code>LIB_API ErrorCode isSensorExist(SensorNumber number, int* isExist);</code></p>
<p><code>LIB_API ErrorCode isSensorOperable(SensorNumber number, int* isOperable);</code></p>
<p><code>LIB_API ErrorCode getSensorValue(SensorNumber number, SensorValue* value);</code></p>
<p><code>LIB_API ErrorCode querySensorValue(SensorNumber number, SensorValueCallback callback, void* pContextData);</code></p>
<p><code>LIB_API ErrorCode readSensorValues(SensorValueCallback callback, void* pContextData);</code></p>
<p><code>LIB_API ErrorCode getMinValue(SensorNumber first, SensorNumber last, SensorValue* value);</code></p>
<p><code>LIB_API ErrorCode getMaxValue(SensorNumber first, SensorNumber last, SensorValue* value);</code></p>
<p><code>LIB_API ErrorCode setAlert(SensorNumber number, SensorAlertCallback callback, SensorValue alertValue, AlertRule alertRule, CheckAlertTimeout checkTimeoutSeс, void* pContextData);</code></p>
<p><code>LIB_API ErrorCode resetAlert(SensorNumber number);</code></p>
<p><code>LIB_API ErrorCode setSimulateReadCallback(OnSimulateReadValue callback, void* pContextData);</code></p>
<p><code>LIB_API ErrorCode setSimulateOperableCallback(OnSimulateOperable callback, void* pContextData);</code></p>
<empty-line/><p>В реализации этих функций мы будем возвращать код ошибки, получая его из перехваченного исключения. В качестве примера рассмотрим реализацию функции для получения значения датчика (Листинг 105).</p>
<subtitle><emphasis>Листинг 105. Функция для получения значения датчика</emphasis></subtitle><p><code>ErrorCode getSensorValue(SensorNumber number, SensorValue* value)</code></p>
<p><code>{</code></p>
<p><code>  ErrorCode error = ERROR_NO;  // (1)</code></p>
<empty-line/><p><code>  try</code></p>
<p><code>  {</code></p>
<p><code>    *value = g_SensorControl-&gt;getSensorValue(number);  // (2)</code></p>
<p><code>  }</code></p>
<p><code>  catch (sensor::sensor_exception&amp; e)  // (3)</code></p>
<p><code>  {</code></p>
<p><code>    error = e.code();                  // (4)</code></p>
<p><code>  }</code></p>
<p><code>  return error;                        // (5)</code></p>
<p><code>}</code></p>
<empty-line/><p>В строке 1 объявляем переменную – код возврата. В строке 2 осуществляем вызов метода класса, который заключен в блок try. В строке 3 осуществляется перехват исключения, в строке 4 присваивается код ошибки, который возвращается в строке 5.</p>
<empty-line/><p>Итак, мы придумали, как в интерфейсных функциях осуществлять обработку ошибок. Теперь перед нами встает следующая проблема: как настраивать типы драйверов, ведь в исходной реализации для этого используются классы? Прежде чем перейти к решению этой задачи, остановимся на реализации многопоточной работы, поскольку используемые там конструкции нам понадобятся в дальнейшем.</p>
</section><section><title><p>6.3.4. Многопоточная работа</p>
</title><p>В исходной реализации в каждом потоке мы могли создать свой экземпляр класса <strong>ISensorControl</strong> и работать с ним независимо. В случае API это не работает, потому что экземпляр класса в реализации интерфейса объявляется глобальным, и все интерфейсные функции обращаются к одному и тому же экземпляру класса. Выходом здесь будет выделение отдельной области памяти для экземпляра класса в рамках одного потока, т. е. использование локальной памяти потока.</p>
<p>До появления стандарта C++ 11 использовать локальную память потока было непросто: для этого требовалось явное обращение к функциям операционной системы, что усложняло реализацию и делало код платформенно-зависимым. В C++ 11 появилось ключевое слово <strong>thread_local</strong>, и это сильно упростило жизнь: если в объявлении переменной добавить указанный спецификатор, то она становится локальной в рамках потока, т. е. каждый новый создаваемый поток будет иметь независимый экземпляр соответствующей переменной. Таким образом, достаточно экземпляр интерфейсного класса <strong>ISensorControl </strong>объявить как <strong>thread_local</strong>, и теперь для каждого потока будет существовать отдельный независимый экземпляр класса (Листинг 106).</p>
<subtitle><emphasis>Листинг 106. Объявление экземпляра класса как локального для текущего выполняемого потока (SensorLib.cpp)</emphasis></subtitle><p><code>using ControlPointer = std::unique_ptr&lt;sensor::ISensorControl&gt;;</code></p>
<p><code>thread_local ControlPointer g_SensorControl(sensor::ISensorControl::createControl());</code></p>
</section><section><title><p>6.3.5. Настройка драйвера</p>
</title><p>В исходной реализации в начале работы мы создавали необходимый класс драйвера, который затем передавали интерфейсному классу (Листинг 107). Но в интерфейсах системных API мы классы использовать не можем, как поступить в этом случае? Можно предложить следующее решение: класс драйвера создавать внутри API, а в функцию настройки передавать идентификатор, в соответствии с которым будет создан соответствующий драйвер (Листинг 108).</p>
<subtitle><emphasis>Листинг 107. Настройка драйвера в исходной реализации</emphasis></subtitle><p><code>ISensorControl sensorControl = ISensorControl::createControl;</code></p>
<p><code>DriverPointer driver = IDriver::createDriver(DRIVER_SIMULATION);</code></p>
<p><code>driver-&gt;initialize();</code></p>
<p><code>sensorControl-&gt;assignDriver(driver);</code></p>
<empty-line/><subtitle><emphasis>Листинг 108. Настройка драйвера в системном API (SensorLib.h)</emphasis></subtitle><p><code><code>thread_local sensor::DriverPointer g_DriverSimulation;  // (1)</code></code></p>
<p><code><code>thread_local sensor::DriverPointer g_DriverUSB;         // (2)</code></code></p>
<p><code><code>thread_local sensor::DriverPointer g_DriverEthernet;    // (3)</code></code></p>
<empty-line/><p><code><code>void CreateDriver(sensor::DriverType driverType, sensor::DriverPointer&amp; driverPointer)  // (4)</code></code></p>
<p><code><code>{</code></code></p>
<p><code><code>  if (!driverPointer)</code></code></p>
<p><code><code>  {</code></code></p>
<p><code><code>    driverPointer = sensor::IDriver::createDriver(driverType);</code></code></p>
<p><code><code>    driverPointer-&gt;initialize();</code></code></p>
<p><code><code>  }</code></code></p>
<empty-line/><p><code><code>  g_SensorControl-&gt;assignDriver(driverPointer);</code></code></p>
<p><code><code>}</code></code></p>
<empty-line/><p><code><code>ErrorCode assignDriver(DriverType driverType)  // (5)</code></code></p>
<p><code><code>{</code></code></p>
<p><code><code>  ErrorCode error = ERROR_NO;</code></code></p>
<empty-line/><p><code><code>  try</code></code></p>
<p><code><code>  {</code></code></p>
<p><code><code>    EnumConverter&lt;sensor::DriverType&gt; conv;</code></code></p>
<p><code><code>    conv.convert (driverType, </code></code><code><code>{sensor::DriverType::Simulation, sensor::DriverType::Usb, sensor::DriverType::Ethernet});  // (6)</code></code></p>
<empty-line/><p><code><code>    if (conv.error())</code></code></p>
<p><code><code>    {</code></code></p>
<p><code><code>      return ERROR_INVALID_ARGUMENT;</code></code></p>
<p><code><code>    }</code></code></p>
<p><code><code>    switch (conv.result())  // (7)</code></code></p>
<p><code><code>    {</code></code></p>
<p><code><code>      case sensor::DriverType::Simulation:</code></code></p>
<p><code><code>      {</code></code></p>
<p><code><code>        CreateDriver(sensor::DriverType::Simulation, g_DriverSimulation);</code></code></p>
<p><code><code>      }</code></code></p>
<p><code><code>      break;</code></code></p>
<empty-line/><p><code><code>      case sensor::DriverType::Usb:</code></code></p>
<p><code><code>      {</code></code></p>
<p><code><code>        CreateDriver(sensor::DriverType::Usb, g_DriverUSB);</code></code></p>
<p><code><code>      }</code></code></p>
<p><code><code>      break;</code></code></p>
<empty-line/><p><code><code>      case sensor::DriverType::Ethernet:</code></code></p>
<p><code><code>      {</code></code></p>
<p><code><code>        CreateDriver(sensor::DriverType::Ethernet, g_DriverEthernet);</code></code></p>
<p><code><code>      }</code></code></p>
<p><code><code>      break;</code></code></p>
<p><code><code>    }</code></code></p>
<p><code><code>  }</code></code></p>
<p><code><code>  catch (sensor::sensor_exception&amp; e)</code></code></p>
<p><code><code>  {</code></code></p>
<p><code><code>    error = static_cast&lt;ErrorCode&gt;(e.code());</code></code></p>
<p><code><code>  }</code></code></p>
<empty-line/><p><code><code>  return error;</code></code></p>
<empty-line/><p><code><code><code>}</code></code></code></p>
<empty-line/><p>В строках 1–3 объявляются указатели для хранения классов всех возможных типов драйверов. В строке 4 объявлена вспомогательная функция для создания драйвера. Эта функция проверяет, создан ли драйвер соответствующего типа, при необходимости создает, инициализирует и передает его в интерфейсный класс.</p>
<p>В строке 5 приведена реализация интерфейсной функции для настройки драйвера. В строке 6 конвертируется переданное числовое значение в перечисление C++ (будет рассмотрено ниже). В строке 7 объявлен оператор <strong>switch</strong>, в котором анализируется полученное значение перечисления, и вызывается вспомогательная функция с соответствующими параметрами.</p>
<empty-line/><p>В функции API для задания типа драйвера используются числовые значения, а в интерфейсном классе используются перечисления C++. Для того, чтобы сконвертировать числовое значение в перечисление, используется вспомогательный класс <strong>EnumConverter</strong> (Листинг 109)</p>
<subtitle><emphasis>Листинг 109. Конвертер числовых значений в перечисление (EnumConverter.h)</emphasis></subtitle><p><code>template &lt;typename Enum&gt;  // (1)</code></p>
<p><code>class EnumConverter</code></p>
<p><code>{</code></p>
<p><code>public:</code></p>
<p><code>  template&lt;typename ConvValueType&gt;                                     // (2)</code></p>
<p><code>  void convert(ConvValueType value, std::initializer_list&lt;Enum&gt; list)  // (3)</code></p>
<p><code>  {</code></p>
<p><code>      isError_ = true;</code></p>
<p><code>      for (Enum item : list)                              // (4)</code></p>
<p><code>      {</code></p>
<p><code>          if (static_cast&lt;ConvValueType&gt;(item) == value)  // (5)</code></p>
<p><code>          {</code></p>
<p><code>              result_ = item;                             // (6)</code></p>
<p><code>              isError_ = false;</code></p>
<p><code>              break;</code></p>
<p><code>          }</code></p>
<p><code>      }</code></p>
<p><code>  };</code></p>
<empty-line/><p><code>  bool error() const { return isError_; }</code></p>
<p><code>  Enum result() const { return result_; }</code></p>
<p><code>private:</code></p>
<p><code>  bool isError_;</code></p>
<p><code>  Enum result_;</code></p>
<p><code>};</code></p>
<empty-line/><p>В строке 1 объявлен шаблонный класс, параметром которого является тип перечисления. Конвертация происходит в функции 2, которая объявлена в виде шаблона, параметром шаблона является тип числового значения для конвертации. Функция принимает число, которое должно быть сконвертировано, а также список значений перечисления (строка 3). Реализация пробегает по всем элементам списка (строка 4) и, если какой-то из элементов списка перечисления равен переданному значению, запоминает это значение перечисления в качестве результата (строки 5,6).</p>
</section><section><title><p>6.3.6. Обратные вызовы</p>
</title><p>Касательно обратных вызовов мы имеем следующую ситуацию. В системном API контекст вызова передается с помощью указателей на данные, по-другому организация передачи контекста здесь невозможна (см. п. 2.1.2). В интерфейсном классе указатель на данные не используется, поскольку в C++ имеется множество гораздо более изящных способов передачи контекста. Вот тут-то нам и понадобится перенаправление вызовов (см. п. 4.6.2). Реализация одной из интерфейсных функций API, использующей перенаправление вызовов, приведена в Листинг 110.</p>
<subtitle><emphasis>Листинг 110. Перенаправление вызовов в реализации интерфейсной функции (SensorLib.cpp)</emphasis></subtitle><p><code>ErrorCode readSensorValues(SensorValueCallback callback, void* pContextData)</code></p>
<p><code>{</code></p>
<p><code>  ErrorCode error = ERROR_NO;</code></p>
<empty-line/><p><code>  try</code></p>
<p><code>  {</code></p>
<p><code>    using namespace std::placeholders;</code></p>
<p><code>    g_SensorControl-&gt;readSensorValues(std::bind(callback,_1,_2,pContextData));   // (1)</code></p>
<p><code>  }</code></p>
<p><code>  catch (sensor::sensor_exception&amp; e)</code></p>
<p><code>  {</code></p>
<p><code>    error = e.code();</code></p>
<p><code>  }</code></p>
<p><code>  return error;</code></p>
<p><code>}</code></p>
<empty-line/><p>В общем-то, вся реализация заключается в вызове метода интерфейсного класса (строка 1), в который вместо непосредственно обратного вызова передается объект связывания. Функция обратного вызова, объявленная в интерфейсе API, принимает 3 входных параметра: номер датчика, значение датчика и указатель на контекст. Когда будет происходить обратный вызов, то объект связывания вызовет назначенную функцию, в которую передаст первые два параметра исходной функции, а в третий параметр будет передан переданный указатель на контекст.</p>
</section></section><section><title><p>6.4. Итоги</p>
</title><p>На примере разработки модуля управления датчиками кратко описаны типовые этапы проектирования: описание технического задания; оформление сценариев функционирования системы; декомпозиция и формирование архитектуры. Затем рассмотрена реализация классов с акцентом на использовании обратных вызовов. И в заключение показан процесс создания системного API и трудности, с которыми сталкивается разработчик при реализации концепции «API как оболочка». Как можно увидеть в рассмотренном примере, в практике разработки ПО существует множество ситуаций, когда целесообразно использовать обратные вызовы как элементы дизайна компонентов системы.</p>
</section></section><section><title><p>Заключение</p>
</title><p>Итак, наше повествование подходит к концу, пора подвести некоторые итоги.</p>
<p>Обратный вызов – это паттерн, в котором какой-либо исполняемый код как аргумент передается в другой код. Ожидается, что через сохраненный аргумент исполняемый код будет запущен в какой-то момент времени. Типовые задачи, решаемые с помощью обратных вызовов, следующие: запрос данных; вычисления по запросу; перебор элементов; уведомления о событиях.</p>
<p>В C++ обратные вызовы реализуются с помощью следующих механизмов: указатель на функцию; указатель на статический метод класса; указатель на метод-член класса; функциональный объект; лямбда-выражение. Все они имеют свои достоинства и недостатки, и нельзя однозначно сказать, какой является наилучшим, все зависит от поставленных задач и требований к проектируемой системе.</p>
<p>Чтобы определить реализацию, наиболее подходящую для конкретной ситуации, целесообразно использовать метод интегральных оценок, который предлагает простые и эффективные процедуры выбора оптимального решения. Указанный метод можно использовать не только применительно к обратным вызовам, но также и в других случаях, когда необходимо выбрать наиболее подходящее архитектурное решение из множества возможных.</p>
<p>Шаблоны, основанные на принципах параметрического полиморфизма, открывают разработчику новые горизонты. С их помощью появляется возможность создавать обобщенный код, т. е. код, независимый от данных. Применительно к обратным вызовам шаблоны позволяют без особых усилий обеспечить требования, которые крайне сложно, а иногда и невозможно реализовать обычными средствами C++. К ним относятся возможность хранения аргумента настраиваемого типа (универсальный аргумент), настройка сигнатуры вызова, выполнение вызовов для набора аргументов различных типов и т. п.</p>
<p>Платой за использование шаблонов является сложность анализа кода, увеличение времени компиляции, склонность к разрастанию кода, необходимость тестирования на наборах данных различных типов. Кроме того, шаблоны не предоставляют предварительно откомпилированного кода, что делает невозможным их использование в интерфейсах API.</p>
<p>Уникальная особенность обратных вызовов проявляется в том, что они дают возможность динамической модификации поведения программы во время выполнения. Это обуславливает их широкое применение на практике, как было продемонстрировано в примере разработки модуля управления датчиками.</p>
</section><section><title><p>Список литературы и интернет-источников</p>
</title><p>Здесь приводится список упомянутых книг, а также литература и интернет-ресурсы для углубленного изучения рассмотренных тем.</p>
<empty-line/><p>1. Басс Л., Клементс П., Кацман Р. Архитектура программного обеспечения на практике. Спб, Питер, 2006. – 574 с.</p>
<p><emphasis>Фундаментальное введение в теорию и практику построения программной архитектуры систем. Приведены методики сравнительного анализа архитектурных решений.</emphasis></p>
<p>2. Вандевурд Д., Джосаттис Н., Грегор Д. Шаблоны C++. Справочник разработчика. Спб, Альфа-книга, 2018. – 848 с.</p>
<p><emphasis>Максимально полно охватывает разнообразные аспекты использования шаблонов в C++, подходит как как в качестве справочного, так и учебного пособия.</emphasis></p>
<p>3. Галовиц Я. C++ 17 STL. Стандартная библиотека шаблонов. Спб., Питер, 2018. – 432 с.</p>
<p><emphasis>Отличная книга для изучения стандартной библиотеки STL.</emphasis></p>
<p>4. Гамма Э., Хелм Р., Джонсон Р., Влиссидес Д. «Приемы объектно-ориентированного проектирования. Паттерны проектирования». Спб, Питер, 2020. – 368 с.</p>
<p><emphasis>Рассматриваются наиболее употребительные паттерны проектирования и их использование в решении задач. Не привязана к конкретному языку программирования. Отличается легкостю и доступностью изложения.</emphasis></p>
<p>5. Касперски Крис. Техника оптимизации программ. Эффективное использование памяти. Спб, БХВ-Петербург, 2003. – 560 с.</p>
<p><emphasis>Подробно рассмотрены принципы профилирования и оптимизации программ. Несмотря на то, что книга выпущена довольно давно, подходы, описанные в ней, остаются актуальными до сих пор.</emphasis></p>
<p>6. Леоненков А. В. Самоучитель UML 2. СПб, БХВ-Петербург, 2007. – 576 с.</p>
<p><emphasis>Простое и доступное изложение основ UML.</emphasis></p>
<p>7. Орлов С. А. Программная инженерия. Технологии разработки программного обеспечения. Спб, Питер, 2018. – 640 с.</p>
<p><emphasis>Рассматривается методология разработки программного обеспечения, организации и процессы проектирования больших программных систем.</emphasis></p>
<p>8. Пикус Ф. Г. Идиомы и паттерны проектирования в современном C++. М, ДМК Пресс, 2020. – 452 с.</p>
<p><emphasis>Рассматриваются реализации различных паттернов проектирования с использованием современных средств C++. Книга достаточно сложная, предполагается, что читатель хорошо владеет C++, имеет опыт обобщенного программирования.</emphasis></p>
<p>9. Пирс Бенджамин. Типы в языках программирования. М., Лямбда-пресс, 2011. – 656 с.</p>
<p><emphasis>Академическое изложение теории типов, довольно сложный математический аппарат. Книга скорее ориентирована на теорию, чем на практическое применение, но есть интересные темы о классификации типов и видах полиморфизма.</emphasis></p>
<p>10. Эванс Эрик. Предметно-ориентированное проектирование (DDD): структуризация сложных программных систем. М., Вильямс, 2011. – 448 с.</p>
<p><emphasis>Описаны фундаментальные принципы трансляции предметной области в программные модели, чем, в общем-то, в той или иной степени занимается каждый разработчик.</emphasis></p>
<p>11. Lambda Expressions in C++.</p>
<p><a l:href="https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-2019"><strong>https://docs.microsoft.com/en-us/cpp/cpp/lambda-expressions-in-cpp?view=vs-2019</strong></a></p>
<p><emphasis>Кратко и наглядно описан синтаксис лямбда-выражений.</emphasis></p>
<p>12. Template Specialization (C++).</p>
<p><a l:href="https://docs.microsoft.com/en-us/cpp/cpp/template-specialization-cpp?view=vs-2019"><strong>https://docs.microsoft.com/en-us/cpp/cpp/template-specialization-cpp?view=vs-2019</strong></a></p>
<p><emphasis>Множество развернутых примеров, демонстрирующих использование частичной специализацию шаблонов.</emphasis></p>
</section></body><body name="notes"><section id="n1"><title><p>2</p>
</title><p>Мы здесь (и в дальнейших листингах тоже) не будем разделять заголовочные файлы и файлы реализации: это всего лишь пример, а разделение загромождает описание и усложняет понимание.</p>
</section><section id="n2"><title><p>3</p>
</title><p>Конечно же, описанные проблемы могут быть решены и в процедурном дизайне, но код при этом значительно усложняется. В общем-то, объектно-ориентированная парадигма и разрабатывалась как средство борьбы с возрастающей сложностью программного кода.</p>
</section><section id="n3"><title><p>4</p>
</title><p>В качестве примера можно привести практику моделирования embedded-систем. В самом общем виде Embedded-системы представляют собой микроконтроллер, который встраивается в какое-либо устройство и выполняет функции управления, мониторинга и контроля. В силу определенных причин так сложилось, что ПО для управляющих контроллеров (такое ПО называют firmware) пишется на языке C. В процессе разработки подобных устройств часто используется моделирование, когда firmware запускается на обычном компьютере в имитационном окружении, а реальные аппаратные устройства заменяются их программными моделями. Модели и имитаторы обычно пишутся на языке C++, а firmware, как правило, написано на C – получается смешанный код.</p>
</section><section id="n4"><title><p>5</p>
</title><p>Это необязательно делать в конструкторе, соответствующие операции можно выполнить после объявлений экземпляров инициатора и исполнителя в функции main. Однако инициализация в конструкторе представляется более удобной, потому что настройка вызова будет сделана сразу при объявлении экземпляра класса – исполнителя без дополнительных операций.</p>
</section><section id="n5"><title><p>6</p>
</title><p>Вообще, множественное наследование – неоднозначный механизм, который часто подвергается критике. В большинстве современных языков (например, Java, C#, Ruby и др.) множественное наследование не поддерживается. Тем не менее, в C++ множественное наследование существует, поэтому необходимо рассмотреть и такой случай.</p>
</section><section id="n6"><title><p>7</p>
</title><p>Другое название, которое встречается в литературе, – функтор.</p>
</section><section id="n7"><title><p>8</p>
</title><p>В инициаторе хранится копия экземпляра класса. Не ссылка, не указатель, а именно копия. Из этого вытекает несколько важных следствий, которые будут рассмотрены далее.</p>
</section><section id="n8"><title><p>9</p>
</title><p>Частично этот недостаток устраняется с помощью шаблонов, что будет рассматриваться в соответствующем разделе.</p>
</section><section id="n9"><title><p>10</p>
</title><p>Количество таких команд зависит от количества входных параметров функции.</p>
</section><section id="n10"><title><p>11</p>
</title><p>Этот код получен с помощью компилятора Microsoft Visual studio версии 19.23.28106.4. Другие компиляторы могут генерировать отличающийся код, но принцип останется прежним.</p>
</section><section id="n11"><title><p>12</p>
</title><p>В литературе можно встретить термин «лямбда-функция», но в стандарте С++ он именуется как “lambda-expression”, что в переводе означает «лямбда-выражение».</p>
</section><section id="n12"><title><p>13</p>
</title><p>При использовании указателей на функцию их код встроить невозможно, потому что заранее неизвестно, какая функция будет использоваться.</p>
</section><section id="n13"><title><p>14</p>
</title><p>Минимальное отрицательное, по модулю оно будет максимальным.</p>
</section><section id="n14"><title><p>15</p>
</title><p>Мы говорим «меньше», поскольку числа здесь отрицательные. По модулю это значение будет «больше».</p>
</section><section id="n15"><title><p>16</p>
</title><p>В противоположность полиморфизму подтипов, который подразумевает исполнение потенциально разного кода для каждого типа или подтипа. В C++ полиморфизм подтипов реализуется с помощью наследования и виртуальных функций.</p>
<p>Термины «параметрический полиморфизм» и «полиморфизм подтипов» больше характерны для академической литературы, в C++ обычно используются их эквиваленты «статический полиморфизм» и «динамический полиморфизм». С точки зрения теории, такая терминология не совсем корректна, потому что она скорее отражает не сущность полиморфизма, а способ его реализации в конкретном языке программирования. Тем не менее, в C++ эти термины прижились.</p>
</section><section id="n16"><title><p>17</p>
</title><p>Для изучения можно порекомендовать книгу «Вандевурд, Джосаттис, Грегор. Шаблоны C++: справочник разработчика», где подробно рассматриваются соответствующие темы.</p>
</section><section id="n17"><title><p>18</p>
</title><p>Здесь функциональный объект реализует паттерн «адаптер». Для знакомства с паттернами вообще, и с паттерном «адаптер» в частности можно порекомендовать книгу « Гамма Э., Хелм Р., Джонсон Р., Влиссидес Д. Приемы объектно-ориентированного проектирования. Паттерны проектирования».</p>
</section><section id="n18"><title><p>19</p>
</title><p>Мы употребили термин «частично», потому что полной независимости здесь нет: при изменении функционального объекта нужно перекомпилировать как инициатор, так и исполнитель. Таким образом, независимость здесь обеспечивается только на уровне исходного кода.</p>
</section><section id="n19"><title><p>20</p>
</title><p>Указанная проблема решается при использовании универсального аргумента, о чем пойдет речь в следующей главе</p>
</section><section id="n20"><title><p>21</p>
</title><p>Термин «динамический полиморфизм» означает, что полиморфизм реализуется во время выполнения программы. В противоположность этому, статический полиморфизм реализуется на этапе компиляции программы. В строгом смысле этого термина динамический полиморфизм в C++ нереализуем, поскольку это язык со статической типизацией. Однако его можно смоделировать с помощью наследования и шаблонов, о чем пойдет речь далее.</p>
</section><section id="n21"><title><p>22</p>
</title><p>Для фундаментального изучения техники стирания типов можно порекомендовать книгу «Пикус Ф.Г.</p>
<p>Идиомы и паттерны проектирования в современном С++», в которой указанной технике посвящена отдельная глава.</p>
</section><section id="n22"><title><p>23</p>
</title><p>На момент написания книги это C++ 20.</p>
</section><section id="n23"><title><p>24</p>
</title><p>«Зачем же мы тогда разрабатывали универсальный аргумент, если в STL все уже давно реализовано?» – может воскликнуть рассерженный читатель. Ну, во-первых, грамотный разработчик отличается от обычного разработчика тем, что он не только знает, как применять те или иные инструменты, но еще и понимает, как они работают. И, во-вторых, рассмотренные методы используются не только в проектировании обратных вызовов, они могут использоваться при решении самых различных задач.</p>
</section><section id="n24"><title><p>25</p>
</title><p>Исходный код можно посмотреть здесь: <strong><style name="not_supported_in_fb2_underline">https://github.com/Tkachenko-vitaliy/Callbacks/tree/master/Profiling</style></strong>.</p>
</section><section id="n25"><title><p>26</p>
</title><p>Указатели на статические методы классов в эксперименте не участвовали, потому что с точки зрения организации вызова они идентичны указателям на обычные функции. Профилирование выполнялось в среде Microsoft Visual Stidio.</p>
</section><section id="n26"><title><p>27</p>
</title><p>Если читатель попробует повторить эксперимент, то числовые значения, скорее всего, будут другими. Во-первых, они сильно зависят от используемого компилятора, точности профилировщика, производительности процессора. Во-вторых, в силу особенностей современных программно-аппаратных архитектур даже при запуске на одной и той же платформе результаты профилирования не будут повторяться, они плавают в некотором диапазоне значений. Заинтересованному читателю можно порекомендовать книгу «Крис Касперски. Техника оптимизации программ. Эффективное использование памяти», где подробно рассматривается этот вопрос.</p>
<p>Тем не менее, указанные замечания не могут считаться основанием для сомнений в достоверности эксперимента, поскольку относительные значения всегда будут приблизительно одинаковыми независимо от используемых программно-аппаратных средств.</p>
</section><section id="n27"><title><p>28</p>
</title><p>Снижается время выполнения – увеличивается быстродействие, т. е. эти показатели обратно пропорциональны.</p>
</section><section id="n28"><title><p>29</p>
</title><p>Здесь необходимо уточнить: речь идет только об интерфейсе API, т. е. его видимой части. В реализации API шаблоны использовать можно и нужно.</p>
</section><section id="n29"><title><p>30</p>
</title><p>Но не шаблон класса, в шаблонах классов пакет параметров может быть только один. Кроме того, если в шаблоне объявляется пакет параметров, он должен быть последним в списке параметров шаблона.</p>
</section><section id="n30"><title><p>31</p>
</title><p>Это связано с тем, что функция получения элемента кортежа по индексу объявлена как шаблон с параметром – числовым значением. Переменные не могут выступать параметрами шаблона.</p>
</section><section id="n31"><title><p>32</p>
</title><p>В отличие от шаблонов классов, шаблоны функций могут быть перегружены. Если бы допускалась специализация шаблонов функций, то возникала бы неопределенность выбора перегруженной и специализированной функции.</p>
</section><section id="n32"><title><p>33</p>
</title><p>Справедливости надо отметить, что идентификация получателей все-таки возможна. Для этого можно использовать, например, итератор контейнера либо указатель на объект std::function, либо, например, динамически присваивать объекту контейнера какое-нибудь значение. Однако это было бы плохим решением в силу целого ряда причин:</p>
<p>1) нарушается важнейший принцип проектирования – разделение интерфейса и реализации. Мы жестко завязываемся на структуру хранения объектов вызовов, поэтому архитектура получается монолитной;</p>
<p>2) идентификаторы объектов не несут никакой смысловой нагрузки, это просто некие абстрактные значения;</p>
<p>3) идентификаторы не детерминированы, при добавлении объекта в контейнер идентификатор получит произвольное значение;</p>
<p>4) идентификаторам объектов невозможно назначить заранее заданные значения;</p>
<p>5) в силу вышеуказанных причин невозможно реализовать логические протоколы обмена.</p>
</section><section id="n33"><title><p>34</p>
</title><p>Контейнер std::map требует именно такой предикат, less, который возвращает истину в случае, если первый элемент меньше второго. Другие контейнеры могут требовать иные предикаты, например, проверку на равенство equal.</p>
</section><section id="n34"><title><p>35</p>
</title><p>Диаграмма классов изображена в формате UML. Читателям, которые не знакомы с указанным графическим языком моделирования, можно порекомендовать книгу «Леоненков А. В. Самоучитель UML 2».</p>
</section><section id="n35"><title><p>36</p>
</title><p>Например, функция возвращает только положительные значения, в этом случае можно считать, что отрицательное значение сигнализирует о возникновении ошибки. Но если функция может возвращать значения с любым знаком, то неясно, какое из них назначить индикатором ошибки.</p>
</section></body><binary id="i_001.png" content-type="image/png">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</binary><binary id="i_002.png" content-type="image/png"></binary><binary content-type="image/png" id="i_003.png">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</binary><binary id="i_004.png" content-type="image/png">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</binary><binary id="i_005.png" content-type="image/png">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</binary><binary id="i_006.png" content-type="image/png">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</binary><binary id="i_007.png" content-type="image/png">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</binary><binary id="i_008.png" content-type="image/png">iVBORw0KGgoAAAANSUhEUgAAAmsAAAB7CAMAAAAc2zdkAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAANtQTFRFAGa2tmYA///bADqQkDoA2///Zrb/25A6/9uQOgAAOpDb//+2tv//ZgAAAABmkNv//7ZmQEBAAAA6v7+/f39/39/fCAgI5+fnEBAQcHBw7+/v9/f3z8/PICAgUFBQMDAwGBgYYGBgn5+fx8fHj4+Pr6+vl5eXaGhoWFhYKCgop6enSEhIh4eHODg4t7e3eHh419fXOgA6ZgBmkDpmkDo6Ojo629uQkNvbZgA6AGZmOjoAkJA6trZmhISEOpCQc3NzTk5OOpC2tpA627ZmkJBmw8PDQUFBAAAA/////BDqCAAADV5JREFUeNrsnQl34kgOgO10xu5xJh3c3BCOEMKZkPTuzszu7H2K//+LtqQqH4Bx+Y7pSO81DbYpFNdnlVSHytizXJx8/hGM9y0gkxhcc3XHiuTLT0eHjbzlGsway4E0vt7hf+anHw6P2/J4dsldALP2vYlNBu3q2jixS1Zew2YxayxhMamCbm4dBE60pRZ9AvjTrYVHLBOE50Uv6gKHCAU6cnMrz4sLBLJEF73zCwhfqayn+ikjOMesfQyhmpct6c2tIVs+dLUELRY5c4449JujLnCkubq6Fsx8/tHB89a+gVfiuYagjNrioIDgym93ijAiEtHzzzFrHyU0sLyWVGFiEQN7E92tBlox+SI+2oa60sYLbMLM8eFx8DC9DxUQXIlNNRk3eofo+eeYtY8WGkjqxKt8YyISdvgFG0bVHnqBq63w9I7Jo0EBoSvpbICfV9xR+MusfYjQQFInXumNdKjM4CVks3yv/+ra8XAVhgo/kW0MCghdiYWgSVMFh0ph1j6GqPgT610R8ukHyY7XMHq+vCP9sgNKAoffaz8D1uii0JVIpe2FBtj2MmsfNzQgL91WbyhOCPGCVNEFCBydvPkdBp7ovCFZeJ5cOtmGegWErrQU2PiLn7/9FiqFWftwoYHASLlPttezQW48WSn5ojwuOdaA4H35Cx2hcJUKEU6YEyoguFIC6cjSP/3y7S44VyBrE6hSJpdX35d7g+zjwYZ3FgMq/Tm4vKqt2w1K6+wxa5dTtRfLmnL2mDVmrQ6/xqwxa8was8asMWvMGrPGrDFrzBqzxqwxazWUJrPGrFWllLtj1pi1apQCmDyVyhqN+MpJnMmlET9D/btiLcMNohmIVul//mNTyjDi03NLyoA+zQ8+jV0pXfq0ovcv3nDeU9mspZtwjqsrSmPtnaq20BtkWmr29fnm6rS2vU9TVett+jSq7JOSB9Ri2Ny0XpVWbr+1aA6KY81ONQvY/vrrdbmsparaq2taOWSVyZqdepp07J8AhVCyiiF2HmPXouzhRpHW3jdbbi9i/oL7uhsUwZqaK2Cq1Vs0S0VNE/YWdNE8JyOo3nJZK7pq87KW+gZpVmZCTOv3PtIm0v777BJYHfehtWt60uq70thO+m+5WZP23vSW4wS30j+EM/ZCgJXMWqaqLZO11DdI4wXULzYQrG3/OpFAPUUYsKEwd3h2/dzOwZooILgtdLtCdbsPrYiojrX0Vavm4ZfCWvobhA5trGWuIWv/+wfas9UmrqF8esDWddvMY9fk+kBaUI22Qi7twnf+Iby9FbGWhX0RHuQ0IwXfILzGuSDWmlsB2nim98gIt8kmR2yAK2/I6h/WbXAIl/BUZ9fSV21s1FdAbJD2BuGBGMtWM9buRfPY63eTXTyYC+dtvcvMGrZAwSob/1aGF95YFbKWumrjUSuAtbQ3SOOw1Yq17hJg2krRqzGciXh4287Rl0vLt0wI38rgkOlVcjWspaxaU5MjoJi+3MQ3iNbANS6lDZ33oPM6SPed4TN+KRtrakmiaJ7MA/9IHZLtgV+3NmgW5kOlVatPR5GftQw3qPxxgyJkuAIYt7MZQ3eQkrUyBCqtWpXFIqYZ5fHQs+HnBHoZR6UeRzB9vGzW3qlqPyZrzR6s37J+eeBCZ8GsMWvJXDXRfg5yfL8PsBwya8xaIletla+ITQcmbWaNWdM1gdldtUDe1tC7Z9aYtXir5uZw1ULEjmHaZtaYtThZHTOSndnJgFlj1s5LCzr3BbXFI9gya8zaeace4Kmosto96DNrzNoZeezAvLjSmh1YMGvM2jlLtCyyvBnAjllj1qI8rPWhh5VfXqH3xqwxa6eyPIocC5AxvDBrzNqpswaddtFlDke+y8asMWs+Fmt4Lr7UHfS6zBqzdigtmJSxOHAFY2aNWTuQbgfuSyl3qspl1pg1JX3P/hQtc1Uws8aslWvWhB84lUMRRq/SvSt6pd3s7n1JVVu3G3RxZg0NG+1Zkn1rj345qn0vVdsf7y9KyjNrZNge87BWpm6Xr07t9EnsVJUU4T7kYa0PUKcnt2bq1E4frUySTO/ABZH0z4i7IuLJg84wO2viuYUaPbk1U6d2+mjlEaanB0+2dczK2n6LgwdG9ue2Tk9uzdSpnT5aWcLpYnVKGiA38s7L2gZHRY0cz219ntyaqVM7ffQygpPVwxHJxDKzNujAICtrfRnGjetkRmpkSOqmj1bapxF5OMWNl0gxYK2hUmn4KRbVZst4NirplyvcQSPPc1uXJ7dm6tROH70sTp8LuSW8RM1LpOizBio1VJB18evd/uoPd3g2MrliC5YZWZu5rguYsvq5FneqZurUTh+9jGFxyppzaOaMEGto8hoqT4rMSeZ4bei/I3PjPMIoR18u1CstXc3UqZ0+8TKFdoxd8xMpHvhraM+8M36+aRPOZPzqQZdZY9ZQ29MBlMBfCxIpHrPmnwlY+/Sv6JxfW2gya9+xPg3QbG0SaPtyesxPXhckUjxuQ/0zfoMrzkSn8lzCglm7SH2kHTHjN3vALJahljBW24jVU6J9pB9xDhMperEBHg1lXQxig+h8wHPoM2sXqQ/55bGbcvjWKT5hsKdtZBRDWTCdfZBb0WfNsWVOdv9MuM8jku8dbJm1i9SHEmqaSbbmaiRj7ans+9GGNbN2kfqgKZEUUSRIbR25Zg3wtndQBi0ha83yWRsxa5eoD7riMp04tVeI1c3tzxQT/oy72wT5qeO3Egm0fSz7fnRhyqxdoj7oJkkH3JRekyXs139wr5Evf8ZBIvGOnDlxXbItMKFdwQ1h1i5RH2wYqUtChgf4an/65dvdza2FnhyeJghxs4c9s8as5QwNqJGU3ph4vbp2JGjImGBPQnjzxztmjVnLI2oXS2XBqF//8zeB298EWibtXfPP63QVy6wxa+dDA29XEUe+sVUPK7EmYlMZfSbeRbr8GSkD6DBrF6iP2igVHbaG3JOJ5llQ373auNfap2ON+zyYtYx2L221MmvMWkZ3LllHR1jbRcbfMpP+1CO8MGvfnz6aIflIbftlszaDJbOmk0mlC/En73T3tmWz9gpzZk1bcLavtVpV/lruP3JUNmtjeGLW6lX773RTcUmdRtSkIblAmcJcE+cT0axJAO1Y2AjejLo1EbVrsj4Ea652UpE3GVL1tDjSLbRBDb/q4hFcFMj515g1bPF1wYG3UEpNHxGcyQ5lE7dEp96++LlLMxgza8waSlPnsHlzgNVovrfWAFmjRjV2p/O9XBTIrDFrKD3NiKjHmvq/8eWnEGtWsvKZNWbNsztx4i2UUkMS1HQ64TfxgkuRmTVmjWQTtWovKjawZWxgydjApNgAm89GbGxAaZCYNWYNZTiFt2R9Hg3PN8OVDg4tsrF1fR5DaqKZNWaNpJ95mCqBzMDdM2sF1r6ZesS7Tqzdw7RbWuET2DBrRbDmZfrUsHZz6/W3l/7nd3eZooPSDNsTTIepWKvosa2dGdFd4mf61ChkojutXaxZAGvdfuchk2HrlGXYJnKvZaOoxxadRqMK1qo2I6D7q63k8OvnyUIBpAFkYa08w6bMmp61pI8tRiVVsJZQn6trK5gKXSJroXFAUsjL6YlPhOX/F7BmlcsakZaRtdIMmzJrWtYSP7b211+vK2CtejMSf0k402copyf2b179/if1XwSYpbCmSJOstdT0Ajm3KcmndTZGdTKH9TAJa2ke26sKWEtrRipgzTl2IEP5yMJd6mj49RNmc7E2G0Ee1v7eKWPZQdcv1Sjusa2CtVRmZN8ovw09UsjP9mnL/k77cEjahpL9NUXbQ04LVKSMfW2Moh7bqlhLrk+SvCkF+2tBtk80uSope8iYRafBKzQ2INqytoWTiB018uoT9NsZxT2272DX4s2IvoehgDjUDjuQQbbPIBAIxwN6h62APg9BW1bW7juZF1SdkWYHZvtkrKV5bKv31+L1SYBaAaz5mT7llAeV07Mhc200/JQblFBU5bEqmTVBWyu7FYJdkai1e6GOFKO4x7YK1lLoo+/w2BczbuBl+pRZW7xsn7J3zww6+eiyasYNcsgrdApMtzAYhRdoGQU9tlWxllgfOwlqPPZ+IiuYFpZHZujCZJictXSPLeR3fQvSh4YNdBOTmbVoPgblcMtj78zaabtXTM9H66g9ZtaYtVN//qEI2BZwtBCQWWPWIvopXnKPjA6XoIZBmTVm7bzcj2CaMzF49wU6mz2zxqxpfTYXOrk6dZtTGJ30nTBrzFqU9AGW2Z22OcD4NJhl1pi1SNlkd9qGK28GCbPGrCV12jZZvrhbQy8yEw2zxqydd9rgJXWI8LYFmESPPDBrzNr5dnQKsEo1PNoVfl5vfuYks8asxXherY7w8hNP1m0/gAgpzo5wMWvMWryhErS5syQjpJsxxJtBZo1Z07htrR5AZ6UJE5oPeNUydooIs8asaVvSxYuwWL3x85lA4X6xwonn62dNHwmzxqwl8cSe1zRHy122dqFWst187rs9PDHtv2kLYdaYtYS4zZZn8mavHxaJglWjV2ne7Z5WobrpUz+F3tN3a85a25dQGnW3tWgmnln5fwEGANnISCSIgZefAAAAAElFTkSuQmCC</binary><binary id="i_009.png" content-type="image/png"></binary><binary content-type="image/png" id="i_010.png"></binary><binary content-type="image/png" id="i_011.png">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</binary><binary content-type="image/png" id="i_012.png"></binary><binary id="i_013.png" content-type="image/png">iVBORw0KGgoAAAANSUhEUgAAAvQAAABZCAMAAABmH0A9AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAMZQTFRFtmYAADqQ2///Zrb/OpDbOgAAkDoA///bZgAAAAA6kNv//9uQ//+2/7ZmAABmtv//25A6AGa2ADo627Zmtv+2ZgBmOgA6ZrbbOjoAZra22//b25Bm/9u2OgBmtpA6ZmYAZpDbkGYAtv/btmY629uQZjpmOma2OmaQOjpmOjo629v/kGY6OmZmtpBm27a2ZmZmZjoAtrZmADpmOjqQZpCQZjo6ttu2ZgA6traQkJA6ZpC22/+2kNu2kLaQOpCQttv/AAAA////2W9nogAACixJREFUeNrsnQl73LYRhilxL1lamYzbOGebpm3atM2dNr27+P9/qsAM5gB47NpZ2+LuN89jawXiIGfeBYcUP7A5wGBXZs0hwN6+wevv0vmAHtADehigB/QwQA/oYYAe0P9Ma/I19d0zQP/ObLs5rOKP+/UVROEJQB/dDegB/dVBfzXuBvSAvnb3dvP4t28Phy9S8cfrw+EPt2lrG8L+8Pg8dLQlnRja+F9PH1vafr+mzb01C9uv1oe7l/kscvMRpVB/jPH8+IP44YtbQD8HvTgx/pr8Fp3LjnvvZag9e5sdqp7meKRYauAA/Tz0nOisJNG/uc1QJ981lAGlOKzYmYn1Cnppxh8eP7dQcPnDjj70gH4myVQnRjcL9E0ZGfXsv7JDC+ibMnCA/gj0ffJWgjM6/2HDE0ZyKOH9TazZ3X0TmY3wtoR5Cb02i95+GT75fXR4x+eEWL5fxzh+/adUdHML6CehVyey8/L8cvgsbBPMlWedQzs5+8YqbbDAAfpj0OdT4j6HgNKX5vAXmtPv/r2LM8njdzyT91S7hF6b7ZVrCUWanmIY7/8qsxign4iCOjHN6vmkyv5Mfq486xxqnr77jOnnwAH614D+y0Ofih52j8+bu/+sV/dpxo7+/3ty6KtAHzvhJBXQnwY9zfnz0DuHOk/f0MVYDhygPzG90bsIfIbcE6/p55cpdWHYKcMsoddmY+nNJ7v0Zfj+OdKb+SjYHRzy3Xx64xyq6U109MoFDtCfdCHbyoUTZfJ5tkkTfEzlc76fJvX0Q3NRru6a5SswP9NTro+Z/tjdm+zEz821rUWm8uzITN9SuCxwgP4Y9P/8ljLCsP3tWujVjKfnJJOm7UD8D6CXZmH753yHjUPBtyz/F8KL9eHuxx2gn4M+O9FDz2Xpnm/lWedQgz7GZoVblqd7vn3FKDlLSX9YiC3h2RuJxqtEZRnOXyz0+8FjC4Ae0F849M0gMQf0gH6B0F+PweuAHtDDAD2gh71J6GEwLAECw0yP9AYG6AE9DNADehigB/QwQL8M6Lt8cdvDL28P+o7/jNwt56/JFwY9OX67AfRvHfr7NaAH9NcF/XZzAPTvHPqm37OYgxR4+QycSvJyAje85kMbRBXJTzyWzXrZSs8rkdwgqVtZeLbiDvWZ+CQcIQE+ae+lju/8gqFvHv/hDrt1DhhzijhMY6ExMv/HAKTH2ZMkRMo0FINh/rszaU1DWszWBV6qF8P1vmpJRvC7yttUE+R5qoBotZX1JCNJ1fPgMAl9GqKL3ad/oSFlfNLI//I5ezLWarlou0k7J9BrM1L09VYt7vj7z+iwGt75Vbj/4TbGbWV1yvimOkXnlwt9BLQbQs+KgaFTvFP3EhmOkfo/xSLJildWZq3GhlEnS4hcp1o9D5djW1Q1MqQT7jdv06OwbgsgFPosk+CedKRc9Uw4TEKfdiT6jNxGaPKnENyh0Z4+7ForsmbkonzKzg5LS9fkY2zeW6/cpuC+6RrfVKfo/GKhT64dgZ6dNHRK8E5NTGmM1P+BCnr61ZcV83sxjOeVw1p26odz0bSqBRnar2yTo3DdFkBo/PMB7lkcJyPlqmfCYRb6+ImPNRUpnnlU1um1XL2AnprJwkFSLfYuwN/cdo+/SIfN6zZZV0V8qU7R+cVCT7OlW1GpDc5JQ6cE59Q9LX/V1mHjOHEioGXaamwY45XzB9+pVs/DuUWhrGoNPfcr2+QoXLcGhPRve8M92Ui56plweG3o4zySD7fI6YtmwVeLuaWcEF+kBHCl27WOj2+ucw05/XeSMxRTsDhpxCnOqXPQdy6Dj2XWamyYeqavO62HG1StoM/9zkHfuAwpx1/J2JffJqn6hnP6Y+kN7VC+4GlH0ht/Eqb/6NQ0OO2J42ropY7v/EKh57NdDb06acQp5tS59CZeETbaaSyzVmPD1Dn9XHqzCiNVS+il35n0xoBQ6I2MPLGuZOrMVc+Dw+yFbPIZX8qQ84rLlTRv5CXGfHojzeh6ZZ8ckqvRGSqfzXo+nj3NPL115eKb61xDesN/C6yhFyeNOMUcln3jYiT+D3SDgSZ3KbNWY8MU0BOB1ml9IZtjW1StLmRt96sLWevWgFDotZVcyOaRpOobT29e5PNIp8vENC6x41tPH+7yF89m+rpZrrbd6N0vOmI6tC7fkJKu5Nn+ldYpOr/kP04NoFcnDZ1iDlM47Fah+D8Dc2itTFuNDVPdeElXGdX9x+FwWrUkI/h+8zb76nZy89GAUOitVe6p4zVhpeqZcJh69qZ5vZVhmjMsKLPdrK7pj1NndcqY/5t3vsjPk/7jFKAH9IAe0AP6K4Ie9rSghwF6QA/7WdDDYFgNAYaZHukNDNADehigB/QwQA/oYYB+KdB3l/kgL6CHTUJPj8DdfwqJMqC/Gug7TPKA/sqgp6dEs6lmvROFO79dVHS7siRUqYNXEXxRWarxyaSU+R+X/p+g/JeiatTOvTxT1fgjyzzYoHZcPFx+2jXV0Hb+QdvxcQH9gqA3BUwlhc8PXH+QZK2f/rp3KvVKB69ydl85uGoDmf9R6f8Jyn8tqkbVXfdgjyzz4J71luNSybupuqSd7fbUuIB+QdDfi9C+FqCRWqu7+VUKey+idBN/heChJ82Xq1x+m2qZ/2nS/1lpnBWVo9quF9APWtk2t4ZDWnMi/cpfbdfOdntyXEC/SOhrKTyv7PO799PaKR29KV3ev93W0LOc3VUOXuBbyPxPk/4fVf5bUTmq7foA+qKVbTP1PXHO3/X0/mYvudbdnhwX0C8qp+9HoKfpktY8225WEY1OJO1huPiDytld5QH0hcz/qPT/uPLfwVeMart+OvStPyER9KKoNuhltyfHBfSLvHtTn/tJk5tO47/pE3pOpV6lN1nO7ivX6U0p8z8q/T+u/NeiatRgSx2dnN4U+R1nOw3lLnPpTT0uoF8S9A87Wufgp2eVFJ4Xp8n3ZFK8TQ9fXchmOXtRObiFFAYy/6PS/xOU/1I0GHV0ph9Z5sEuZOW4OpYo51s0rG+WdrbbE+MC+iVBz2lwqa/vcmKsS49wpqtK+UIHL3L2srKrVsj8T5P+n6D8z0X1qN14Tj9Y5sEGzWV8GXEQ2b5mbodqZceJcQH9sqB/GnaaIPT1tJ+Trdyg+rGTNS7OrjQF9ID+CUPvciVAD+ivA/rGbgUBekAPA/SAHgboAT0M0AN6GKAH9IAeBugBPewJQk+vQsGrZgH9NUHf+ReuwAD9NUCfnkzBRA/okdPDAP1CoRc59Myr7EeV3SaohgH6hUGvbwCffpX9qLLbBNUwQL806LMceuZV9mPKbieohgH6hUGvcujpV9mPKbudoBoG6BcGfWM6oKlX2Y8pu19BJgcD9E8Levf28slX2Y8pu3HbHtAvFnqTQ0+/yn5U2a2CahigXxT0Xg49/Sr7UWW3iaxhgH5Z0DuRHAzQA3oYoAf0MEB/CReyMEAP6GGA/jKhh8GuzP4vwABchlZF9qP1RAAAAABJRU5ErkJggg==</binary><binary id="i_014.png" content-type="image/png"></binary><binary content-type="image/png" id="i_015.png">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</binary><binary id="i_016.png" content-type="image/png">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</binary><binary id="i_017.png" content-type="image/png">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</binary><binary id="i_018.png" content-type="image/png">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</binary><binary content-type="image/png" id="i_019.png">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</binary><binary content-type="image/png" id="i_020.png">iVBORw0KGgoAAAANSUhEUgAAAuoAAAEnCAMAAADIJ5ZjAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAQ5QTFRFAGa2ADqQ2///kDoA///btmYA25A6Zrb//9uQOgAA/7ZmAABmtv//OpDbkNv/YGBgAAA6n5+fZgAA//+2CAgIQEBA9/f3EBAQv7+/ICAg7+/v39/fUFBQ5+fnGBgYj4+Pr6+vcHBwf39/19fXz8/PKCgoODg4MDAwx8fHt7e3eHh4h4eHWFhYOgA6p6enl5eXSEhIaGhoOjoAZrbbkGYAADo6tpA629uQOma2tv/b25Bm27Zm/9u2ZpC2OmZmOjo6ttv/ZmYA2//bAGaQOmaQkNvbkDo6tmY6tpBmMTExkGY6ZgBmZpCQBgYGADpmkDpmZpDbZjoAOjpmEhIS27a229v/ttu2Zjo6AAAA////+l3SYAAAFUpJREFUeNrsnQl74zhyQOW2KVlyy6duWb7Ptrttz8zObJLZZDbJHsluspsb/P9/JDhI6qJsHiBIW6++r2WKRIuoqsdiAQTAmlhH8ddd1tHpNVAH9bVBfQ39DOpi/TQGdVAHdfyMCUAdP2MCUMfPmADU8TMmAHX8jAlAHT9jAlDHz5gA1PEzJgB1UAd1/IwJQB0/YwJQx8+YANTxMyYAdfyMCUAdP2MCUMfPmADU8TMmAHX8jAkKQP3c8tzXZ/wM6pVE/cz6PO8L/AzqFUR93BenVis4EGKAn0G9cqj3bsWj5Rqeiv4YP4N61VDfE9c921U8Fjc9/Azq1UL9QHQurVdxNBTn+BnUK4X6XUd8K6COV9Z/FtRBvWrht6CbBaiDetWS6oKaAKAO6nnkQZyMC6ql7Y4dUAf1HFJIB3golrvrQR3Us8vkpIjHmpGcic4dfgb1CqDe6xYyWGUq52I4wc+gXj7qksRRsTXtii5+BvXSUbebXxSeIYE6qGeUS9uDvGLbvR1xj59BvVTUe9diz0Fd7Q38AnVQzyZFDPKKE2vPqEAd1DPJUxGDvOLE2sgDUAf1LHLXEWeOanvZEQf4GdRLQr2wQV5xYmngF6iDepkJdNJmwQg/g3oZqF8UN8grTno34hg/g3oJqBc6yCtOrAz8AnVQTw1esYO84sTGg1lQB/VS0omU8kWcTPAzqLtFfTrIq64WJ2q7qXP+gV+gDupZc4mjP332/ZYj1vMP/AJ1UE8llx3xNPt9a3Pjk5NKD/I+tAJ1UE+VqC8O8jo6rMlPT2Yy8u92s63ifMOkNjufp0fq6ounirbkDnV11NXH1mZtdsszl43ejgqGknfgF6iDehpZGuTl7e/Kj7bCvCGp3d/V7Gt6FbjhkQh1taHvBG+hHhWMJOdzK1AH9RQiI+vMM/pWGLojPo8ON35QewzqtemREPWjw4b6j/L6eAP1acFIRvmGDYM6qCeXmEFeLZWebG0Kk6co+hth34yiOzyimZWobzf1mtIKdbO6dM2f2fLMX4X6tOBcO+EAP4O6A9RjB3l5O591nhEl2KpHxkT12SMBxTrN0bIqqm83awb1xnIFcg38AnVQTyzduGRZAq2xDBKYtk7eNb0ykk+P6KIqL2m/gbosZRKYuE7MlxwTt0Ed1JPKxcITy5bmWdRML4wnDKsyXf8URfXpkQB11XA1/3N1VG+bvWHBuQ6gHE9qQR3UE8rSIC+Th6s8QyXWNS/IyNVDJZ1+K0zDIxHq+tCqzsbg8au5DdQXOhu15Bj4BeqgnkwkZA8VqPuZ6AzwM6gXiHopg7ySpFH4GRPYRb34lbySN467+BnUC0P9W/EreSWVyUm2ea2gDuoJxNasfSuScbUCUAf1BIm6m5W8kkq2gV+gDupvy7GjlbyS1+e2h59B3T7qRbwwN5dkusuAOqgXlBsXKVnaDqAO6m/IxOVKXknlQHSu8DOo20W9K7q96umQvp8f1EH9dbnIvyxFIel66qe3oA7qr8q965W8kkrqMTmgDupvAHVaUS3SXoSgDuo50gQ9t0iYcevmr9euBxNOW9E4XjW0d2tTD/fNvF5A/tQK1EH9FXlr1o8XrgwQze/39NzQ2T2t/e/UsgFf1WeO9QJyN5hBHdRXy5tdeiHq0/n9XjDVbnZpgB/VJVDLuV5AjKTrBgV1UF8pbz+oCVGfzu/XM422m42ZPRs/fVXkzxXLsF5AjKR6uAXqoL5KEqy7MkU9nN8/RX26Z2uz3dr5XJ8tlmW9gBhJM2QB1EF9lSQYVDVNYNqze3QCE+yRnEucf9CrHuVcLyC2jokHooE6qOeImNNmaTi/3wtXEAj3KGp1J4xO0XOtFxDXRZR84Beog3qOPDhCPZrf79XqQS9hsEfnIprir7t51wuIb0884WdQz4F61mlt4UIYziTxVEBQB/VYyTpZ2TnqiQd+gTqox0nmdw+5Rz3pwC9QB/UYOavqIK84GfcTvTsG1EE9Fp7Td6RPsveogjqoZ04JKiOJBn6BOqgvyV5lVvJKKt0E744BdVBflFwL9pcjowQDv0Ad1BekUit5JZUED7xAHdSXAuTeO9Tp9M1bEaiD+rwci/cqbwz8AnVQX4iO71f28DOop+uBwc+YANTxMyYAdfyMCUAdP2MCUMfPmADU8TMmAHX8jAlAHT9jAlAHdVDHz5gA1PEzJgB1/IwJQB0/YwJQx8+YANTxMyYAdfyMCayj/o6nZuDn4lG/OrjoDq17rt89Px2AesVRH91fvHT7RajT6T5efBtXCvWzmwLdNzztuUb9g4asQhSbfOkXPYvwqjKon10LcfJ4cX9l3YzjwcOL+vELUK8o6pO9jhC3F6eDcREKTQYHF2pS+/NdNVA/l4H3qVecA8+6QnRHoF5F1AcnQjxeFavV5LwvOqcVQH30bK8erxh0eAnq1UP9QQbccfF6jb7IC2pUNuqTa9EvfnHm8a3ls4C6DZG5xYUbzc764npSLuq9G3Ht4LL2e8cp3lkI6m4Ue3ER5abB7qZXKurnzlasPbajKqhbzF46Dl+2MBlaWQY8swnefC25xXzN6kKKoJ4/pxBu13C96ogv5aE+drli7WWaV4yDetGKTayQl/LaGpSG+rF4cajqkzjpgXpVUH8Rz67VexC3ZaF+J/oTl6re2ns9EajnTSdEZ+Javd4w6buIrZvg1vGbsc6yvl4R1K0rdpzt9cW5AeiVgvqZGPbcqtq1Zl9Qzyf3FpPJFPKcu32QzQRd529RuRL9HqhXAfXjcl51eZX7CstkgrHoOH8J3LWtThhQzyWTjvtMPciZz0pA/aGEN3taOyeo55JT8ViOhk95Achkglvxzbmm1u4koJ4zuN6Xo+Eo7+0kiwkuRaeEhkk3f3cTqOeWS3FSloqPOQHIYoJy7mFPljIYUM+Xv7yUpeK3nABkMcGjpfiaNp4MQb101B/Le4NxXgCymOBaXJWhal+MKon60aH8yXVBfViO720AkMEEI9EvRdOunQZRWtQ9PZ+3vep/tF49+tFQL8v3NgDIYIJ70S1F03PxUArqG59k4F4F83azfMwdon5Wku+1fMkHQAYTPLgewmmpWZIN9a3Nmv8K6nV5IXx81KNFAcryfXCd7TlC/WAURtdyWiYDOxElJeqacoO6F+Qq2839XXUNiIbcV1MZTC3M2YXapwtOs/e62r3z2dwfwovHa9fNzrCwPoUq0VI/rn5UldZXkv4PeuvosOZPD7pD/ULsjYPA+lQe6jkBSGGCYf9Cw7732gMkA0AhcieuS0B9u9mY4XBrU2609r9TwH+Vn1JduddkMaqkLu21g/82E/jVf55DXeK9tal2hoU9Cb4sYbiW2/roPOrybLMHXaIuDOx7MWFOX8rq+ixaxvkGradBXQgN+/NrM0JaO7+tFabpsATUdZBVqGvcNer1jR8VozWvZig0mOqSEeHBgSnqtYWorrZbASBRkiT3qn1Hh43gzPOo1/e/q80cdIu6hj3O93V9x3LA+iQfAOlQ17B3xSsLLskbur4tF6KpKAF17UiFoQ6kGnVv46evu5I4CabJKAx4qqRGXQZfnZS0TOIyTWDMboN6LbgPhIXD/6YKbjdFECnrZj03g3pr/3fyv04Pzlfchez9S0xfY91U2UHz3PUymP2+WL1WhQQgyGvDXFT5d+e3Jivd+DSb5i4lpCbZFSsbegsrcb76zRrqnsmRZ3N1ryaJl1d0PUg3wsBWC+HV18RCVDfpiSxQm0N9WljBIkvUZ+8Nc1H9J1W6NpsaOafg5L9ifB+g3ii2MaKk75r1f3sF9Vbg0ZlcVH3ThlAfM2luXEIqj+wmuKgToP4azWlQN5DrT8WiiurqX33jh5pWwHg36pCM8vVF1JV/jWFqcwnMtHCQzavtaYfPDAm/apobQnxvkIsE5uS0d7IKdW+p3W25MWLyirHDBEZ0B6+cUNdZX7XenH8j9WbS3LiE9C3URxb0Soe69uN8AqO+6LuTSc5VO1XdpKLgpiOTJ1ZF9XZEgioYFY6CnjaTDnzzJIgw/EcH3aJ+olZFvhaX8c1S/RStyMZIfiVSot4dqGGcK58Nz3RXhLmoUV/6LzBAlObGJaSvoj5Ko6kd1I8OjcGVSi2TerWn92pdWaWGPGISbZN/qV01rzaHgr5ZGySCBKZudoaFowChL5768v1dXUkmHtRL6Gw8Mct/d1c1S7ebKoQV2Bjxcz+qTYV6d7BK3bkLXGmzgLpkxRAyTXPjEtJXUR+nGT9qK6onFd1eTfFMybPcT1Us6k/hOvePMVOBzI2vHtzBi2qM5O+CS2GCvcFqded62NT9fD6BUfHqx+D+H6a5cQnpq6hfpdEU1G2iHslLXL/6HOpFNUb0gxVXj5Ai5Fc+LW2Zx0cq/wxz0RD1ls7m5tLcmIT0VdRTPSwD9UJQv4hZfzfojq35hTZGNADHjlG/WDll3Au61OXfKBeNmir7u/5CmruckL6K+n2aRaVco162OEL9IGZWTj1qaRXZGPHVtJBzx6gnGna1GLViO4/SyUMaTUG9EMWST4/w7D80P843pTmDCRK1DhY1XdnWcKYpqNuQxNMjCkB9KC4doy7VnaTW1Ms/XCCnpqBuQ56TrsZiH/W800KymODZ4hLQ7jQFdTvt0tIGrOedEpTFBOWoa2vyE6jnkTNxU5aKX3Iu25nFBPeW5u6nkz1LFxio55FeX1yWpOKJuHOOei/vSTPZuGPJxqCeS87LymDu875NIJMJXkpYYftbOk3pbCxIsauylvd6zLsCcCYT3JWg7nM6TUG9KMVKWrQx95KNGU0wFAPHmk6EmIB6FVA/Ladhep57vYhsJvjifNXptJqCelGKyZZaCX3NV53cy4plM8HoxPFdbJxWU1AvTLFvZbwh5jl/8zCjCU4tvFwvjRynXfwX1ItT7NbOMmtp5MzCGxUzmqB37XTdo/TvDwT14hS7Ex3HLdNx38ILmLKa4Ex03D1KkBfWuQ/qVUHdfxF9p8+RRtei2ysNdf9RDJ29+utYXI8sQgHq+TPnoct3fz1bYS2zCXq3zhZlvbAaREDdQpi9FTfu3nFo6SaS3QQyf9pzoumBsNq7Beo2kuehGDp6p8Coa6lpkMMEg47oOri0z4XdBj+o25DJjeg4ec3h1VCc3Pklo+4P+uK66ObJ6FhYfvsxqNvpKngRolv4s6SrPSFuJn7pqPvjW9E5HxcJ+umJ6A98l6i/W3GMuu9/6wsxfBoUd2MffOtKvb64igZvXNqPannWs2KytvHgXBrzdmxZL1C3FtifzNqGhawa2u/ozy8Tvxqo+/7lnq5Yx76qZoXIe+t6vYp6YQ0O92+qd5KZne11T4q6djvd46depUwweTi+KUTV6+7FVQF6lYH6pFPiOxDfdyMEE7wv1M+FOMbPoP7xUZ+o/O4KP4P6h0f9XOVjx/gZ1D866hPTaL/Cz6D+wVE/N83sY/wM6o41doz6JOyJvcLPoP6hUT/odrtCyI8H/AzqHxr1SpgZ1EEd1EEd1EEd1EEd1EG9+nqBOqiDOqiDOqiDOqiDehIZDPAzqK8F6vgZE4A6fsYEoI6fMQGo42dMkEBjUAd1UC9Kul38DOprgTr96qAO6vgZE4A6fsYEoI6fMcGbeoE6qIM6qIM6qIM6qIN6EmFkI6ivCer4GROAOn7GBKCOnzEBqONnTJBAY1AHdVAvShjZCOprgjr96qAO6vgZE4A6fsYEoI6fMcGbeoE6qIM6qIM6qIM6qIN6EmFkI6ivCepr4+ftpnqXXxvUQf2j+7m189n366IB6qD+wf1c3/ikQjuog/oH9/PWZk3xvr/rHx02goxG/vVkUlPTh+VGI9xog3rRGoN6YXJ02FZ0q4+vu1FGU28Y5I8Oa+F10HYf+0HdiazLyEbTKtWRXSXtYUYTfPfC7KY+WwLUPxTq69KvrlulR4cSaS9g3qupHXrThHH5qb6bCwLUQf2dVkDHbd/b+by12Q6obgeZzcan1r7KaeSnZn5rM4j3oA7q768CplWqINatUvkRJeRegLo62NJNUw/UQf3dVsDEcC9seMroLjOard/vmq523VxVrVK90XLd+U5nI6jbbpXqaN0yGyp0q70md5H7dFtUbezvkquDOn7GBKCOnzFBtVFnZCOorwnq+BkTgDp+xgSgjp8xAajjZ0zwZjsQ1EF9bTRmZCOog/qHNTOogzqogzqogzqogzqog3pVZHU7ENRBfU30AnVQB/Uiq7On/x4II86/aZVLOzvfCvxWtZGNoM63Qr9VBnXu3phgTXpg8DMmAHX8jAlAHT9jAlDHz5gA1PEzJgB1UAd1/IwJQB0/YwJQx8+YANTxMyYAdfyMCUAdP2MCUMfPmADU8TMmAHVQB3X8jAlAHT9jAlDHz5gA1PEzJgB1/IwJQB0/YwJQx8+YANTxMyYAdfxcTRN4oqb+1M2fqqBeSq1AfR1Qb4kqou64VqC+BqgfHVYRdde1AvU1QN0TCqqtTdFQoXTjU7i189lseaLtT/f5f/edLP/PqpSSjU96x/5vPskyO//7r+qQFdRNrXz/b5ti/3s/OJs6XXQ+U0ZVKabufxNVT/6A+PVyaVBfP9QlIT8so77dXEZd71PRVlEYoV43ENbmcMyNelArX//6/u7Mb0fnW4m6qmeEuhfVCdTXHPWjw/1dbwl1BfQi6maf/9//I0OtZqceJBpttalx3PhFb+VHPayV/vWff787rd30fLpS280l1IN6muptN2XBnw8XSkv51fegvl6o/5OixJuLyYoJT/x9cxF1s8//+f/CMKlZ0kmNQrJhSqut3KhHtdJsSpnCPD2fr66HGXjn6x5Vz0hM6QaorxXqwuTFC6j/g6gt5erBPpkdFI96VCvz6ytQV+Auox7Ucwn12dIN9VED9fVCXUGxlMDIvUuoB/ta4t8/zyYwEn2dUOjSG79s/RjAmQ/1sFb613/+y0wCM3O+KOzH1X02gdEXy3xp+dEG9fVCveHHoC7xCFAPwuU/RvsWo7pp7YngcggbjHlRb8x2xJh2QFC76HymmsuoB/Wcr55qps6UNj8K6muF+q/9ONSnnY1T1KPOxqbY//PhFPWtPzZNI0+W/s1/BB17OVGPauVv/UGe7q8ztYvOt7W5/70fg3pYz7B6f2ga1KelNf3/+QvNUjqhFmW7+Vb/oT/Np5NozBgYUAd1/IwJQB0/Y4J3pzGogzqo42dMAOr4GROAOn7GBKCOnzEBqONnTADq+BkTgDp+xgSgjp8xAaiDOqjjZ0wA6vgZE3wA1NdQQH0NBdRBfU3k/wUYAGAIQ1IgLVRGAAAAAElFTkSuQmCC</binary><binary id="i_021.png" content-type="image/png">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</binary><binary content-type="image/png" id="i_022.png"></binary><binary content-type="image/png" id="i_023.png">iVBORw0KGgoAAAANSUhEUgAAAuIAAABaCAMAAADKO8M8AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAGlQTFRFAGa2kDoA///b25A6ADqQ2///tmYAOgAAOpDb/9uQZrb//7ZmZgAA//+2AAA6AABmtv//kNv/OjoA29uQOgA6kNvbADo6OjqQtpA6kGYAkDo6kNu2ttuQtv/bZgBmtv+2kLaQAAAA////L1uYBgAACRJJREFUeNrsnWmboyoQhenYQxanl1nuvsyN//9HXtmKwq2FwSh6/NBPYiN6Dm8AiVUR9+K3prvdj7QdW/2cTfQ9+mCLPmDh7f7zV7g1SVCf0yEgDsSBOBAH4kAcjQz1QByNDPXrI16p288YR6q39/bvy+fLZhu5TElQvxDi1euXVp3YE+KFSoL6ZRA3wozInSBeqiSoXwbx6/nW/q3vtzRH6nZQfP5k9stLO0Tq/9Fe6cbM69m8qtRu3ceo4bTtb6Q+QLa73UHXc7u7OT3pS9LH3eIauVRJeRA/gPpIxGt1eutLvCPq5enJWiJbyfoN7ZUXsvzt/fRkHWnFiub62yddRv9b/aGD6tev6rDv6q9uqfp+iWrkUiXlQfwA6h+AuP2K9NK6cqMqzCdXvQn3aiMCR6rXr4L+Zfa+vfuDqufflZlC2n82tmNYtJG3IGk9xAtT/8heXI86enjSFy5MTX5v+/G2A1vrhHOkfv1FvVKlhKlN/ccfJJ+/fVeutgYbm8jcR/RjK0raQC9ehvq0ufiH5xxxhBvpHbF79TCljTg9XezH+/nb+WY/y+2etqa2HnWAr0qKtnTbSVR20NM9RsJstDhJWefie1b/yBWV8Cbcj2sX5raWrz69xpFfzzRc2YaQehyjg5R51fMfwgx2gip+0JrCipI2sKJShvrYdXHZXtX1fGlSHNFrsE3N7k7MvbXdq9+ovVqTceRuX9XCfujVjfel4QddzD24nsaZu5Nb3MpwoZIyrYvvX30s4nod6NKkOaLvVGiNSVT2TUXLRe30TI1T6gh3H+JeuSNPT2ZQtTt0T6EcvH7/YlarBsfcye/3ypSUCfH9q49GPNXU3iZF0sXQGlW+Ri5TEtTvFfGPb/6La+Q0SVC/V8TTFkk33ciLr/seW/16iD9WwkMaeasbHqYF4kAciCMGHeoRgY9eHL04JipoZKgH4mhkqAfiaGSoB+JoZKj/CcTrGfHavSfoxaYbOVKSeTyjoODFrOq30qSLIa6eco9EXD8qufJzCFONHC1pV4jHN6h5burl8xa+lVwC8crEbEQibh6V3GgjR0vaFeIJDWra8noW+0S88Q+0xyCuH35fMTB7eqg+pSNOUtSFX14+6+8Rnj+RIP30qHQSzYnoGHl3D7ImRa9TmcoYdGNFfNW51VNx1UbqNG/v/uqlD2RzD832nCCJnUKhOUxAmjldb8bMyYW4+uSvGZi9FOIkRQk8/fmlMY85e0EDiNMxJlDAIJ4SvU5lAsR1EVb1Muptby4tcKJz0SG9HSecxCHEXQ1cQJI5PW/GzMmEuBrUVg3MztrIOlKGh2IJ5phHXAsa6sXtMboCh3hK9Dq9CBBXRXjVudVTiBBDnAbqpsdszwnepAO9uKkhEJBsTuDNmDk5ELejwqqB2XkRNyPd/dKQFP/QMyFuBJnwREGpGYQ/xkbvGsSTotddGY64LsKrXq4XVxMVg7i9en/RXm3PCS+RFeqaEwhIMqfnzZg5uSYqDXv0fY3A7MyIu6YmKX3EnSB5Z3NC0+E7+XwunhK9TmUY4sFpF56Lq1E1QNxfNO+gO054qwZ6cV8Dn4snmPNPz5sxczIivmpg9kKIkxS/vGIRDwQFExUvXw35vYlKhElUxiPuirCql5mm2QlLOFHxF83o7TrhrRpAnGrgAlLM+a/nzZg5GRFfNTB7IcS9lO7t5p266i7idEwwUUmJXqcyHnFbZMmJil0Rv57VSf3tproYZoent++EC9sfQNzVEE5UEsz50fNmzJz+urieDkWl3aDOdsXA7MmV4WhJflSyUtyioe/FSVAPcTqmNqugdqKSEr3uanIp2IQrwqteQD2bYNmJShVeEKe35wRd/tDtpq0hEJBkTs+bZsScgV48EanYLW9g9taf0pA5vkapxErq5bJfAuWovhIRX/08iIe8gdlAHIhvDvG8gdlAHIhvDvG8Gx6mPa76WfKAOBDfPeI7jEEH4kCcIb5HUUgygY0lmdgj4ujF0YvvvBcH4kAciANxIA7EgTgQB+JAHIiv3Ow64PIW08j+lyfLRzxRvQDi5TT76Uk9w/hxKxf8K/D3vOq3kDUEiMc2e/Jvlu1iohKpfgtZQ4D44xD3+S6CfAej6SRy5ZOYzJmwPOKxWUM6+Sc6CriEyoshb00uC/++cs+4+xLOVfXMVs2STPDkJOyEx0O8Tp2osHwXPBh8PJ1ErnwSkzkTIhGvoycq0VlDOvknQgVcAoVPcW9N5IV/X9mII1aC8lyI0HuenMSf8HiIz5laDiLO8130ETeT3TCdRK58EpM5E+IQj1WfkjXEv+gr4P4wIcxbySxV7w3ioltCXYsLp/KGUXKS8KoOhricMbMc+Ylsn++C8h1MppPIlU9iMmdCHOKx6pOyhvj8Ez0F3B8WCcO8lWaGQe/tRIWXcHkupJ0FuvOx5CTsqg6H+Jw2Hkac5btg+Q6m0knkyicxmTMhCvFo9SlZQzr5JzoKvASGOPNW0jHmvenF3/5mJQhx04vT+VhykvCqDoW4nBXLP9KLU74Ln+9gMp1ErnwSkzkTYhCPV5+SNaSTfyJUwCSwZSrmrWT3idLF7tevf3VK2O6ce8+Tk3Su6kCIV/OyVQzfbvp8F7KXJmcwnUSufBKTORMiEE9Qn5I1pJN/IlAQ+MNuN0Nv+Xvbi7+zEs5V6TIFmvN1kpPwhBfHQdxmk/1wtB5ZNKzddNRnOZhMJ5Ern8RkzoT5iKeoT8oa4vNP9BSE/rBFQ8olYrNC0fvqbmv1JZyr0g4K9nxBcpIw4cXBFg2XOGBkWzYSOWnR8IHqExUs7SoQB+JAHIgDcSAOxDekFQ/TAnEgDsSLF4UIfGz7jsA/9oZe/AC9OBAH4kAciANxbEAciGMD4kAc25qI7z//ABA/OOLyNuuJ8YKDs4E4Jio7zz8AxIH4nN9VKjj/ABAH4nN+HK/g/ANA/OCIqzDeGb8cVnD+ASCOXrydD6TNxcvIPwDEgbiNyotHvIz8A0AciM+ZjBecfwCIHxvxl3/f3Q1jwu1mEfkHgPjBe3E9d477drOw/ANAHBOVRQ4Y2VaIXAXiQByIA3EgDsSxAfGy/QDiQByIYyurSbGF2/8CDAAUK7UHSJpjIgAAAABJRU5ErkJggg==</binary><binary content-type="image/png" id="i_024.png">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</binary><binary content-type="image/png" id="i_025.png">iVBORw0KGgoAAAANSUhEUgAAAWgAAABDCAMAAACGJ2+mAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAGlQTFRFtmYAADqQ2///Zrb///+225A6ZgAAAGa2AAA6OgAAkNv//9uQtv//OpDbAABm/7ZmkDoA///bZgBmZra2ADo627Zmtv+2OgBmZmYAOjoAtpA6OjqQOgA629uQkGYAZgA6kNvbAAAA////8jya+AAABEdJREFUeNrsnItyoyAUhkkNMWlq1O3e7/r+D7nAgcNFs0WN6ST5mW1L0DDkG3JAPljRIV0lia6fmWa/8SETQAM0QAM0QN8M6OOhnANa2pG1BNA80GIKqxD06UX9bhuAzgMt938bgL5K6GgXgxZlrWJIoV7qv6bcRJZiuzPRZfPkLnBB29h3APQU0Bql3D+bn17oXzq3/aDuqPWr4AIVtE1hCwF6CmjFWXXWSv3rTaanXO+4+guOPI3CBUBPB61yRE4XeYaGq7/gQJvQ0QH02qC3uxI9+hqhwzAG6FmDoVCvzXCnMyYXDIb+gu/RKno8Emh6wMsd/8/16E+2CkmTOXoOogkfVe0vUIGe7r3uHqtHL1/rEIQQCaABGqCngEYC6PcGjQQLjtAB0AAN0AAN0NcGbeRSMQO0teAFeOaBFoVeACpmgCY3iDQhdOTv7ADodwVd2300vBbKMpwejVTWW29JGbM+Ypb+Y3P+6jz5HSygDEDXy0KHNCDL/vjjiSyKd96GVn168dbb6XEGPTTn1hXcH+i2yf5Mg8Gw1MOpWeAn7hpdIK4c6D6+1vsePaK/7ha0yN9fkfZoHXSOBydpdK6KVCyDdtabPaFdbylGhK4F3bGUuRPQYsIUbRA6xOklcqxaBo6AZuvtQdsefR70RgeimyYdg5ZTpsJjoL3xtgBHQgdb74mhQ9z01CaRs1MeOcZCBw1n9eapLm1BIMODHk3WW6SD4dCchz26vJfQYXcdzrHg5o1VH0zrpNsuzfM8jtHeeot0ejcw5zUL9RvffI21DoAGaIAGaIAGaFhwWHCEDoAGaIAGaIC+Pmiz2FHNXVTCydls0KKYsoIH0ItCR7yiDNCrgT4eFoJONTg7b+l8lF0VrfpUg1fqhw4tmwD2thLX2diehxWwdg9MfOTbS1/ymp5U981dB3TbZHuMcdCpBvfOm1bvrWohFKEGNyX1/psWjV++ln2OEtdZYc+e061hBbwAnph449ttM0P08Ul1bu4KoHXny/dFo/8xykCD95yhltuM+HioYpdlSuTmu+ZWRhLsvBJX2US1BxUESifWaUaauWYmoP293NyVQofsyiU9eqDB/Ulv0flvqzx93lWRnaUSsfn181l9CSQRfEuJC/JBkQHmCmJJ6Y6bOt/umil422BygFpc1uoM59HZDvQM6ESD+5PeLP70mU8jYgPQtkSUbVMpNjLEc16J2x4dkvQVjIKOfHvfD0JHAPqynvLSoAca3J/0Fm4g5LDhQ4ctUZDUl/93qT90jhK3AcLfGlbw/9BRjYOOQ8cFd+5EcvaPHk2WhY6BBg+cN/do2tNUBRrcllA3N3EnS4m7WQffGlfgBsPExPPms9rFl2Aw5HvX7NGyu8CTYarB2XmzyjYfmbqO0+C2hMfK7S5LidNsRY9+9taoAr8HLTbxkW9PQUftXzVGY60Di0oAjQTQAP14oJGukv4JMAC83L9U1yYwtQAAAABJRU5ErkJggg==</binary><binary content-type="image/png" id="i_026.png"></binary><binary id="i_027.png" content-type="image/png">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</binary><binary id="i_028.png" content-type="image/png">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</binary><binary id="i_030.png" content-type="image/png">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</binary><binary id="i_031.png" content-type="image/png"></binary><binary id="i_032.png" content-type="image/png">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</binary><binary content-type="image/png" id="i_033.png">iVBORw0KGgoAAAANSUhEUgAAAkAAAAFaCAMAAADB4RJkAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAPZQTFRFWVlZxcXF+vr6v7+/9fX1rKysjY2NeHh4mJiY6urq+Pj419fXo6OjeXl50NDQiIiIbm5uY2Nj4ODg+fn5Xl5eXFxcbGxswMDAq6ur8fHx29vbc3NzZGRk7+/vYGBg/Pz86enpi4uL1dXVg4ODtra2aWlpsbGx5eXlp6enkpKSnZ2dfn5+y8vLoqKiu7u72traxsbGm5ub5+fn4+PjdnZ2goKCz8/Pn5+fh4eH1NTUwsLCenp67Ozs5OTkzMzMyMjIaGholZWVj4+PysrK7u7ucXFxa2trioqKnp6ehYWF8vLyrq6udHR03d3dtLS02dnZpaWl////8VpIkAAAFbBJREFUeNrsnWlj3DaShmmYp6TwMhXKoji2yWY3yT4T2Y6dZDLJzmR3Zi8v/v+fWQBkS22d3YWWaNnv+yGS4wbIBh5WFQpg2Yg/QRBZsfGJQxBZnwAQBIAgAAQBIAgAQRAAggAQBIAgAARBAAgCQBAAggAQBAEgCABBAAgCQF+SnhnPCa0Ovvv+xQN1PfyX+9YBOvjOOLrnI6fHhtJzfYBOj492n76Tuy4q7n+t53d/EgA90GNn3GceTo9/+UHq9EsEiI/Fnb01Pqj7A0CPL/usMQ7vA+hoXy6MBND9OrnvKwCgh9LLvxzdMakACADdO2iH/fTa3SSoUTx9q4KKo5sBOvg5M4yzn9Wfz17LP9SvJCZjESv9m+zqwBW/ffhVfuD8D8N499crAImL/nzc98APxCfORAfPuhjr8AK4i/7k32ze3Ub3VwBa9yF79+W3WF/jWoubPtZ1fvEtANBWHkxMVRc59JjYZ6/FSL77bXx8tvj1ZoBOjA+//e2tavTsbCrCj2OFmm389H48fS3n/0z8diw6EgbOePdDdhlmrQH6xfjQHKse1CdkZ9cAuuhP/s3G3W10fwtAvxhuIygQHXfXuKHFTR9TrS+uCoC29GDyP29erWdN/S6pElP2/PMg2l+P8fk/+LrRM6PDRM2r/B+X06mmvGPz5BpAstXpsWzQfeL8f64BdNmf/JuNu9vo/haAZO8natW4vsbhdfd5/WPdddZXBUDbBw+2ejbV75eDqNjaXMYffRYmdDPa//lEtTr72P/Nu7/++OOP8ds3r3rveHDNhT2/xGT9V9cB6vtbm72Lu7vo/jaALg1q39P1Fjd8rO99fVUAtF10+9v79+/dy7FULNkbbNwURB/8/Z8//HC88aF14PTLQpHX52XevOrM1F0A9Z+4AaCL/vre13e30f1dAHX899e43uKGj33+LQDQNlqnCI3Oh5297sazj4Fe3wLQs67VVYA4//tbQ83wG/nA//jjK64F0Lq/Prhd391G91sDdL3FrQBdXBUAbePB+pHq1jhiANUECpP/dnPRcgUgMZX+NRfWL6N/Fo5uY+Pifhf28i9XXNjzzz4v++v/5+XdXU983g3QzTsptwLUXxUA7ZCfeaZGTDyp/9GFqvVdeaDOaLx82435RRB9GZT3+WDvH5JMtew2bgWo+wQ//7ie/KPPgm7V33qqu7vb7H47gG5qcSdAl+EfALonCXS0HrE+FWR0wyk91C8fPn6+Cvvh48ZK97+OexdmrBfkp7//9F4s7g9VEPTTb3/7o4tc5Cr/LLsdIPEJuYw/WjsquexXn7/sr5/Y/u42u98SoI0WVyzeNYAurwqAtkgCXQzU2od1luTkbPH+/T+P1397dTNVpf78daT9vyob1yfr3n3kn/96LpzhT7/atwPEz99tJBL5+b+k85Sfv+zkItDq7dxG99sBtNHiPoCu9w2AqCn9e7c4vvzs/03LhiP+RPV0ADrZ2Db42gA6+SIXWF8ZQKfHZz+9f//H8ZM4Bbabvszw+GsDSIUlKi756gA6+f4FAIK+TQEgCABBAAgCQBAAgiAABAEgCABBAAiCABAEgCAABAEgCAJAEACCABAEgCDoBoBO+rctu1dV5Iszhxc/IOgegA6+e27Lt9yaV/zkjXyF/FCWaup/YKigLVyY3Z9GP/3zBX8mIDr47rD/gaGCdgBIUnOiCnw9739gqKDtAVIW5w6Azj9B36TOtwTIVtUoYIEgmgVS/CAGgogA2V15LrX8+v5F/wNDBd2/jJflUg67uimHF/mgdVoIgu61QBAEgCAABAEgCABBEACCABAEgCAABEEACAJAEACCABAEASAIAEEACAJAEACChtT/3SAABAEgCAABIAAEgAAQAIIAEASA7gSoKzC1riiFAlMAaCeA1gWm+opSKDAFgHZ2YRKgdTUFFFcAQCSA1vVcUN4FAD0UQCgwtW/dBNBTLTAFCwQLhBgIAA0H0LqiFApMAaBdl/FdZal1RSkUmAJAu1ogCAABIAAEgAAQAIIAEASAABAAAkAACABBAAgCQAAIAAEgAASAIAAEASAABIAAEAACQBAAggAQBIAAEAACQAAIAEEACAJAAAgADQTQM8OQhYKu1AmCANB2AL3899f89PfXV+oEYZIB0JYAnf75QkJ05R15TDIA2taF2d//53fPr1bpwCQDoK2DaNsQVgcAASBiDNQFPXcAhAJTKDB1B0AnwvwIYhADwQLRLFBfHOhKnSBMMgDaOoju8kBX6gRBAGjbIBoCQAAIAAEgAASAIAAEASAABIAAEAACQBAAggAQAAJAAAgAfRH8ASAABIAA0HDNAdC3TgAAAkAACAABIAAEgCAABIAAEAACQAAIAAEgCAABIAAEgADQEwToxDC+f4ECUwCICJB6OZ4/eoGpp3okBgBd0cv/Vi/CP3pxBQD0lQAkXZZx9Pj1gQDQVwJQ77cevT7Q0yiR8zAFfp5I8+3qA8kaiYIYWCBYIKIL+/21CHqeIwYCQDSABDwXZX4fs8AUAPpalvEiipbL9scuMAWAkIkGQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJA3wBAuiUiABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJADwLQiawotWuBKQAEgHqd/p4d7l5gCgABoF62v1FUYeviCgAIAHV69sYUwOxc3gUAASClg3+9PrgboPOHqHKEAlNfS4EpQcwBLBAsENkC2YbUEWIgAERexktgdi4wBYAA0CZAOxeYAkAACJloAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAeooA9W8SosAUACIB9LJ5xU/evEKBKQBEd2Gnf75AcQUARAdIUIPyLgCIDBAKTKHAFL3AlOTliKPAFCwQ2QJJflBkEwBRAbIFMhwFpgAQESCZ95GZHxSYAkDIRAMgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAABAAAkAACAABIAAEgAAQAAJAAAgAASAABIAAEAACQAAIAAEgAASAANC3B9C2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</binary><binary content-type="image/png" id="i_034.png">iVBORw0KGgoAAAANSUhEUgAAAuwAAACFCAMAAAA3ml11AAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAM9QTFRFkDoA///bZrb/tmYA2///ADqQAABmtv//25A6OgAAAGa2/9uQAAA6ZgAAkNv///+2/7ZmOpDbOjo6ZrbbZjoAOmaQtmY6OjpmADo6kNvb25BmZra2ZpDbOma2ZmZmOmZm/9u2OjoA2//bttv/OgA627ZmADpmtpA6ZpC2ttu2OgBmZgA6ZmYAtv+2kJBmOjqQkNu2trZmkLaQtv/b29v/27a2ZjpmZpCQ/9vbtraQZjo6kGYA29uQOpC2AGaQtpBmkGY6kLbb2/+2AAAA////GMXNDwAAEztJREFUeNrsnQl747YRhiXRB0xLNpnN1SRNdrObTbvN0Ta9k57k//9NJTCDOUBKtmQKJL3D58lGpnh8AF6CQ4jzYdXYYst7sqya9nktjal8j7UeLojBbioNdoPdVBrs1jQGu8H+PJvm9ubqer3a3j1jgB4oosHer7Dm6nrmsBf4UH4Uufc7v8vYZRtWuV41JQi9vMhYZQ8U8SRCJipKHthdV131vGHv6v8E2NvbD5vm7V0elS5o6+Db5O3aDxaxORGISYqSA/b16uqHeVzDB2Gvwz1o7JhkPJXQH7qZ3CSfBPsMizIW7Lc3l//beYg66n/b9RO/5o60DB83vu/Htf5a/+ymaT66gG+6ry6/hq2ffr08CnZW2a4/vvEiL1J9r5rm0xcova2wzdYhEvrkDleHDuzyovIrf7yWe8XtjlVZNV5cp5Mq5oIViKNS9XE5/n3TbF+AhObXF3iz9YUhrekx2/QEo8bsXJSe7FSbP7eDa6McYEMppENMB7vrClV4liLiNXza/uAV+icgHzF3V0MX2/vNCkR7MtiVynDeAX0ROnogoa37sPtmKvpHPVKl1xgaNWnpoEBpjTLwjLDq6hri78DMUbAfeOY6kRBZlER2oi2cm2HvsSEVFk/AZCTY732vXnkN/u7lxUWtIWjzZej+/LJrFLf9svsjbH+/CtRhgeJlnQt2VBmCmgrksr6uYr/wPRKUwrdWhN1vfRMp++Q1Sgfxci/c7miVHR7f0c2QWhoU0FFl9VE5mhfty79ct3/+U6zPrvMJRwGtb/+rj8nydRHHG43hoqSylTY8t2v+dRFqcYAN3kocYjLYA+ddfcv7EvYeRVNisba/33Ud+NUfqC9soAh8teeEHVUK2JU+LwiG5JpN0Xx1I3v2q7vYW/k26rb0xXn7ulV7wXZHq/R7QjjYiA4OFNBRZfVhOarY293+A+sTCYmwN3w/ozsCyNdFHA92XRQpW2nDc7sY9A6wwVvxIaaDPQ7qlX3Yu7b/u6/H+93VdbH9403dhfczgr39GM+f6BPYftCUlQ5jsHC33V2LYO8C5xT2Aw9nzYF+IxxFtTQqoKMegN2HYVCfVM7wz8sPQ18qI4QoXxdxxHF2XRRJqtQWC+cb4tVe2HGrGcCOgSJSoMIYKGoNDFTNB9s7/4FGRCYPYzwFoUITfSKMCXUswpiXO6Qs0vLZPy/C41gSxrw8MOy2T+XffD+wSeNrVEBHldWXhDFV8/Ya6pOCXQm7CoIZdlHE0WAXRUllK23y3BAM9tjgrZ40lDYO7Nit+DgmXo78XFTBzew2BG0NRm6F7CEngZ1VlqEjV/rU9yHOUT07bQBxgOPC8F6HB/SbA7fIUJeqpVEBH7XYc8ZwmYaL9+sVtYEUrWJ2DmNEEUeDXRZFy/5JaZPnFg+okg2xVdGc/hvfOLAX8HuSB6f77zcfNtsvWoI9EOSZL2HDcKHDgN+UsKPKMBBchTC9p++Tuz1Dj6/hw/Yj7D/9xh+9bsVecbtjVbo4rnZg6DGeCKoPy9Gu/wOjnt/cNNu/+ocPagPU+loeU8k/z9AjFyWV/ZPQps8dEOizIbaKX076C6ogajPI2Kx+AumrXMQPNdOUw96NeXz1V03WXywNdoN9OtgzvwpksBvsuWCfvkSm0mA32E2lwW6wm0qD3WA3gAx2axqD3WC3pjHYDXZrGoPdYDfYTavBbrCbVoPdYDetBvtzhz1mUmdPaTfYDfbMKimTOntKu8FusOdWGTOps6e0G+wGe26VMZM6e0q7wW6wZ1ZJmdTZU9oNdoM9s0rKpM6e0m6wG+wT9ux5U9oNdoM9t0rMpL7IntJusBvsU6nMntJusBvs84H9zCntBrvBPh/Yz5zSbrAb7O8NQAa7NY3BvkDYbbHFpnO3nt16SwtjrGkMdoPdmsZgN9itaQz29xX225uNwW6wTwj7egU/TVTnN4bNBvvtTUmfeDKeQsxPKH5np6kiMkxVyypDBpKoDjh3WFu3PIcifYuS3RnmmD+uRlmkrNul9OwVvjB6fofpXLAXTfLmkwvTcmIBi5DOVifXemjED/LBXmy8zk2rz12El7c2oFgUKEouZEEywq5qlERS3S4Hdqi8c4KYGXa3/dVKwX6/K7lRgPMiNpFoq6J0+WBPuktx7vtdnSBEktehXJnwOlSjIJLqdkExO/UZbRGmFsS5pzZ416Rp/jYx+xdnRSwpTvCzGHN3U9DFQ8fhiCKeym/FG8YThzVVlILKYCbb5vB7qgqjtW4a5199javgiqsox4G27E47Gezy3KHQCexRMrVS7jAmqVG+Nbqs86uM8IBa+CmEa8S08K9Ob6AUtz9ehGuYVkRKIC7w5b99cxd368Eudgv/79bd7/wEdZuW0SbY6SgEO7zDGgSF9LPytKYJf93vvrrBLHwJO63uPm3azLDTY5I8dygrxOx1D/aut3mxmiJmT2Bfr0jt7Dv2BPbuMoXGL5BEGXMkK6oIBkLp/9kHu9zfXzP+Y/dfqCCH+xHsBD3DXnyKPTsc4yCKB5qmgmT8cFSfdh/uFAQ7rg4nzAs7B990bjW9ehXvZUJydIeZEnYpspr942lv6LHYvirxOSRAAClgmzaakfAKgB2fw/1HF/tkNicp6CGddwv7eWY99A6jT94wnljB7q6+36ETiripHA07oAK3LlDQHfBLgh1Xh4PnhT1ecK0+N+cVFRzGo2TXtUbVzCCMQZG5HpbHhD2m6WInGgKG2DX7P8QKhH3DT1YchPgYRfbs8jgS9u4/7sf39uzfNJuAYreuegrs0PlEqmsKkhXstaOZ6fONcGzEwKI499DDM0gG+Zl604Owo8gldOwp7PECRWopqG7FFaDDmLrlaJPDGHr0bGPIQsfx7RTWdTF+t8W3YfNDMbsPYSLsTwpjQBQUMTYObaBX5+zZXcIJn5tgV0+iXjLUQ46Bs0fCXsx+3LEPe2xsHBTxPXJIjKlKGDKgFfSA6v+tfKQZoYWevWzTnp0SbAp8QC3D+Zq6TWFPRmOasiXY8fv6lKaJu1VhNEmMtUMYoVZnhD1lPZz7/nd3EKrfvrvGTSjWKcIzOncpk8Du1ZDI9oEmmSXsBT33wxAIWO18vtvADRbphBUxlnBo70BdueP7MDPMu+ExMIAPefAp7P7EGMV3egr4QVEOPdaP7jPjA4UOCsgLFIUCR07ELvlgx0FcEZg5NQhDDypFGDaNGsNu+UdjqEZDlfFI0SI69qnfjXnguWa9qp/WD8233tvlLPYi2DiwPxB1Guym9fnA/sDtz2A3rYuH3ZrGYDfYDXbTarAb7KZ1DNhtscWsNKxnt97SwhhrGoPdYLemMdgNdmsag91gN9hN6xSwZ7TSyNY0g1YawkGDPTOS7yez0kDFZKUxpcjDNSr/cg+9nje7nj2flUauphm00hAOGj3PjPj92Sthn5VGVCxcKqYT+WCNklplSrII2PNZaWRqmkErDemgkXpmwHv3OVwq9rgLKMWYGTOdyIdqNP6VmJIsI2bPY6UBqX846RXsrg8HlQbrNk/DaMBKQ+RZ9TwzQipKFpeKvb4xQjHm3k0n8uEaRWMJ5dOwlAfULFYa1faVt0x7910pdxeJT5BLARlOm9GbRtpRJJ4ZsHUWl4o9VhpSMSTETCnyecOew0qjdSHv1JWFn52Wd+eUVsx9fnM3NuwVGB1EO4qeZ0YV06fO71Kxx0qDFJNLxZQiHwu7NiVZCuw5rDS6jX55c9f19c5fULS7MCvggHRc2JGpaEfR88zA77O4VAxbaWjF3qViUpGPhV2bkiwG9gxWGt2G61UNkajYvQc7HGdM2OWYqj9/6pkB3+dxqRi20kgUFxOLfDTssUqXBXsGKw2ffeQufw6dFu/eC2PwnzFhF8MFtF52mvB9HpeKvVYaCeyTijwK9gX43+W30gD7OxwWod3xcAWNNLj4dDZa08iBYG0/FJ+Icew9h0vFXisNfP5kl4oJRR6oUYy8RP0uwGAgv5UG3QLu43HDzUQdDmN8jv5P7TMHrDTYjiLhqCBvsJy/oGorDVKs/EynEnmgRtlKo/GumWd3UDtHzz6XhTKt3VNgn3O9t8tZ7EUwg91gN9gNdoPdYLemMdgNdoPdtOaC3RZbzF3AenbrLS2MsaYx2A12axqD3WC3pjHYZwj7dJNyh9cmh3509i8Cbwx20/qMYHc+maOftOv0JCzHNY3MhadpZERiPifuc5a/TOzPAlAqEl6Bk2o2/UIkaf7ZYNenLfDtpYxeB6PBju9fTfNOjz95OdCt16c3jcyFdyERr2xlYr5M3Kcsf5HYnwUgKZK0KTVi7shYiL5xQh7Y1Wkpwyqn18FYsPt3Sp1PQ53RRXr0+wJ7cuHhplH5V/Q4MT9N3Kdua+gWcyaApEhtGkBqEln+BdGecUIe2BN3ATWVu1tU8gbNru7rlNIvDk7bCN9FmwCdscGOAqnxAG2CK2CWaz6WONx6FWbh3STTm4f+BfR8vtOvAu95n53THTgxv5e4L/Cq8/WW6UvhsZr6sMucjfVqkjBmMF0jp9fBSLCHSnR4R6LkooMT8sKr57W0BYjbC0eB1HhgL+zoryEO14WsZUwRkQkXfhfWImP6PU0D28C02piY30vcF1MB53QXWEurGGEaQFl3/IEKMQfY73df3cDzVE6vg3PATt384anWL8QM1GK2Uu1IkBoP7IU9HKuV6XmiYXnidTwmWSAcBzsl5vcS9yHsVDeRzLBL0wAKgjkanhvslFSS0etgJNjDk08MY/wHgJAsAqLlgILdXX2/q+WdlbZnR4HUeIA2KeBxOMIOx1I3anLFwrmCg88aJshEPUfCHhPze4n7Isvfnfvpbw/s0jSAp7QmWXODvca2yul1MNYDqosPqF52VxTux/f27N80m/sEdtxeOAqkxgOqZ+8CUtwPj5XAXsqe3ccXvQTwR8FO4S4l5vcS92WWf5HR/k6KZNMAUiNkzStmj7DXWb0ORht6xITIGln6NiZR743ZYwgzEMawo0DPeECHMQXCzuFQ73DhU/RSopGSo2J22KsL/nVivujZ1XDjVLCTNlIjZVEhZvKAGiq/2WT1OhgNdtX6FVB/cDTGd4vApDYglM4EfeOBpGevMfwpeciPDxf6iyJajoX6jZYEUc+jYMfH3TJJzOdc5giVTuzPCztr67Ne8DN72U4Oe1BTBddP/1tgRq+D88C+XnGETrB72jDkbnB8ErubOPxH26OjwIDxAG2COfQAOx9LHi4cBvwHaITR8UhmoH8f7Im7AN6zVGI+wc5Z/iqxP8M4uxQZtZEaloXuAqhNFy3fOLtWE3/Pzel1MCbs6dhEu//refpx27sx77PWU2F/IAYz2A325wP7AzGYwW6wPx/Yl1oiU2mwG+ym0mC3xRZzF7Ce3XpLC2OsaQx2g92axmA32K1pDPblwX5cpr81jcE+X9iL5uCLIS7b+xjjNE3fR0CnwSvDgXIqlZywj6/qQ3fiBiwQKJ/fNadNifxErXu9DopTJkmZGvbLiwPJxguYnl7n7fd8BHQaPOXqc9L+FCrT6wzexSPnA2mBQNpzZjdLrcNeBwtwFujDHl4/3A+7W0KRkgRy5SOg0+ApV5+T9idQ2fMJiLOvRecDaYHg1Nua04QxQ14H83/jsQ87T8oYcupgalLMMawp05/uZzSdr76xCSMBeHm3rPS2Me0PkzLwXqhTOsJdpDohukh6du0jkGTvU/JS9uSDfTmobczNIOcDaYHAW84Bdqq2BcwKOQA7JhbV4jXxavuqo+723XelzPTHCR99oil5CKg4SMHeQMYFb+ubSv6n8vnYZ4A745MjzMRHQGfvx4xOmdo5Oew4NyQrFhYInM+f5aX7Ydj7Xgcsa0mw08y7IZMOMpJDcp4ri2hOB43h3TFollI5zzXO+dhzhIko0fWEE1yTV4CG3Sfp8VenY5T6CMg0+HnCXmnFygJB5PO3GdKpBmEf8DrQspYCu4vZQpDhDDYwv7zxfTI7MRYx7g0wRg8BdDUqYjKS9g2AFmW/AfgEYRIlv5DnAPoM8FcnNk3fR0Clwc8SdkzsjIq1BQLn83OYlhv2Aa+DRNZCYOc+mGJ2nw5dQ9woMv2pBxceAqJnLxPfAICdt6WevRb7ip4dfAZOq70mGTySPgI6DX6WMTuII8XaAoHy+bMG7sngdN/rIJG1DNhFUr+vc3/l+hQNd/lzGf7gawH/2bTsISCIjaZ5RanCGN5WxOvcnzLs6DNwWlebmD4pHwG9hnL1ZdL+1LCL3ro/9EL5/KLG8mod9DpIZC0D9jjAK8IYMIXpPkAKdcz0p2cn9hAY6tlrfkAt4M4QtiU3ppB0jV4BAvboM0BfndY0fR8BXqNz9Yspx9kV7LJ7dL2scMrnv313ncFqeCgwHPQ6iLKWA/v9Dro2jxkOxNyx5ws8ssK44ppegu/iYfAQUEOPZat9A7qwpIGmgm0pEAVnDPzxjWEnnwF3wu9y6e99ihhao3P1+cME4+zaAkFEJgOw02+WRcbfshtdoQNeB/l/gR4hZn/kcuT803ntXe3dmPdZq8FuABnsBrsBZLAvu0Sm0mA32E2lwW6LLe/J8n8BBgDGyNSklSGnCwAAAABJRU5ErkJggg==</binary><binary content-type="image/png" id="i_035.png"></binary><binary id="i_036.png" content-type="image/png">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</binary><binary id="i_037.png" content-type="image/png"></binary><binary content-type="image/png" id="i_038.png"></binary><binary content-type="image/png" id="i_040.png">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</binary><binary content-type="image/png" id="i_041.png"></binary><binary id="i_042.png" content-type="image/png"></binary><binary id="i_043.jpg" content-type="image/jpeg"></binary><binary id="i_044.jpg" content-type="image/jpeg"></binary><binary content-type="image/jpeg" id="i_045.jpg">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</binary><binary content-type="image/png" id="i_029.png"></binary><binary id="cover.jpg" content-type="image/jpeg"></binary></FictionBook>